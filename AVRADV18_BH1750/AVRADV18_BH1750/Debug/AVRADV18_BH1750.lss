
AVRADV18_BH1750.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000bea  00000c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080010c  0080010c  00000c8a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e58  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091b  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082d  00000000  00000000  00002573  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000556  00000000  00000000  00002f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b1  00000000  00000000  000034d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003b83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_18>
  4c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 35       	cpi	r26, 0x51	; 81
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <stdio.h>
#include "uart.h"
#include "i2cmaster.h"
#define BH17150_ADDR (0x23 << 1)
int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	64 97       	sbiw	r28, 0x14	; 20
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	uint16_t okuma = 0;
	sei();
  ba:	78 94       	sei
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
  bc:	87 e6       	ldi	r24, 0x67	; 103
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 9d 01 	call	0x33a	; 0x33a <uart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	81 ee       	ldi	r24, 0xE1	; 225
  c8:	94 e0       	ldi	r25, 0x04	; 4
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x2e>
  d4:	00 00       	nop
	_delay_ms(100);
	i2c_init();
  d6:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_init>
	i2c_rep_start(BH17150_ADDR+I2C_WRITE);
  da:	86 e4       	ldi	r24, 0x46	; 70
  dc:	0e 94 11 01 	call	0x222	; 0x222 <i2c_rep_start>
	i2c_write(0x10);
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	0e 94 1d 01 	call	0x23a	; 0x23a <i2c_write>
	i2c_stop();
  e6:	0e 94 14 01 	call	0x228	; 0x228 <i2c_stop>
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	9c e9       	ldi	r25, 0x9C	; 156
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x48>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x4e>
  f4:	00 00       	nop
	_delay_ms(10);
	i2c_rep_start(BH17150_ADDR+I2C_WRITE);
  f6:	86 e4       	ldi	r24, 0x46	; 70
  f8:	0e 94 11 01 	call	0x222	; 0x222 <i2c_rep_start>
	i2c_write(0x10);
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	0e 94 1d 01 	call	0x23a	; 0x23a <i2c_write>
	i2c_stop();
 102:	0e 94 14 01 	call	0x228	; 0x228 <i2c_stop>
 106:	9f ef       	ldi	r25, 0xFF	; 255
 108:	23 ec       	ldi	r18, 0xC3	; 195
 10a:	89 e0       	ldi	r24, 0x09	; 9
 10c:	91 50       	subi	r25, 0x01	; 1
 10e:	20 40       	sbci	r18, 0x00	; 0
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x66>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x70>
 116:	00 00       	nop
	_delay_ms(200);
	i2c_start_wait(BH17150_ADDR+I2C_READ);
 118:	87 e4       	ldi	r24, 0x47	; 71
 11a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <i2c_start_wait>
	
	okuma = i2c_readAck();
 11e:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_readAck>
 122:	08 2f       	mov	r16, r24
 124:	10 e0       	ldi	r17, 0x00	; 0
	okuma <<= 8;
 126:	10 2f       	mov	r17, r16
 128:	00 27       	eor	r16, r16
	okuma |= i2c_readNak();
 12a:	0e 94 3a 01 	call	0x274	; 0x274 <i2c_readNak>
	float lux  = okuma / 1.2F;
	//////////
	char buf[20];
	sprintf(buf, "OKUMA : %u", (unsigned int)lux);
 12e:	b8 01       	movw	r22, r16
 130:	68 2b       	or	r22, r24
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatunsisf>
 13a:	2a e9       	ldi	r18, 0x9A	; 154
 13c:	39 e9       	ldi	r19, 0x99	; 153
 13e:	49 e9       	ldi	r20, 0x99	; 153
 140:	5f e3       	ldi	r21, 0x3F	; 63
 142:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divsf3>
 146:	0e 94 4c 02 	call	0x498	; 0x498 <__fixunssfsi>
 14a:	7f 93       	push	r23
 14c:	6f 93       	push	r22
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	9f 93       	push	r25
 154:	8f 93       	push	r24
 156:	8e 01       	movw	r16, r28
 158:	0f 5f       	subi	r16, 0xFF	; 255
 15a:	1f 4f       	sbci	r17, 0xFF	; 255
 15c:	1f 93       	push	r17
 15e:	0f 93       	push	r16
 160:	0e 94 09 03 	call	0x612	; 0x612 <sprintf>
	uart_puts(buf);
 164:	c8 01       	movw	r24, r16
 166:	0e 94 cb 01 	call	0x396	; 0x396 <uart_puts>
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	ff cf       	rjmp	.-2      	; 0x176 <main+0xd0>

00000178 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 178:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 17c:	88 e4       	ldi	r24, 0x48	; 72
 17e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 182:	08 95       	ret

00000184 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 184:	94 ea       	ldi	r25, 0xA4	; 164
 186:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 18a:	ec eb       	ldi	r30, 0xBC	; 188
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	90 81       	ld	r25, Z
 190:	99 23       	and	r25, r25
 192:	ec f7       	brge	.-6      	; 0x18e <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 194:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 198:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 19a:	98 30       	cpi	r25, 0x08	; 8
 19c:	11 f0       	breq	.+4      	; 0x1a2 <i2c_start+0x1e>
 19e:	90 31       	cpi	r25, 0x10	; 16
 1a0:	a1 f4       	brne	.+40     	; 0x1ca <i2c_start+0x46>

	// send device address
	TWDR = address;
 1a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 1a6:	84 e8       	ldi	r24, 0x84	; 132
 1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 1ac:	ec eb       	ldi	r30, 0xBC	; 188
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 23       	and	r24, r24
 1b4:	ec f7       	brge	.-6      	; 0x1b0 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 1b6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1ba:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 1bc:	98 31       	cpi	r25, 0x18	; 24
 1be:	39 f0       	breq	.+14     	; 0x1ce <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 34       	cpi	r25, 0x40	; 64
 1c4:	29 f4       	brne	.+10     	; 0x1d0 <i2c_start+0x4c>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 1ce:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 1d0:	08 95       	ret

000001d2 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 1d6:	ec eb       	ldi	r30, 0xBC	; 188
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 1dc:	a9 eb       	ldi	r26, 0xB9	; 185
 1de:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
 1e0:	cb eb       	ldi	r28, 0xBB	; 187
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 1e4:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 1e6:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 1e8:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 1ea:	90 81       	ld	r25, Z
 1ec:	99 23       	and	r25, r25
 1ee:	ec f7       	brge	.-6      	; 0x1ea <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 1f0:	9c 91       	ld	r25, X
 1f2:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 1f4:	98 30       	cpi	r25, 0x08	; 8
 1f6:	11 f0       	breq	.+4      	; 0x1fc <i2c_start_wait+0x2a>
 1f8:	90 31       	cpi	r25, 0x10	; 16
 1fa:	b1 f7       	brne	.-20     	; 0x1e8 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
 1fc:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 1fe:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 200:	90 81       	ld	r25, Z
 202:	99 23       	and	r25, r25
 204:	ec f7       	brge	.-6      	; 0x200 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 206:	9c 91       	ld	r25, X
 208:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 20a:	90 32       	cpi	r25, 0x20	; 32
 20c:	11 f0       	breq	.+4      	; 0x212 <i2c_start_wait+0x40>
 20e:	98 35       	cpi	r25, 0x58	; 88
 210:	29 f4       	brne	.+10     	; 0x21c <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 212:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 214:	90 81       	ld	r25, Z
 216:	94 fd       	sbrc	r25, 4
 218:	fd cf       	rjmp	.-6      	; 0x214 <i2c_start_wait+0x42>
 21a:	e6 cf       	rjmp	.-52     	; 0x1e8 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 222:	0e 94 c2 00 	call	0x184	; 0x184 <i2c_start>

}/* i2c_rep_start */
 226:	08 95       	ret

00000228 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 228:	84 e9       	ldi	r24, 0x94	; 148
 22a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 22e:	ec eb       	ldi	r30, 0xBC	; 188
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	84 fd       	sbrc	r24, 4
 236:	fd cf       	rjmp	.-6      	; 0x232 <i2c_stop+0xa>

}/* i2c_stop */
 238:	08 95       	ret

0000023a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 23a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 23e:	84 e8       	ldi	r24, 0x84	; 132
 240:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 244:	ec eb       	ldi	r30, 0xBC	; 188
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	88 23       	and	r24, r24
 24c:	ec f7       	brge	.-6      	; 0x248 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 24e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 252:	98 7f       	andi	r25, 0xF8	; 248
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	98 32       	cpi	r25, 0x28	; 40
 258:	09 f4       	brne	.+2      	; 0x25c <i2c_write+0x22>
 25a:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 25c:	08 95       	ret

0000025e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 25e:	84 ec       	ldi	r24, 0xC4	; 196
 260:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
 264:	ec eb       	ldi	r30, 0xBC	; 188
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	88 23       	and	r24, r24
 26c:	ec f7       	brge	.-6      	; 0x268 <i2c_readAck+0xa>

    return TWDR;
 26e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
 272:	08 95       	ret

00000274 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 274:	84 e8       	ldi	r24, 0x84	; 132
 276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 27a:	ec eb       	ldi	r30, 0xBC	; 188
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	88 23       	and	r24, r24
 282:	ec f7       	brge	.-6      	; 0x27e <i2c_readNak+0xa>
	
    return TWDR;
 284:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
 288:	08 95       	ret

0000028a <__vector_18>:
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	2f 93       	push	r18
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
 29e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2a2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2a6:	8c 71       	andi	r24, 0x1C	; 28
 2a8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <UART_RxHead>
 2ac:	ef 5f       	subi	r30, 0xFF	; 255
 2ae:	ef 71       	andi	r30, 0x1F	; 31
 2b0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <UART_RxTail>
 2b4:	e9 17       	cp	r30, r25
 2b6:	39 f0       	breq	.+14     	; 0x2c6 <__vector_18+0x3c>
 2b8:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <UART_RxHead>
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ef 5e       	subi	r30, 0xEF	; 239
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	20 83       	st	Z, r18
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <__vector_18+0x3e>
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 2cc:	89 2b       	or	r24, r25
 2ce:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_19>:
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
 2f8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <UART_TxHead>
 2fc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <UART_TxTail>
 300:	98 17       	cp	r25, r24
 302:	69 f0       	breq	.+26     	; 0x31e <__vector_19+0x38>
 304:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <UART_TxTail>
 308:	ef 5f       	subi	r30, 0xFF	; 255
 30a:	ef 71       	andi	r30, 0x1F	; 31
 30c:	e0 93 0f 01 	sts	0x010F, r30	; 0x80010f <UART_TxTail>
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	ef 5c       	subi	r30, 0xCF	; 207
 314:	fe 4f       	sbci	r31, 0xFE	; 254
 316:	80 81       	ld	r24, Z
 318:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 31c:	05 c0       	rjmp	.+10     	; 0x328 <__vector_19+0x42>
 31e:	e1 ec       	ldi	r30, 0xC1	; 193
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	8f 7d       	andi	r24, 0xDF	; 223
 326:	80 83       	st	Z, r24
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <uart_init>:
 33a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <UART_TxHead>
 33e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <UART_TxTail>
 342:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <UART_RxHead>
 346:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <UART_RxTail>
 34a:	99 23       	and	r25, r25
 34c:	1c f4       	brge	.+6      	; 0x354 <uart_init+0x1a>
 34e:	22 e0       	ldi	r18, 0x02	; 2
 350:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 354:	90 78       	andi	r25, 0x80	; 128
 356:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 35a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 35e:	88 e9       	ldi	r24, 0x98	; 152
 360:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 364:	86 e0       	ldi	r24, 0x06	; 6
 366:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 36a:	08 95       	ret

0000036c <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 36c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <UART_TxHead>
 370:	2f 5f       	subi	r18, 0xFF	; 255
 372:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 374:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <UART_TxTail>
 378:	29 17       	cp	r18, r25
 37a:	e1 f3       	breq	.-8      	; 0x374 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 37c:	e2 2f       	mov	r30, r18
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	ef 5c       	subi	r30, 0xCF	; 207
 382:	fe 4f       	sbci	r31, 0xFE	; 254
 384:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 386:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 38a:	e1 ec       	ldi	r30, 0xC1	; 193
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	80 62       	ori	r24, 0x20	; 32
 392:	80 83       	st	Z, r24
 394:	08 95       	ret

00000396 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	ec 01       	movw	r28, r24
    while (*s) 
 39c:	88 81       	ld	r24, Y
 39e:	88 23       	and	r24, r24
 3a0:	31 f0       	breq	.+12     	; 0x3ae <uart_puts+0x18>
 3a2:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 3a4:	0e 94 b6 01 	call	0x36c	; 0x36c <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 3a8:	89 91       	ld	r24, Y+
 3aa:	81 11       	cpse	r24, r1
 3ac:	fb cf       	rjmp	.-10     	; 0x3a4 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <__divsf3>:
 3b4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__divsf3x>
 3b8:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_round>
 3bc:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscB>
 3c0:	58 f0       	brcs	.+22     	; 0x3d8 <__divsf3+0x24>
 3c2:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscA>
 3c6:	40 f0       	brcs	.+16     	; 0x3d8 <__divsf3+0x24>
 3c8:	29 f4       	brne	.+10     	; 0x3d4 <__divsf3+0x20>
 3ca:	5f 3f       	cpi	r21, 0xFF	; 255
 3cc:	29 f0       	breq	.+10     	; 0x3d8 <__divsf3+0x24>
 3ce:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 3d2:	51 11       	cpse	r21, r1
 3d4:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>
 3d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_nan>

000003dc <__divsf3x>:
 3dc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_split3>
 3e0:	68 f3       	brcs	.-38     	; 0x3bc <__divsf3+0x8>

000003e2 <__divsf3_pse>:
 3e2:	99 23       	and	r25, r25
 3e4:	b1 f3       	breq	.-20     	; 0x3d2 <__divsf3+0x1e>
 3e6:	55 23       	and	r21, r21
 3e8:	91 f3       	breq	.-28     	; 0x3ce <__divsf3+0x1a>
 3ea:	95 1b       	sub	r25, r21
 3ec:	55 0b       	sbc	r21, r21
 3ee:	bb 27       	eor	r27, r27
 3f0:	aa 27       	eor	r26, r26
 3f2:	62 17       	cp	r22, r18
 3f4:	73 07       	cpc	r23, r19
 3f6:	84 07       	cpc	r24, r20
 3f8:	38 f0       	brcs	.+14     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3fa:	9f 5f       	subi	r25, 0xFF	; 255
 3fc:	5f 4f       	sbci	r21, 0xFF	; 255
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	44 1f       	adc	r20, r20
 404:	aa 1f       	adc	r26, r26
 406:	a9 f3       	breq	.-22     	; 0x3f2 <__divsf3_pse+0x10>
 408:	35 d0       	rcall	.+106    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 40a:	0e 2e       	mov	r0, r30
 40c:	3a f0       	brmi	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 40e:	e0 e8       	ldi	r30, 0x80	; 128
 410:	32 d0       	rcall	.+100    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 412:	91 50       	subi	r25, 0x01	; 1
 414:	50 40       	sbci	r21, 0x00	; 0
 416:	e6 95       	lsr	r30
 418:	00 1c       	adc	r0, r0
 41a:	ca f7       	brpl	.-14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 41c:	2b d0       	rcall	.+86     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 41e:	fe 2f       	mov	r31, r30
 420:	29 d0       	rcall	.+82     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	88 1f       	adc	r24, r24
 428:	bb 1f       	adc	r27, r27
 42a:	26 17       	cp	r18, r22
 42c:	37 07       	cpc	r19, r23
 42e:	48 07       	cpc	r20, r24
 430:	ab 07       	cpc	r26, r27
 432:	b0 e8       	ldi	r27, 0x80	; 128
 434:	09 f0       	breq	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	bb 0b       	sbc	r27, r27
 438:	80 2d       	mov	r24, r0
 43a:	bf 01       	movw	r22, r30
 43c:	ff 27       	eor	r31, r31
 43e:	93 58       	subi	r25, 0x83	; 131
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	3a f0       	brmi	.+14     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 444:	9e 3f       	cpi	r25, 0xFE	; 254
 446:	51 05       	cpc	r21, r1
 448:	78 f0       	brcs	.+30     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 44a:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 44e:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>
 452:	5f 3f       	cpi	r21, 0xFF	; 255
 454:	e4 f3       	brlt	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	98 3e       	cpi	r25, 0xE8	; 232
 458:	d4 f3       	brlt	.-12     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 45a:	86 95       	lsr	r24
 45c:	77 95       	ror	r23
 45e:	67 95       	ror	r22
 460:	b7 95       	ror	r27
 462:	f7 95       	ror	r31
 464:	9f 5f       	subi	r25, 0xFF	; 255
 466:	c9 f7       	brne	.-14     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 468:	88 0f       	add	r24, r24
 46a:	91 1d       	adc	r25, r1
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret
 474:	e1 e0       	ldi	r30, 0x01	; 1
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	bb 1f       	adc	r27, r27
 47e:	62 17       	cp	r22, r18
 480:	73 07       	cpc	r23, r19
 482:	84 07       	cpc	r24, r20
 484:	ba 07       	cpc	r27, r26
 486:	20 f0       	brcs	.+8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 488:	62 1b       	sub	r22, r18
 48a:	73 0b       	sbc	r23, r19
 48c:	84 0b       	sbc	r24, r20
 48e:	ba 0b       	sbc	r27, r26
 490:	ee 1f       	adc	r30, r30
 492:	88 f7       	brcc	.-30     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 494:	e0 95       	com	r30
 496:	08 95       	ret

00000498 <__fixunssfsi>:
 498:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_splitA>
 49c:	88 f0       	brcs	.+34     	; 0x4c0 <__fixunssfsi+0x28>
 49e:	9f 57       	subi	r25, 0x7F	; 127
 4a0:	98 f0       	brcs	.+38     	; 0x4c8 <__fixunssfsi+0x30>
 4a2:	b9 2f       	mov	r27, r25
 4a4:	99 27       	eor	r25, r25
 4a6:	b7 51       	subi	r27, 0x17	; 23
 4a8:	b0 f0       	brcs	.+44     	; 0x4d6 <__fixunssfsi+0x3e>
 4aa:	e1 f0       	breq	.+56     	; 0x4e4 <__fixunssfsi+0x4c>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	1a f0       	brmi	.+6      	; 0x4bc <__fixunssfsi+0x24>
 4b6:	ba 95       	dec	r27
 4b8:	c9 f7       	brne	.-14     	; 0x4ac <__fixunssfsi+0x14>
 4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <__fixunssfsi+0x4c>
 4bc:	b1 30       	cpi	r27, 0x01	; 1
 4be:	91 f0       	breq	.+36     	; 0x4e4 <__fixunssfsi+0x4c>
 4c0:	0e 94 02 03 	call	0x604	; 0x604 <__fp_zero>
 4c4:	b1 e0       	ldi	r27, 0x01	; 1
 4c6:	08 95       	ret
 4c8:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_zero>
 4cc:	67 2f       	mov	r22, r23
 4ce:	78 2f       	mov	r23, r24
 4d0:	88 27       	eor	r24, r24
 4d2:	b8 5f       	subi	r27, 0xF8	; 248
 4d4:	39 f0       	breq	.+14     	; 0x4e4 <__fixunssfsi+0x4c>
 4d6:	b9 3f       	cpi	r27, 0xF9	; 249
 4d8:	cc f3       	brlt	.-14     	; 0x4cc <__fixunssfsi+0x34>
 4da:	86 95       	lsr	r24
 4dc:	77 95       	ror	r23
 4de:	67 95       	ror	r22
 4e0:	b3 95       	inc	r27
 4e2:	d9 f7       	brne	.-10     	; 0x4da <__fixunssfsi+0x42>
 4e4:	3e f4       	brtc	.+14     	; 0x4f4 <__fixunssfsi+0x5c>
 4e6:	90 95       	com	r25
 4e8:	80 95       	com	r24
 4ea:	70 95       	com	r23
 4ec:	61 95       	neg	r22
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	08 95       	ret

000004f6 <__floatunsisf>:
 4f6:	e8 94       	clt
 4f8:	09 c0       	rjmp	.+18     	; 0x50c <__floatsisf+0x12>

000004fa <__floatsisf>:
 4fa:	97 fb       	bst	r25, 7
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__floatsisf+0x12>
 4fe:	90 95       	com	r25
 500:	80 95       	com	r24
 502:	70 95       	com	r23
 504:	61 95       	neg	r22
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	99 23       	and	r25, r25
 50e:	a9 f0       	breq	.+42     	; 0x53a <__floatsisf+0x40>
 510:	f9 2f       	mov	r31, r25
 512:	96 e9       	ldi	r25, 0x96	; 150
 514:	bb 27       	eor	r27, r27
 516:	93 95       	inc	r25
 518:	f6 95       	lsr	r31
 51a:	87 95       	ror	r24
 51c:	77 95       	ror	r23
 51e:	67 95       	ror	r22
 520:	b7 95       	ror	r27
 522:	f1 11       	cpse	r31, r1
 524:	f8 cf       	rjmp	.-16     	; 0x516 <__floatsisf+0x1c>
 526:	fa f4       	brpl	.+62     	; 0x566 <__floatsisf+0x6c>
 528:	bb 0f       	add	r27, r27
 52a:	11 f4       	brne	.+4      	; 0x530 <__floatsisf+0x36>
 52c:	60 ff       	sbrs	r22, 0
 52e:	1b c0       	rjmp	.+54     	; 0x566 <__floatsisf+0x6c>
 530:	6f 5f       	subi	r22, 0xFF	; 255
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	16 c0       	rjmp	.+44     	; 0x566 <__floatsisf+0x6c>
 53a:	88 23       	and	r24, r24
 53c:	11 f0       	breq	.+4      	; 0x542 <__floatsisf+0x48>
 53e:	96 e9       	ldi	r25, 0x96	; 150
 540:	11 c0       	rjmp	.+34     	; 0x564 <__floatsisf+0x6a>
 542:	77 23       	and	r23, r23
 544:	21 f0       	breq	.+8      	; 0x54e <__floatsisf+0x54>
 546:	9e e8       	ldi	r25, 0x8E	; 142
 548:	87 2f       	mov	r24, r23
 54a:	76 2f       	mov	r23, r22
 54c:	05 c0       	rjmp	.+10     	; 0x558 <__floatsisf+0x5e>
 54e:	66 23       	and	r22, r22
 550:	71 f0       	breq	.+28     	; 0x56e <__floatsisf+0x74>
 552:	96 e8       	ldi	r25, 0x86	; 134
 554:	86 2f       	mov	r24, r22
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	2a f0       	brmi	.+10     	; 0x566 <__floatsisf+0x6c>
 55c:	9a 95       	dec	r25
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	88 1f       	adc	r24, r24
 564:	da f7       	brpl	.-10     	; 0x55c <__floatsisf+0x62>
 566:	88 0f       	add	r24, r24
 568:	96 95       	lsr	r25
 56a:	87 95       	ror	r24
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret

00000570 <__fp_inf>:
 570:	97 f9       	bld	r25, 7
 572:	9f 67       	ori	r25, 0x7F	; 127
 574:	80 e8       	ldi	r24, 0x80	; 128
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	08 95       	ret

0000057c <__fp_nan>:
 57c:	9f ef       	ldi	r25, 0xFF	; 255
 57e:	80 ec       	ldi	r24, 0xC0	; 192
 580:	08 95       	ret

00000582 <__fp_pscA>:
 582:	00 24       	eor	r0, r0
 584:	0a 94       	dec	r0
 586:	16 16       	cp	r1, r22
 588:	17 06       	cpc	r1, r23
 58a:	18 06       	cpc	r1, r24
 58c:	09 06       	cpc	r0, r25
 58e:	08 95       	ret

00000590 <__fp_pscB>:
 590:	00 24       	eor	r0, r0
 592:	0a 94       	dec	r0
 594:	12 16       	cp	r1, r18
 596:	13 06       	cpc	r1, r19
 598:	14 06       	cpc	r1, r20
 59a:	05 06       	cpc	r0, r21
 59c:	08 95       	ret

0000059e <__fp_round>:
 59e:	09 2e       	mov	r0, r25
 5a0:	03 94       	inc	r0
 5a2:	00 0c       	add	r0, r0
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__fp_round+0xc>
 5a6:	88 23       	and	r24, r24
 5a8:	52 f0       	brmi	.+20     	; 0x5be <__fp_round+0x20>
 5aa:	bb 0f       	add	r27, r27
 5ac:	40 f4       	brcc	.+16     	; 0x5be <__fp_round+0x20>
 5ae:	bf 2b       	or	r27, r31
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <__fp_round+0x18>
 5b2:	60 ff       	sbrs	r22, 0
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <__fp_round+0x20>
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	8f 4f       	sbci	r24, 0xFF	; 255
 5bc:	9f 4f       	sbci	r25, 0xFF	; 255
 5be:	08 95       	ret

000005c0 <__fp_split3>:
 5c0:	57 fd       	sbrc	r21, 7
 5c2:	90 58       	subi	r25, 0x80	; 128
 5c4:	44 0f       	add	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	59 f0       	breq	.+22     	; 0x5e0 <__fp_splitA+0x10>
 5ca:	5f 3f       	cpi	r21, 0xFF	; 255
 5cc:	71 f0       	breq	.+28     	; 0x5ea <__fp_splitA+0x1a>
 5ce:	47 95       	ror	r20

000005d0 <__fp_splitA>:
 5d0:	88 0f       	add	r24, r24
 5d2:	97 fb       	bst	r25, 7
 5d4:	99 1f       	adc	r25, r25
 5d6:	61 f0       	breq	.+24     	; 0x5f0 <__fp_splitA+0x20>
 5d8:	9f 3f       	cpi	r25, 0xFF	; 255
 5da:	79 f0       	breq	.+30     	; 0x5fa <__fp_splitA+0x2a>
 5dc:	87 95       	ror	r24
 5de:	08 95       	ret
 5e0:	12 16       	cp	r1, r18
 5e2:	13 06       	cpc	r1, r19
 5e4:	14 06       	cpc	r1, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	f2 cf       	rjmp	.-28     	; 0x5ce <__fp_split3+0xe>
 5ea:	46 95       	lsr	r20
 5ec:	f1 df       	rcall	.-30     	; 0x5d0 <__fp_splitA>
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <__fp_splitA+0x30>
 5f0:	16 16       	cp	r1, r22
 5f2:	17 06       	cpc	r1, r23
 5f4:	18 06       	cpc	r1, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	f1 cf       	rjmp	.-30     	; 0x5dc <__fp_splitA+0xc>
 5fa:	86 95       	lsr	r24
 5fc:	71 05       	cpc	r23, r1
 5fe:	61 05       	cpc	r22, r1
 600:	08 94       	sec
 602:	08 95       	ret

00000604 <__fp_zero>:
 604:	e8 94       	clt

00000606 <__fp_szero>:
 606:	bb 27       	eor	r27, r27
 608:	66 27       	eor	r22, r22
 60a:	77 27       	eor	r23, r23
 60c:	cb 01       	movw	r24, r22
 60e:	97 f9       	bld	r25, 7
 610:	08 95       	ret

00000612 <sprintf>:
 612:	ae e0       	ldi	r26, 0x0E	; 14
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	ef e0       	ldi	r30, 0x0F	; 15
 618:	f3 e0       	ldi	r31, 0x03	; 3
 61a:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__prologue_saves__+0x1c>
 61e:	0d 89       	ldd	r16, Y+21	; 0x15
 620:	1e 89       	ldd	r17, Y+22	; 0x16
 622:	86 e0       	ldi	r24, 0x06	; 6
 624:	8c 83       	std	Y+4, r24	; 0x04
 626:	1a 83       	std	Y+2, r17	; 0x02
 628:	09 83       	std	Y+1, r16	; 0x01
 62a:	8f ef       	ldi	r24, 0xFF	; 255
 62c:	9f e7       	ldi	r25, 0x7F	; 127
 62e:	9e 83       	std	Y+6, r25	; 0x06
 630:	8d 83       	std	Y+5, r24	; 0x05
 632:	ae 01       	movw	r20, r28
 634:	47 5e       	subi	r20, 0xE7	; 231
 636:	5f 4f       	sbci	r21, 0xFF	; 255
 638:	6f 89       	ldd	r22, Y+23	; 0x17
 63a:	78 8d       	ldd	r23, Y+24	; 0x18
 63c:	ce 01       	movw	r24, r28
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	0e 94 2b 03 	call	0x656	; 0x656 <vfprintf>
 644:	ef 81       	ldd	r30, Y+7	; 0x07
 646:	f8 85       	ldd	r31, Y+8	; 0x08
 648:	e0 0f       	add	r30, r16
 64a:	f1 1f       	adc	r31, r17
 64c:	10 82       	st	Z, r1
 64e:	2e 96       	adiw	r28, 0x0e	; 14
 650:	e4 e0       	ldi	r30, 0x04	; 4
 652:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__epilogue_restores__+0x1c>

00000656 <vfprintf>:
 656:	ab e0       	ldi	r26, 0x0B	; 11
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	e1 e3       	ldi	r30, 0x31	; 49
 65c:	f3 e0       	ldi	r31, 0x03	; 3
 65e:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__prologue_saves__>
 662:	6c 01       	movw	r12, r24
 664:	7b 01       	movw	r14, r22
 666:	8a 01       	movw	r16, r20
 668:	fc 01       	movw	r30, r24
 66a:	17 82       	std	Z+7, r1	; 0x07
 66c:	16 82       	std	Z+6, r1	; 0x06
 66e:	83 81       	ldd	r24, Z+3	; 0x03
 670:	81 ff       	sbrs	r24, 1
 672:	cc c1       	rjmp	.+920    	; 0xa0c <__stack+0x10d>
 674:	ce 01       	movw	r24, r28
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	3c 01       	movw	r6, r24
 67a:	f6 01       	movw	r30, r12
 67c:	93 81       	ldd	r25, Z+3	; 0x03
 67e:	f7 01       	movw	r30, r14
 680:	93 fd       	sbrc	r25, 3
 682:	85 91       	lpm	r24, Z+
 684:	93 ff       	sbrs	r25, 3
 686:	81 91       	ld	r24, Z+
 688:	7f 01       	movw	r14, r30
 68a:	88 23       	and	r24, r24
 68c:	09 f4       	brne	.+2      	; 0x690 <vfprintf+0x3a>
 68e:	ba c1       	rjmp	.+884    	; 0xa04 <__stack+0x105>
 690:	85 32       	cpi	r24, 0x25	; 37
 692:	39 f4       	brne	.+14     	; 0x6a2 <vfprintf+0x4c>
 694:	93 fd       	sbrc	r25, 3
 696:	85 91       	lpm	r24, Z+
 698:	93 ff       	sbrs	r25, 3
 69a:	81 91       	ld	r24, Z+
 69c:	7f 01       	movw	r14, r30
 69e:	85 32       	cpi	r24, 0x25	; 37
 6a0:	29 f4       	brne	.+10     	; 0x6ac <vfprintf+0x56>
 6a2:	b6 01       	movw	r22, r12
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
 6aa:	e7 cf       	rjmp	.-50     	; 0x67a <vfprintf+0x24>
 6ac:	91 2c       	mov	r9, r1
 6ae:	21 2c       	mov	r2, r1
 6b0:	31 2c       	mov	r3, r1
 6b2:	ff e1       	ldi	r31, 0x1F	; 31
 6b4:	f3 15       	cp	r31, r3
 6b6:	d8 f0       	brcs	.+54     	; 0x6ee <vfprintf+0x98>
 6b8:	8b 32       	cpi	r24, 0x2B	; 43
 6ba:	79 f0       	breq	.+30     	; 0x6da <vfprintf+0x84>
 6bc:	38 f4       	brcc	.+14     	; 0x6cc <vfprintf+0x76>
 6be:	80 32       	cpi	r24, 0x20	; 32
 6c0:	79 f0       	breq	.+30     	; 0x6e0 <vfprintf+0x8a>
 6c2:	83 32       	cpi	r24, 0x23	; 35
 6c4:	a1 f4       	brne	.+40     	; 0x6ee <vfprintf+0x98>
 6c6:	23 2d       	mov	r18, r3
 6c8:	20 61       	ori	r18, 0x10	; 16
 6ca:	1d c0       	rjmp	.+58     	; 0x706 <vfprintf+0xb0>
 6cc:	8d 32       	cpi	r24, 0x2D	; 45
 6ce:	61 f0       	breq	.+24     	; 0x6e8 <vfprintf+0x92>
 6d0:	80 33       	cpi	r24, 0x30	; 48
 6d2:	69 f4       	brne	.+26     	; 0x6ee <vfprintf+0x98>
 6d4:	23 2d       	mov	r18, r3
 6d6:	21 60       	ori	r18, 0x01	; 1
 6d8:	16 c0       	rjmp	.+44     	; 0x706 <vfprintf+0xb0>
 6da:	83 2d       	mov	r24, r3
 6dc:	82 60       	ori	r24, 0x02	; 2
 6de:	38 2e       	mov	r3, r24
 6e0:	e3 2d       	mov	r30, r3
 6e2:	e4 60       	ori	r30, 0x04	; 4
 6e4:	3e 2e       	mov	r3, r30
 6e6:	2a c0       	rjmp	.+84     	; 0x73c <vfprintf+0xe6>
 6e8:	f3 2d       	mov	r31, r3
 6ea:	f8 60       	ori	r31, 0x08	; 8
 6ec:	1d c0       	rjmp	.+58     	; 0x728 <vfprintf+0xd2>
 6ee:	37 fc       	sbrc	r3, 7
 6f0:	2d c0       	rjmp	.+90     	; 0x74c <vfprintf+0xf6>
 6f2:	20 ed       	ldi	r18, 0xD0	; 208
 6f4:	28 0f       	add	r18, r24
 6f6:	2a 30       	cpi	r18, 0x0A	; 10
 6f8:	40 f0       	brcs	.+16     	; 0x70a <vfprintf+0xb4>
 6fa:	8e 32       	cpi	r24, 0x2E	; 46
 6fc:	b9 f4       	brne	.+46     	; 0x72c <vfprintf+0xd6>
 6fe:	36 fc       	sbrc	r3, 6
 700:	81 c1       	rjmp	.+770    	; 0xa04 <__stack+0x105>
 702:	23 2d       	mov	r18, r3
 704:	20 64       	ori	r18, 0x40	; 64
 706:	32 2e       	mov	r3, r18
 708:	19 c0       	rjmp	.+50     	; 0x73c <vfprintf+0xe6>
 70a:	36 fe       	sbrs	r3, 6
 70c:	06 c0       	rjmp	.+12     	; 0x71a <vfprintf+0xc4>
 70e:	8a e0       	ldi	r24, 0x0A	; 10
 710:	98 9e       	mul	r9, r24
 712:	20 0d       	add	r18, r0
 714:	11 24       	eor	r1, r1
 716:	92 2e       	mov	r9, r18
 718:	11 c0       	rjmp	.+34     	; 0x73c <vfprintf+0xe6>
 71a:	ea e0       	ldi	r30, 0x0A	; 10
 71c:	2e 9e       	mul	r2, r30
 71e:	20 0d       	add	r18, r0
 720:	11 24       	eor	r1, r1
 722:	22 2e       	mov	r2, r18
 724:	f3 2d       	mov	r31, r3
 726:	f0 62       	ori	r31, 0x20	; 32
 728:	3f 2e       	mov	r3, r31
 72a:	08 c0       	rjmp	.+16     	; 0x73c <vfprintf+0xe6>
 72c:	8c 36       	cpi	r24, 0x6C	; 108
 72e:	21 f4       	brne	.+8      	; 0x738 <vfprintf+0xe2>
 730:	83 2d       	mov	r24, r3
 732:	80 68       	ori	r24, 0x80	; 128
 734:	38 2e       	mov	r3, r24
 736:	02 c0       	rjmp	.+4      	; 0x73c <vfprintf+0xe6>
 738:	88 36       	cpi	r24, 0x68	; 104
 73a:	41 f4       	brne	.+16     	; 0x74c <vfprintf+0xf6>
 73c:	f7 01       	movw	r30, r14
 73e:	93 fd       	sbrc	r25, 3
 740:	85 91       	lpm	r24, Z+
 742:	93 ff       	sbrs	r25, 3
 744:	81 91       	ld	r24, Z+
 746:	7f 01       	movw	r14, r30
 748:	81 11       	cpse	r24, r1
 74a:	b3 cf       	rjmp	.-154    	; 0x6b2 <vfprintf+0x5c>
 74c:	98 2f       	mov	r25, r24
 74e:	9f 7d       	andi	r25, 0xDF	; 223
 750:	95 54       	subi	r25, 0x45	; 69
 752:	93 30       	cpi	r25, 0x03	; 3
 754:	28 f4       	brcc	.+10     	; 0x760 <vfprintf+0x10a>
 756:	0c 5f       	subi	r16, 0xFC	; 252
 758:	1f 4f       	sbci	r17, 0xFF	; 255
 75a:	9f e3       	ldi	r25, 0x3F	; 63
 75c:	99 83       	std	Y+1, r25	; 0x01
 75e:	0d c0       	rjmp	.+26     	; 0x77a <vfprintf+0x124>
 760:	83 36       	cpi	r24, 0x63	; 99
 762:	31 f0       	breq	.+12     	; 0x770 <vfprintf+0x11a>
 764:	83 37       	cpi	r24, 0x73	; 115
 766:	71 f0       	breq	.+28     	; 0x784 <vfprintf+0x12e>
 768:	83 35       	cpi	r24, 0x53	; 83
 76a:	09 f0       	breq	.+2      	; 0x76e <vfprintf+0x118>
 76c:	59 c0       	rjmp	.+178    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 76e:	21 c0       	rjmp	.+66     	; 0x7b2 <vfprintf+0x15c>
 770:	f8 01       	movw	r30, r16
 772:	80 81       	ld	r24, Z
 774:	89 83       	std	Y+1, r24	; 0x01
 776:	0e 5f       	subi	r16, 0xFE	; 254
 778:	1f 4f       	sbci	r17, 0xFF	; 255
 77a:	88 24       	eor	r8, r8
 77c:	83 94       	inc	r8
 77e:	91 2c       	mov	r9, r1
 780:	53 01       	movw	r10, r6
 782:	13 c0       	rjmp	.+38     	; 0x7aa <vfprintf+0x154>
 784:	28 01       	movw	r4, r16
 786:	f2 e0       	ldi	r31, 0x02	; 2
 788:	4f 0e       	add	r4, r31
 78a:	51 1c       	adc	r5, r1
 78c:	f8 01       	movw	r30, r16
 78e:	a0 80       	ld	r10, Z
 790:	b1 80       	ldd	r11, Z+1	; 0x01
 792:	36 fe       	sbrs	r3, 6
 794:	03 c0       	rjmp	.+6      	; 0x79c <vfprintf+0x146>
 796:	69 2d       	mov	r22, r9
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <vfprintf+0x14a>
 79c:	6f ef       	ldi	r22, 0xFF	; 255
 79e:	7f ef       	ldi	r23, 0xFF	; 255
 7a0:	c5 01       	movw	r24, r10
 7a2:	0e 94 17 05 	call	0xa2e	; 0xa2e <strnlen>
 7a6:	4c 01       	movw	r8, r24
 7a8:	82 01       	movw	r16, r4
 7aa:	f3 2d       	mov	r31, r3
 7ac:	ff 77       	andi	r31, 0x7F	; 127
 7ae:	3f 2e       	mov	r3, r31
 7b0:	16 c0       	rjmp	.+44     	; 0x7de <vfprintf+0x188>
 7b2:	28 01       	movw	r4, r16
 7b4:	22 e0       	ldi	r18, 0x02	; 2
 7b6:	42 0e       	add	r4, r18
 7b8:	51 1c       	adc	r5, r1
 7ba:	f8 01       	movw	r30, r16
 7bc:	a0 80       	ld	r10, Z
 7be:	b1 80       	ldd	r11, Z+1	; 0x01
 7c0:	36 fe       	sbrs	r3, 6
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <vfprintf+0x174>
 7c4:	69 2d       	mov	r22, r9
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <vfprintf+0x178>
 7ca:	6f ef       	ldi	r22, 0xFF	; 255
 7cc:	7f ef       	ldi	r23, 0xFF	; 255
 7ce:	c5 01       	movw	r24, r10
 7d0:	0e 94 0c 05 	call	0xa18	; 0xa18 <strnlen_P>
 7d4:	4c 01       	movw	r8, r24
 7d6:	f3 2d       	mov	r31, r3
 7d8:	f0 68       	ori	r31, 0x80	; 128
 7da:	3f 2e       	mov	r3, r31
 7dc:	82 01       	movw	r16, r4
 7de:	33 fc       	sbrc	r3, 3
 7e0:	1b c0       	rjmp	.+54     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7e2:	82 2d       	mov	r24, r2
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	88 16       	cp	r8, r24
 7e8:	99 06       	cpc	r9, r25
 7ea:	b0 f4       	brcc	.+44     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7ec:	b6 01       	movw	r22, r12
 7ee:	80 e2       	ldi	r24, 0x20	; 32
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
 7f6:	2a 94       	dec	r2
 7f8:	f4 cf       	rjmp	.-24     	; 0x7e2 <vfprintf+0x18c>
 7fa:	f5 01       	movw	r30, r10
 7fc:	37 fc       	sbrc	r3, 7
 7fe:	85 91       	lpm	r24, Z+
 800:	37 fe       	sbrs	r3, 7
 802:	81 91       	ld	r24, Z+
 804:	5f 01       	movw	r10, r30
 806:	b6 01       	movw	r22, r12
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
 80e:	21 10       	cpse	r2, r1
 810:	2a 94       	dec	r2
 812:	21 e0       	ldi	r18, 0x01	; 1
 814:	82 1a       	sub	r8, r18
 816:	91 08       	sbc	r9, r1
 818:	81 14       	cp	r8, r1
 81a:	91 04       	cpc	r9, r1
 81c:	71 f7       	brne	.-36     	; 0x7fa <vfprintf+0x1a4>
 81e:	e8 c0       	rjmp	.+464    	; 0x9f0 <__stack+0xf1>
 820:	84 36       	cpi	r24, 0x64	; 100
 822:	11 f0       	breq	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 824:	89 36       	cpi	r24, 0x69	; 105
 826:	41 f5       	brne	.+80     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 828:	f8 01       	movw	r30, r16
 82a:	37 fe       	sbrs	r3, 7
 82c:	07 c0       	rjmp	.+14     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 82e:	60 81       	ld	r22, Z
 830:	71 81       	ldd	r23, Z+1	; 0x01
 832:	82 81       	ldd	r24, Z+2	; 0x02
 834:	93 81       	ldd	r25, Z+3	; 0x03
 836:	0c 5f       	subi	r16, 0xFC	; 252
 838:	1f 4f       	sbci	r17, 0xFF	; 255
 83a:	08 c0       	rjmp	.+16     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 83c:	60 81       	ld	r22, Z
 83e:	71 81       	ldd	r23, Z+1	; 0x01
 840:	07 2e       	mov	r0, r23
 842:	00 0c       	add	r0, r0
 844:	88 0b       	sbc	r24, r24
 846:	99 0b       	sbc	r25, r25
 848:	0e 5f       	subi	r16, 0xFE	; 254
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	f3 2d       	mov	r31, r3
 84e:	ff 76       	andi	r31, 0x6F	; 111
 850:	3f 2e       	mov	r3, r31
 852:	97 ff       	sbrs	r25, 7
 854:	09 c0       	rjmp	.+18     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 856:	90 95       	com	r25
 858:	80 95       	com	r24
 85a:	70 95       	com	r23
 85c:	61 95       	neg	r22
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	f0 68       	ori	r31, 0x80	; 128
 866:	3f 2e       	mov	r3, r31
 868:	2a e0       	ldi	r18, 0x0A	; 10
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	a3 01       	movw	r20, r6
 86e:	0e 94 5e 05 	call	0xabc	; 0xabc <__ultoa_invert>
 872:	88 2e       	mov	r8, r24
 874:	86 18       	sub	r8, r6
 876:	45 c0       	rjmp	.+138    	; 0x902 <__stack+0x3>
 878:	85 37       	cpi	r24, 0x75	; 117
 87a:	31 f4       	brne	.+12     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 87c:	23 2d       	mov	r18, r3
 87e:	2f 7e       	andi	r18, 0xEF	; 239
 880:	b2 2e       	mov	r11, r18
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	25 c0       	rjmp	.+74     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 888:	93 2d       	mov	r25, r3
 88a:	99 7f       	andi	r25, 0xF9	; 249
 88c:	b9 2e       	mov	r11, r25
 88e:	8f 36       	cpi	r24, 0x6F	; 111
 890:	c1 f0       	breq	.+48     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 892:	18 f4       	brcc	.+6      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 894:	88 35       	cpi	r24, 0x58	; 88
 896:	79 f0       	breq	.+30     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 898:	b5 c0       	rjmp	.+362    	; 0xa04 <__stack+0x105>
 89a:	80 37       	cpi	r24, 0x70	; 112
 89c:	19 f0       	breq	.+6      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 89e:	88 37       	cpi	r24, 0x78	; 120
 8a0:	21 f0       	breq	.+8      	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 8a2:	b0 c0       	rjmp	.+352    	; 0xa04 <__stack+0x105>
 8a4:	e9 2f       	mov	r30, r25
 8a6:	e0 61       	ori	r30, 0x10	; 16
 8a8:	be 2e       	mov	r11, r30
 8aa:	b4 fe       	sbrs	r11, 4
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8ae:	fb 2d       	mov	r31, r11
 8b0:	f4 60       	ori	r31, 0x04	; 4
 8b2:	bf 2e       	mov	r11, r31
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8b6:	34 fe       	sbrs	r3, 4
 8b8:	0a c0       	rjmp	.+20     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8ba:	29 2f       	mov	r18, r25
 8bc:	26 60       	ori	r18, 0x06	; 6
 8be:	b2 2e       	mov	r11, r18
 8c0:	06 c0       	rjmp	.+12     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8c2:	28 e0       	ldi	r18, 0x08	; 8
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8c8:	20 e1       	ldi	r18, 0x10	; 16
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8ce:	20 e1       	ldi	r18, 0x10	; 16
 8d0:	32 e0       	ldi	r19, 0x02	; 2
 8d2:	f8 01       	movw	r30, r16
 8d4:	b7 fe       	sbrs	r11, 7
 8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8d8:	60 81       	ld	r22, Z
 8da:	71 81       	ldd	r23, Z+1	; 0x01
 8dc:	82 81       	ldd	r24, Z+2	; 0x02
 8de:	93 81       	ldd	r25, Z+3	; 0x03
 8e0:	0c 5f       	subi	r16, 0xFC	; 252
 8e2:	1f 4f       	sbci	r17, 0xFF	; 255
 8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 5f       	subi	r16, 0xFE	; 254
 8f0:	1f 4f       	sbci	r17, 0xFF	; 255
 8f2:	a3 01       	movw	r20, r6
 8f4:	0e 94 5e 05 	call	0xabc	; 0xabc <__ultoa_invert>
 8f8:	88 2e       	mov	r8, r24
 8fa:	86 18       	sub	r8, r6
 8fc:	fb 2d       	mov	r31, r11
 8fe:	ff 77       	andi	r31, 0x7F	; 127
 900:	3f 2e       	mov	r3, r31
 902:	36 fe       	sbrs	r3, 6
 904:	0d c0       	rjmp	.+26     	; 0x920 <__stack+0x21>
 906:	23 2d       	mov	r18, r3
 908:	2e 7f       	andi	r18, 0xFE	; 254
 90a:	a2 2e       	mov	r10, r18
 90c:	89 14       	cp	r8, r9
 90e:	58 f4       	brcc	.+22     	; 0x926 <__stack+0x27>
 910:	34 fe       	sbrs	r3, 4
 912:	0b c0       	rjmp	.+22     	; 0x92a <__stack+0x2b>
 914:	32 fc       	sbrc	r3, 2
 916:	09 c0       	rjmp	.+18     	; 0x92a <__stack+0x2b>
 918:	83 2d       	mov	r24, r3
 91a:	8e 7e       	andi	r24, 0xEE	; 238
 91c:	a8 2e       	mov	r10, r24
 91e:	05 c0       	rjmp	.+10     	; 0x92a <__stack+0x2b>
 920:	b8 2c       	mov	r11, r8
 922:	a3 2c       	mov	r10, r3
 924:	03 c0       	rjmp	.+6      	; 0x92c <__stack+0x2d>
 926:	b8 2c       	mov	r11, r8
 928:	01 c0       	rjmp	.+2      	; 0x92c <__stack+0x2d>
 92a:	b9 2c       	mov	r11, r9
 92c:	a4 fe       	sbrs	r10, 4
 92e:	0f c0       	rjmp	.+30     	; 0x94e <__stack+0x4f>
 930:	fe 01       	movw	r30, r28
 932:	e8 0d       	add	r30, r8
 934:	f1 1d       	adc	r31, r1
 936:	80 81       	ld	r24, Z
 938:	80 33       	cpi	r24, 0x30	; 48
 93a:	21 f4       	brne	.+8      	; 0x944 <__stack+0x45>
 93c:	9a 2d       	mov	r25, r10
 93e:	99 7e       	andi	r25, 0xE9	; 233
 940:	a9 2e       	mov	r10, r25
 942:	09 c0       	rjmp	.+18     	; 0x956 <__stack+0x57>
 944:	a2 fe       	sbrs	r10, 2
 946:	06 c0       	rjmp	.+12     	; 0x954 <__stack+0x55>
 948:	b3 94       	inc	r11
 94a:	b3 94       	inc	r11
 94c:	04 c0       	rjmp	.+8      	; 0x956 <__stack+0x57>
 94e:	8a 2d       	mov	r24, r10
 950:	86 78       	andi	r24, 0x86	; 134
 952:	09 f0       	breq	.+2      	; 0x956 <__stack+0x57>
 954:	b3 94       	inc	r11
 956:	a3 fc       	sbrc	r10, 3
 958:	11 c0       	rjmp	.+34     	; 0x97c <__stack+0x7d>
 95a:	a0 fe       	sbrs	r10, 0
 95c:	06 c0       	rjmp	.+12     	; 0x96a <__stack+0x6b>
 95e:	b2 14       	cp	r11, r2
 960:	88 f4       	brcc	.+34     	; 0x984 <__stack+0x85>
 962:	28 0c       	add	r2, r8
 964:	92 2c       	mov	r9, r2
 966:	9b 18       	sub	r9, r11
 968:	0e c0       	rjmp	.+28     	; 0x986 <__stack+0x87>
 96a:	b2 14       	cp	r11, r2
 96c:	60 f4       	brcc	.+24     	; 0x986 <__stack+0x87>
 96e:	b6 01       	movw	r22, r12
 970:	80 e2       	ldi	r24, 0x20	; 32
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
 978:	b3 94       	inc	r11
 97a:	f7 cf       	rjmp	.-18     	; 0x96a <__stack+0x6b>
 97c:	b2 14       	cp	r11, r2
 97e:	18 f4       	brcc	.+6      	; 0x986 <__stack+0x87>
 980:	2b 18       	sub	r2, r11
 982:	02 c0       	rjmp	.+4      	; 0x988 <__stack+0x89>
 984:	98 2c       	mov	r9, r8
 986:	21 2c       	mov	r2, r1
 988:	a4 fe       	sbrs	r10, 4
 98a:	10 c0       	rjmp	.+32     	; 0x9ac <__stack+0xad>
 98c:	b6 01       	movw	r22, r12
 98e:	80 e3       	ldi	r24, 0x30	; 48
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
 996:	a2 fe       	sbrs	r10, 2
 998:	17 c0       	rjmp	.+46     	; 0x9c8 <__stack+0xc9>
 99a:	a1 fc       	sbrc	r10, 1
 99c:	03 c0       	rjmp	.+6      	; 0x9a4 <__stack+0xa5>
 99e:	88 e7       	ldi	r24, 0x78	; 120
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <__stack+0xa9>
 9a4:	88 e5       	ldi	r24, 0x58	; 88
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	b6 01       	movw	r22, r12
 9aa:	0c c0       	rjmp	.+24     	; 0x9c4 <__stack+0xc5>
 9ac:	8a 2d       	mov	r24, r10
 9ae:	86 78       	andi	r24, 0x86	; 134
 9b0:	59 f0       	breq	.+22     	; 0x9c8 <__stack+0xc9>
 9b2:	a1 fe       	sbrs	r10, 1
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__stack+0xbb>
 9b6:	8b e2       	ldi	r24, 0x2B	; 43
 9b8:	01 c0       	rjmp	.+2      	; 0x9bc <__stack+0xbd>
 9ba:	80 e2       	ldi	r24, 0x20	; 32
 9bc:	a7 fc       	sbrc	r10, 7
 9be:	8d e2       	ldi	r24, 0x2D	; 45
 9c0:	b6 01       	movw	r22, r12
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
 9c8:	89 14       	cp	r8, r9
 9ca:	38 f4       	brcc	.+14     	; 0x9da <__stack+0xdb>
 9cc:	b6 01       	movw	r22, r12
 9ce:	80 e3       	ldi	r24, 0x30	; 48
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
 9d6:	9a 94       	dec	r9
 9d8:	f7 cf       	rjmp	.-18     	; 0x9c8 <__stack+0xc9>
 9da:	8a 94       	dec	r8
 9dc:	f3 01       	movw	r30, r6
 9de:	e8 0d       	add	r30, r8
 9e0:	f1 1d       	adc	r31, r1
 9e2:	80 81       	ld	r24, Z
 9e4:	b6 01       	movw	r22, r12
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
 9ec:	81 10       	cpse	r8, r1
 9ee:	f5 cf       	rjmp	.-22     	; 0x9da <__stack+0xdb>
 9f0:	22 20       	and	r2, r2
 9f2:	09 f4       	brne	.+2      	; 0x9f6 <__stack+0xf7>
 9f4:	42 ce       	rjmp	.-892    	; 0x67a <vfprintf+0x24>
 9f6:	b6 01       	movw	r22, r12
 9f8:	80 e2       	ldi	r24, 0x20	; 32
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 22 05 	call	0xa44	; 0xa44 <fputc>
 a00:	2a 94       	dec	r2
 a02:	f6 cf       	rjmp	.-20     	; 0x9f0 <__stack+0xf1>
 a04:	f6 01       	movw	r30, r12
 a06:	86 81       	ldd	r24, Z+6	; 0x06
 a08:	97 81       	ldd	r25, Z+7	; 0x07
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__stack+0x111>
 a0c:	8f ef       	ldi	r24, 0xFF	; 255
 a0e:	9f ef       	ldi	r25, 0xFF	; 255
 a10:	2b 96       	adiw	r28, 0x0b	; 11
 a12:	e2 e1       	ldi	r30, 0x12	; 18
 a14:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__epilogue_restores__>

00000a18 <strnlen_P>:
 a18:	fc 01       	movw	r30, r24
 a1a:	05 90       	lpm	r0, Z+
 a1c:	61 50       	subi	r22, 0x01	; 1
 a1e:	70 40       	sbci	r23, 0x00	; 0
 a20:	01 10       	cpse	r0, r1
 a22:	d8 f7       	brcc	.-10     	; 0xa1a <strnlen_P+0x2>
 a24:	80 95       	com	r24
 a26:	90 95       	com	r25
 a28:	8e 0f       	add	r24, r30
 a2a:	9f 1f       	adc	r25, r31
 a2c:	08 95       	ret

00000a2e <strnlen>:
 a2e:	fc 01       	movw	r30, r24
 a30:	61 50       	subi	r22, 0x01	; 1
 a32:	70 40       	sbci	r23, 0x00	; 0
 a34:	01 90       	ld	r0, Z+
 a36:	01 10       	cpse	r0, r1
 a38:	d8 f7       	brcc	.-10     	; 0xa30 <strnlen+0x2>
 a3a:	80 95       	com	r24
 a3c:	90 95       	com	r25
 a3e:	8e 0f       	add	r24, r30
 a40:	9f 1f       	adc	r25, r31
 a42:	08 95       	ret

00000a44 <fputc>:
 a44:	0f 93       	push	r16
 a46:	1f 93       	push	r17
 a48:	cf 93       	push	r28
 a4a:	df 93       	push	r29
 a4c:	fb 01       	movw	r30, r22
 a4e:	23 81       	ldd	r18, Z+3	; 0x03
 a50:	21 fd       	sbrc	r18, 1
 a52:	03 c0       	rjmp	.+6      	; 0xa5a <fputc+0x16>
 a54:	8f ef       	ldi	r24, 0xFF	; 255
 a56:	9f ef       	ldi	r25, 0xFF	; 255
 a58:	2c c0       	rjmp	.+88     	; 0xab2 <fputc+0x6e>
 a5a:	22 ff       	sbrs	r18, 2
 a5c:	16 c0       	rjmp	.+44     	; 0xa8a <fputc+0x46>
 a5e:	46 81       	ldd	r20, Z+6	; 0x06
 a60:	57 81       	ldd	r21, Z+7	; 0x07
 a62:	24 81       	ldd	r18, Z+4	; 0x04
 a64:	35 81       	ldd	r19, Z+5	; 0x05
 a66:	42 17       	cp	r20, r18
 a68:	53 07       	cpc	r21, r19
 a6a:	44 f4       	brge	.+16     	; 0xa7c <fputc+0x38>
 a6c:	a0 81       	ld	r26, Z
 a6e:	b1 81       	ldd	r27, Z+1	; 0x01
 a70:	9d 01       	movw	r18, r26
 a72:	2f 5f       	subi	r18, 0xFF	; 255
 a74:	3f 4f       	sbci	r19, 0xFF	; 255
 a76:	31 83       	std	Z+1, r19	; 0x01
 a78:	20 83       	st	Z, r18
 a7a:	8c 93       	st	X, r24
 a7c:	26 81       	ldd	r18, Z+6	; 0x06
 a7e:	37 81       	ldd	r19, Z+7	; 0x07
 a80:	2f 5f       	subi	r18, 0xFF	; 255
 a82:	3f 4f       	sbci	r19, 0xFF	; 255
 a84:	37 83       	std	Z+7, r19	; 0x07
 a86:	26 83       	std	Z+6, r18	; 0x06
 a88:	14 c0       	rjmp	.+40     	; 0xab2 <fputc+0x6e>
 a8a:	8b 01       	movw	r16, r22
 a8c:	ec 01       	movw	r28, r24
 a8e:	fb 01       	movw	r30, r22
 a90:	00 84       	ldd	r0, Z+8	; 0x08
 a92:	f1 85       	ldd	r31, Z+9	; 0x09
 a94:	e0 2d       	mov	r30, r0
 a96:	09 95       	icall
 a98:	89 2b       	or	r24, r25
 a9a:	e1 f6       	brne	.-72     	; 0xa54 <fputc+0x10>
 a9c:	d8 01       	movw	r26, r16
 a9e:	16 96       	adiw	r26, 0x06	; 6
 aa0:	8d 91       	ld	r24, X+
 aa2:	9c 91       	ld	r25, X
 aa4:	17 97       	sbiw	r26, 0x07	; 7
 aa6:	01 96       	adiw	r24, 0x01	; 1
 aa8:	17 96       	adiw	r26, 0x07	; 7
 aaa:	9c 93       	st	X, r25
 aac:	8e 93       	st	-X, r24
 aae:	16 97       	sbiw	r26, 0x06	; 6
 ab0:	ce 01       	movw	r24, r28
 ab2:	df 91       	pop	r29
 ab4:	cf 91       	pop	r28
 ab6:	1f 91       	pop	r17
 ab8:	0f 91       	pop	r16
 aba:	08 95       	ret

00000abc <__ultoa_invert>:
 abc:	fa 01       	movw	r30, r20
 abe:	aa 27       	eor	r26, r26
 ac0:	28 30       	cpi	r18, 0x08	; 8
 ac2:	51 f1       	breq	.+84     	; 0xb18 <__ultoa_invert+0x5c>
 ac4:	20 31       	cpi	r18, 0x10	; 16
 ac6:	81 f1       	breq	.+96     	; 0xb28 <__ultoa_invert+0x6c>
 ac8:	e8 94       	clt
 aca:	6f 93       	push	r22
 acc:	6e 7f       	andi	r22, 0xFE	; 254
 ace:	6e 5f       	subi	r22, 0xFE	; 254
 ad0:	7f 4f       	sbci	r23, 0xFF	; 255
 ad2:	8f 4f       	sbci	r24, 0xFF	; 255
 ad4:	9f 4f       	sbci	r25, 0xFF	; 255
 ad6:	af 4f       	sbci	r26, 0xFF	; 255
 ad8:	b1 e0       	ldi	r27, 0x01	; 1
 ada:	3e d0       	rcall	.+124    	; 0xb58 <__ultoa_invert+0x9c>
 adc:	b4 e0       	ldi	r27, 0x04	; 4
 ade:	3c d0       	rcall	.+120    	; 0xb58 <__ultoa_invert+0x9c>
 ae0:	67 0f       	add	r22, r23
 ae2:	78 1f       	adc	r23, r24
 ae4:	89 1f       	adc	r24, r25
 ae6:	9a 1f       	adc	r25, r26
 ae8:	a1 1d       	adc	r26, r1
 aea:	68 0f       	add	r22, r24
 aec:	79 1f       	adc	r23, r25
 aee:	8a 1f       	adc	r24, r26
 af0:	91 1d       	adc	r25, r1
 af2:	a1 1d       	adc	r26, r1
 af4:	6a 0f       	add	r22, r26
 af6:	71 1d       	adc	r23, r1
 af8:	81 1d       	adc	r24, r1
 afa:	91 1d       	adc	r25, r1
 afc:	a1 1d       	adc	r26, r1
 afe:	20 d0       	rcall	.+64     	; 0xb40 <__ultoa_invert+0x84>
 b00:	09 f4       	brne	.+2      	; 0xb04 <__ultoa_invert+0x48>
 b02:	68 94       	set
 b04:	3f 91       	pop	r19
 b06:	2a e0       	ldi	r18, 0x0A	; 10
 b08:	26 9f       	mul	r18, r22
 b0a:	11 24       	eor	r1, r1
 b0c:	30 19       	sub	r19, r0
 b0e:	30 5d       	subi	r19, 0xD0	; 208
 b10:	31 93       	st	Z+, r19
 b12:	de f6       	brtc	.-74     	; 0xaca <__ultoa_invert+0xe>
 b14:	cf 01       	movw	r24, r30
 b16:	08 95       	ret
 b18:	46 2f       	mov	r20, r22
 b1a:	47 70       	andi	r20, 0x07	; 7
 b1c:	40 5d       	subi	r20, 0xD0	; 208
 b1e:	41 93       	st	Z+, r20
 b20:	b3 e0       	ldi	r27, 0x03	; 3
 b22:	0f d0       	rcall	.+30     	; 0xb42 <__ultoa_invert+0x86>
 b24:	c9 f7       	brne	.-14     	; 0xb18 <__ultoa_invert+0x5c>
 b26:	f6 cf       	rjmp	.-20     	; 0xb14 <__ultoa_invert+0x58>
 b28:	46 2f       	mov	r20, r22
 b2a:	4f 70       	andi	r20, 0x0F	; 15
 b2c:	40 5d       	subi	r20, 0xD0	; 208
 b2e:	4a 33       	cpi	r20, 0x3A	; 58
 b30:	18 f0       	brcs	.+6      	; 0xb38 <__ultoa_invert+0x7c>
 b32:	49 5d       	subi	r20, 0xD9	; 217
 b34:	31 fd       	sbrc	r19, 1
 b36:	40 52       	subi	r20, 0x20	; 32
 b38:	41 93       	st	Z+, r20
 b3a:	02 d0       	rcall	.+4      	; 0xb40 <__ultoa_invert+0x84>
 b3c:	a9 f7       	brne	.-22     	; 0xb28 <__ultoa_invert+0x6c>
 b3e:	ea cf       	rjmp	.-44     	; 0xb14 <__ultoa_invert+0x58>
 b40:	b4 e0       	ldi	r27, 0x04	; 4
 b42:	a6 95       	lsr	r26
 b44:	97 95       	ror	r25
 b46:	87 95       	ror	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	ba 95       	dec	r27
 b4e:	c9 f7       	brne	.-14     	; 0xb42 <__ultoa_invert+0x86>
 b50:	00 97       	sbiw	r24, 0x00	; 0
 b52:	61 05       	cpc	r22, r1
 b54:	71 05       	cpc	r23, r1
 b56:	08 95       	ret
 b58:	9b 01       	movw	r18, r22
 b5a:	ac 01       	movw	r20, r24
 b5c:	0a 2e       	mov	r0, r26
 b5e:	06 94       	lsr	r0
 b60:	57 95       	ror	r21
 b62:	47 95       	ror	r20
 b64:	37 95       	ror	r19
 b66:	27 95       	ror	r18
 b68:	ba 95       	dec	r27
 b6a:	c9 f7       	brne	.-14     	; 0xb5e <__ultoa_invert+0xa2>
 b6c:	62 0f       	add	r22, r18
 b6e:	73 1f       	adc	r23, r19
 b70:	84 1f       	adc	r24, r20
 b72:	95 1f       	adc	r25, r21
 b74:	a0 1d       	adc	r26, r0
 b76:	08 95       	ret

00000b78 <__prologue_saves__>:
 b78:	2f 92       	push	r2
 b7a:	3f 92       	push	r3
 b7c:	4f 92       	push	r4
 b7e:	5f 92       	push	r5
 b80:	6f 92       	push	r6
 b82:	7f 92       	push	r7
 b84:	8f 92       	push	r8
 b86:	9f 92       	push	r9
 b88:	af 92       	push	r10
 b8a:	bf 92       	push	r11
 b8c:	cf 92       	push	r12
 b8e:	df 92       	push	r13
 b90:	ef 92       	push	r14
 b92:	ff 92       	push	r15
 b94:	0f 93       	push	r16
 b96:	1f 93       	push	r17
 b98:	cf 93       	push	r28
 b9a:	df 93       	push	r29
 b9c:	cd b7       	in	r28, 0x3d	; 61
 b9e:	de b7       	in	r29, 0x3e	; 62
 ba0:	ca 1b       	sub	r28, r26
 ba2:	db 0b       	sbc	r29, r27
 ba4:	0f b6       	in	r0, 0x3f	; 63
 ba6:	f8 94       	cli
 ba8:	de bf       	out	0x3e, r29	; 62
 baa:	0f be       	out	0x3f, r0	; 63
 bac:	cd bf       	out	0x3d, r28	; 61
 bae:	09 94       	ijmp

00000bb0 <__epilogue_restores__>:
 bb0:	2a 88       	ldd	r2, Y+18	; 0x12
 bb2:	39 88       	ldd	r3, Y+17	; 0x11
 bb4:	48 88       	ldd	r4, Y+16	; 0x10
 bb6:	5f 84       	ldd	r5, Y+15	; 0x0f
 bb8:	6e 84       	ldd	r6, Y+14	; 0x0e
 bba:	7d 84       	ldd	r7, Y+13	; 0x0d
 bbc:	8c 84       	ldd	r8, Y+12	; 0x0c
 bbe:	9b 84       	ldd	r9, Y+11	; 0x0b
 bc0:	aa 84       	ldd	r10, Y+10	; 0x0a
 bc2:	b9 84       	ldd	r11, Y+9	; 0x09
 bc4:	c8 84       	ldd	r12, Y+8	; 0x08
 bc6:	df 80       	ldd	r13, Y+7	; 0x07
 bc8:	ee 80       	ldd	r14, Y+6	; 0x06
 bca:	fd 80       	ldd	r15, Y+5	; 0x05
 bcc:	0c 81       	ldd	r16, Y+4	; 0x04
 bce:	1b 81       	ldd	r17, Y+3	; 0x03
 bd0:	aa 81       	ldd	r26, Y+2	; 0x02
 bd2:	b9 81       	ldd	r27, Y+1	; 0x01
 bd4:	ce 0f       	add	r28, r30
 bd6:	d1 1d       	adc	r29, r1
 bd8:	0f b6       	in	r0, 0x3f	; 63
 bda:	f8 94       	cli
 bdc:	de bf       	out	0x3e, r29	; 62
 bde:	0f be       	out	0x3f, r0	; 63
 be0:	cd bf       	out	0x3d, r28	; 61
 be2:	ed 01       	movw	r28, r26
 be4:	08 95       	ret

00000be6 <_exit>:
 be6:	f8 94       	cli

00000be8 <__stop_program>:
 be8:	ff cf       	rjmp	.-2      	; 0xbe8 <__stop_program>
