
AVRADV1_RGBLEDLibrary.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c9c  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f6  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000483  00000000  00000000  000019a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e6  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022e  00000000  00000000  0000237a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  ac:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  b0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  b4:	e5 00       	.word	0x00e5	; ????
  b6:	e7 00       	.word	0x00e7	; ????
  b8:	e9 00       	.word	0x00e9	; ????
  ba:	eb 00       	.word	0x00eb	; ????
  bc:	ee 00       	.word	0x00ee	; ????
  be:	f1 00       	.word	0x00f1	; ????
  c0:	f4 00       	.word	0x00f4	; ????

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61
  ce:	0e 94 6d 00 	call	0xda	; 0xda <main>
  d2:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <main>:
#include <util/delay.h>
#define bekleme 500

int main(void)
{
    led_init();
  da:	0e 94 d6 00 	call	0x1ac	; 0x1ac <led_init>
		led_yak(KIRMIZI);
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <led_yak>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	89 e6       	ldi	r24, 0x69	; 105
  ea:	98 e1       	ldi	r25, 0x18	; 24
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x12>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x1c>
  f6:	00 00       	nop
		_delay_ms(bekleme);
		led_yak(YESIL);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <led_yak>
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	89 e6       	ldi	r24, 0x69	; 105
 104:	98 e1       	ldi	r25, 0x18	; 24
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x2c>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x36>
 110:	00 00       	nop
		_delay_ms(bekleme);
		led_yak(MAVI);
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 da 00 	call	0x1b4	; 0x1b4 <led_yak>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	89 e6       	ldi	r24, 0x69	; 105
 11e:	98 e1       	ldi	r25, 0x18	; 24
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x46>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x50>
 12a:	00 00       	nop
		_delay_ms(bekleme);
		led_yak(BEYAZ);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 da 00 	call	0x1b4	; 0x1b4 <led_yak>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	89 e6       	ldi	r24, 0x69	; 105
 138:	98 e1       	ldi	r25, 0x18	; 24
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x60>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x6a>
 144:	00 00       	nop
		_delay_ms(bekleme);
	DDRC &= ~((1<<PORTC2) | (1<<PORTC3));
 146:	87 b1       	in	r24, 0x07	; 7
 148:	83 7f       	andi	r24, 0xF3	; 243
 14a:	87 b9       	out	0x07, r24	; 7
	PORTC |= ((1<<PORTC2) | (1<<PORTC3));
 14c:	88 b1       	in	r24, 0x08	; 8
 14e:	8c 60       	ori	r24, 0x0C	; 12
 150:	88 b9       	out	0x08, r24	; 8
	int renk = 0;
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	06 e0       	ldi	r16, 0x06	; 6
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	e1 2c       	mov	r14, r1
 15c:	f1 2c       	mov	r15, r1
    while (1) 
    {
		if (!(PINC & (1<<PORTC2)))
 15e:	32 99       	sbic	0x06, 2	; 6
 160:	12 c0       	rjmp	.+36     	; 0x186 <main+0xac>
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	83 ec       	ldi	r24, 0xC3	; 195
 166:	99 e0       	ldi	r25, 0x09	; 9
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x8e>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x98>
 172:	00 00       	nop
 174:	21 96       	adiw	r28, 0x01	; 1
 176:	c7 30       	cpi	r28, 0x07	; 7
 178:	d1 05       	cpc	r29, r1
 17a:	14 f0       	brlt	.+4      	; 0x180 <main+0xa6>
 17c:	c0 2f       	mov	r28, r16
 17e:	d1 2f       	mov	r29, r17
		{
			_delay_ms(200);
			renk++;
			if (renk>6)
		    renk = 6;
			led_yak(renk);
 180:	ce 01       	movw	r24, r28
 182:	0e 94 da 00 	call	0x1b4	; 0x1b4 <led_yak>
		}
		if (!(PINC & (1<<PORTC3)))
 186:	33 99       	sbic	0x06, 3	; 6
 188:	ea cf       	rjmp	.-44     	; 0x15e <main+0x84>
 18a:	9f ef       	ldi	r25, 0xFF	; 255
 18c:	23 ec       	ldi	r18, 0xC3	; 195
 18e:	89 e0       	ldi	r24, 0x09	; 9
 190:	91 50       	subi	r25, 0x01	; 1
 192:	20 40       	sbci	r18, 0x00	; 0
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0xb6>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0xc0>
 19a:	00 00       	nop
 19c:	21 97       	sbiw	r28, 0x01	; 1
 19e:	12 f4       	brpl	.+4      	; 0x1a4 <main+0xca>
 1a0:	ce 2d       	mov	r28, r14
 1a2:	df 2d       	mov	r29, r15
		{
			_delay_ms(200);
			renk--;
			if (renk < 0)
			renk = 0;
			led_yak(renk);
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <led_yak>
 1aa:	d9 cf       	rjmp	.-78     	; 0x15e <main+0x84>

000001ac <led_init>:
 */ 
#include "rgbled.h"

extern void led_init()
{
	RGBDATADIRECTION |= ((1<<KIRMIZIPIN) | (1<<YESILPIN) | (1<<MAVIPIN));
 1ac:	8d b1       	in	r24, 0x0d	; 13
 1ae:	87 60       	ori	r24, 0x07	; 7
 1b0:	8d b9       	out	0x0d, r24	; 13
 1b2:	08 95       	ret

000001b4 <led_yak>:
}

extern void led_yak(int renk)
{
	RGBPORT &= ~((1<<KIRMIZIPIN) | (1<<YESILPIN) | (1<<MAVIPIN));
 1b4:	2e b1       	in	r18, 0x0e	; 14
 1b6:	28 7f       	andi	r18, 0xF8	; 248
 1b8:	2e b9       	out	0x0e, r18	; 14
	switch (renk)
 1ba:	87 30       	cpi	r24, 0x07	; 7
 1bc:	91 05       	cpc	r25, r1
 1be:	b8 f4       	brcc	.+46     	; 0x1ee <led_yak+0x3a>
 1c0:	fc 01       	movw	r30, r24
 1c2:	e6 5a       	subi	r30, 0xA6	; 166
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__tablejump2__>
	{
		case KIRMIZI:
		RGBPORT |= (1<<KIRMIZIPIN);
 1ca:	70 9a       	sbi	0x0e, 0	; 14
		break;
 1cc:	08 95       	ret
		case YESIL:
		RGBPORT |= (1<<YESILPIN);
 1ce:	71 9a       	sbi	0x0e, 1	; 14
		break;
 1d0:	08 95       	ret
		case MAVI: 
		RGBPORT |= (1<<MAVIPIN);
 1d2:	72 9a       	sbi	0x0e, 2	; 14
		break;
 1d4:	08 95       	ret
		case CAMGOBEGI: 
		RGBPORT |= (1<<MAVIPIN);
 1d6:	72 9a       	sbi	0x0e, 2	; 14
		RGBPORT |= (1<<YESILPIN);
 1d8:	71 9a       	sbi	0x0e, 1	; 14
		break;
 1da:	08 95       	ret
		case SARI:
		RGBPORT |= (1<<KIRMIZIPIN);
 1dc:	70 9a       	sbi	0x0e, 0	; 14
		RGBPORT |= (1<<YESILPIN);
 1de:	71 9a       	sbi	0x0e, 1	; 14
		break;
 1e0:	08 95       	ret
		case MOR: 
		RGBPORT |= (1<<KIRMIZIPIN);
 1e2:	70 9a       	sbi	0x0e, 0	; 14
		RGBPORT |= (1<<MAVIPIN);
 1e4:	72 9a       	sbi	0x0e, 2	; 14
		break;
 1e6:	08 95       	ret
		case BEYAZ: 
		RGBPORT |= (1<<KIRMIZIPIN);
 1e8:	70 9a       	sbi	0x0e, 0	; 14
		RGBPORT |= (1<<MAVIPIN);
 1ea:	72 9a       	sbi	0x0e, 2	; 14
		RGBPORT |= (1<<YESILPIN);
 1ec:	71 9a       	sbi	0x0e, 1	; 14
 1ee:	08 95       	ret

000001f0 <__tablejump2__>:
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	05 90       	lpm	r0, Z+
 1f6:	f4 91       	lpm	r31, Z
 1f8:	e0 2d       	mov	r30, r0
 1fa:	09 94       	ijmp

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
