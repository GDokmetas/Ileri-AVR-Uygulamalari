
AVRI2CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000032a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  000003cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126c  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bac  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000676  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  0000298c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000666  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000664  00000000  00000000  00003156  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000037ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e2       	ldi	r30, 0x2A	; 42
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 30       	cpi	r26, 0x0E	; 14
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae e0       	ldi	r26, 0x0E	; 14
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 30       	cpi	r26, 0x0F	; 15
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 82 01 	call	0x304	; 0x304 <main>
  ea:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_init>:
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  f8:	08 95       	ret

000000fa <i2c_start_condition>:
  fa:	84 ea       	ldi	r24, 0xA4	; 164
  fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 100:	ec eb       	ldi	r30, 0xBC	; 188
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 23       	and	r24, r24
 108:	ec f7       	brge	.-6      	; 0x104 <i2c_start_condition+0xa>
 10a:	08 95       	ret

0000010c <i2c_send_byte>:
 10c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 110:	84 e8       	ldi	r24, 0x84	; 132
 112:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 116:	ec eb       	ldi	r30, 0xBC	; 188
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 23       	and	r24, r24
 11e:	ec f7       	brge	.-6      	; 0x11a <i2c_send_byte+0xe>
 120:	08 95       	ret

00000122 <i2c_send_packet>:
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	c8 2f       	mov	r28, r24
 128:	d6 2f       	mov	r29, r22
 12a:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start_condition>
 12e:	8d 2f       	mov	r24, r29
 130:	0e 94 86 00 	call	0x10c	; 0x10c <i2c_send_byte>
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 86 00 	call	0x10c	; 0x10c <i2c_send_byte>
 13a:	84 e9       	ldi	r24, 0x94	; 148
 13c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <putnibble>:
	uint8_t led_pin;
} lcd;


void putnibble(char t)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(lcd.led_pin |= 0x04, SLA_W);
 14a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 154:	6e e7       	ldi	r22, 0x7E	; 126
 156:	0e 94 91 00 	call	0x122	; 0x122 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	80 e1       	ldi	r24, 0x10	; 16
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <putnibble+0x16>
 160:	00 c0       	rjmp	.+0      	; 0x162 <putnibble+0x1c>
	_delay_us(50);
	i2c_send_packet(lcd.led_pin | t, SLA_W);
 162:	c2 95       	swap	r28
 164:	c0 7f       	andi	r28, 0xF0	; 240
 166:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 16a:	6e e7       	ldi	r22, 0x7E	; 126
 16c:	8c 2b       	or	r24, r28
 16e:	0e 94 91 00 	call	0x122	; 0x122 <i2c_send_packet>
	i2c_send_packet(lcd.led_pin &= ~0x04, SLA_W);
 172:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 176:	8b 7f       	andi	r24, 0xFB	; 251
 178:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 17c:	6e e7       	ldi	r22, 0x7E	; 126
 17e:	0e 94 91 00 	call	0x122	; 0x122 <i2c_send_packet>
 182:	80 e1       	ldi	r24, 0x10	; 16
 184:	8a 95       	dec	r24
 186:	f1 f7       	brne	.-4      	; 0x184 <putnibble+0x3e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <putnibble+0x44>
	_delay_us(50);
}
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd1602_send_byte>:

void lcd1602_send_byte(char c, char rs)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
 194:	d8 2f       	mov	r29, r24
 196:	d2 95       	swap	r29
 198:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
 19a:	61 11       	cpse	r22, r1
 19c:	09 c0       	rjmp	.+18     	; 0x1b0 <lcd1602_send_byte+0x22>
		i2c_send_packet(lcd.led_pin &=~ 0x01, SLA_W);
 19e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1a2:	8e 7f       	andi	r24, 0xFE	; 254
 1a4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1a8:	6e e7       	ldi	r22, 0x7E	; 126
 1aa:	0e 94 91 00 	call	0x122	; 0x122 <i2c_send_packet>
 1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <lcd1602_send_byte+0x32>
	else
		i2c_send_packet(lcd.led_pin |= 0x01, SLA_W);
 1b0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1ba:	6e e7       	ldi	r22, 0x7E	; 126
 1bc:	0e 94 91 00 	call	0x122	; 0x122 <i2c_send_packet>
	putnibble(highc);
 1c0:	8d 2f       	mov	r24, r29
 1c2:	0e 94 a3 00 	call	0x146	; 0x146 <putnibble>
	putnibble(c);
 1c6:	8c 2f       	mov	r24, r28
 1c8:	0e 94 a3 00 	call	0x146	; 0x146 <putnibble>
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <lcd1602_send_char>:

void lcd1602_send_char(char c)
{
 1d2:	cf 93       	push	r28
 1d4:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (lcd.led_pin |= 0x01, SLA_W);
 1d6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1e0:	6e e7       	ldi	r22, 0x7E	; 126
 1e2:	0e 94 91 00 	call	0x122	; 0x122 <i2c_send_packet>
	putnibble(highc);
 1e6:	8c 2f       	mov	r24, r28
 1e8:	82 95       	swap	r24
 1ea:	8f 70       	andi	r24, 0x0F	; 15
 1ec:	0e 94 a3 00 	call	0x146	; 0x146 <putnibble>
	putnibble(c);
 1f0:	8c 2f       	mov	r24, r28
 1f2:	0e 94 a3 00 	call	0x146	; 0x146 <putnibble>
}
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <lcd1602_init>:

void lcd1602_init()
{
	lcd.led_pin = 0;
 1fa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	i2c_init();
 1fe:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	85 ea       	ldi	r24, 0xA5	; 165
 204:	9e e0       	ldi	r25, 0x0E	; 14
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd1602_init+0xc>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lcd1602_init+0x12>
 20c:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	0e 94 a3 00 	call	0x146	; 0x146 <putnibble>
 214:	87 ee       	ldi	r24, 0xE7	; 231
 216:	93 e0       	ldi	r25, 0x03	; 3
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd1602_init+0x1e>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd1602_init+0x24>
 21e:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	0e 94 a3 00 	call	0x146	; 0x146 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	91 e2       	ldi	r25, 0x21	; 33
 228:	9a 95       	dec	r25
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd1602_init+0x2e>
 22c:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	0e 94 a3 00 	call	0x146	; 0x146 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	89 ef       	ldi	r24, 0xF9	; 249
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd1602_init+0x3e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd1602_init+0x44>
 23e:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	0e 94 a3 00 	call	0x146	; 0x146 <putnibble>
 246:	89 ef       	ldi	r24, 0xF9	; 249
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd1602_init+0x50>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd1602_init+0x56>
 250:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x28, LCD_COMMAND);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	88 e2       	ldi	r24, 0x28	; 40
 256:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd1602_send_byte>
 25a:	89 ef       	ldi	r24, 0xF9	; 249
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <lcd1602_init+0x64>
 262:	00 c0       	rjmp	.+0      	; 0x264 <lcd1602_init+0x6a>
 264:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x0C, LCD_COMMAND);
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	8c e0       	ldi	r24, 0x0C	; 12
 26a:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd1602_send_byte>
 26e:	89 ef       	ldi	r24, 0xF9	; 249
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd1602_init+0x78>
 276:	00 c0       	rjmp	.+0      	; 0x278 <lcd1602_init+0x7e>
 278:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x06, LCD_COMMAND);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd1602_send_byte>
 282:	89 ef       	ldi	r24, 0xF9	; 249
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <lcd1602_init+0x8c>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <lcd1602_init+0x92>
 28c:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(lcd.led_pin |= 0x08, SLA_W);
 28e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 292:	88 60       	ori	r24, 0x08	; 8
 294:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 298:	6e e7       	ldi	r22, 0x7E	; 126
 29a:	0e 94 91 00 	call	0x122	; 0x122 <i2c_send_packet>
	i2c_send_packet(lcd.led_pin &=~ 0x02, SLA_W);
 29e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2a2:	8d 7f       	andi	r24, 0xFD	; 253
 2a4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 2a8:	6e e7       	ldi	r22, 0x7E	; 126
 2aa:	0e 94 91 00 	call	0x122	; 0x122 <i2c_send_packet>
 2ae:	08 95       	ret

000002b0 <lcd1602_clear>:
}

void lcd1602_clear()
{
	lcd1602_send_byte(0x01, LCD_COMMAND);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd1602_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	86 e7       	ldi	r24, 0x76	; 118
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd1602_clear+0xc>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd1602_clear+0x12>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
 2c6:	90 e4       	ldi	r25, 0x40	; 64
 2c8:	69 9f       	mul	r22, r25
 2ca:	80 0d       	add	r24, r0
 2cc:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd1602_send_byte>
 2d6:	08 95       	ret

000002d8 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	fc 01       	movw	r30, r24
	uint8_t i;

	for(i = 0; str[i] != '\0'; i++)
 2e0:	80 81       	ld	r24, Z
 2e2:	88 23       	and	r24, r24
 2e4:	59 f0       	breq	.+22     	; 0x2fc <lcd1602_send_string+0x24>
 2e6:	8f 01       	movw	r16, r30
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
		lcd1602_send_char(str[i]);
 2ea:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd1602_send_char>

void lcd1602_send_string(const char *str)
{
	uint8_t i;

	for(i = 0; str[i] != '\0'; i++)
 2ee:	cf 5f       	subi	r28, 0xFF	; 255
 2f0:	f8 01       	movw	r30, r16
 2f2:	ec 0f       	add	r30, r28
 2f4:	f1 1d       	adc	r31, r1
 2f6:	80 81       	ld	r24, Z
 2f8:	81 11       	cpse	r24, r1
 2fa:	f7 cf       	rjmp	.-18     	; 0x2ea <lcd1602_send_string+0x12>
		lcd1602_send_char(str[i]);
}
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	08 95       	ret

00000304 <main>:
#define F_CPU 16000000UL
#include "lcd1602.h"

int main(void)
{
    lcd1602_init();
 304:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd1602_init>
	lcd1602_clear();
 308:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd1602_clear>
	lcd1602_send_string("MERHABA");
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd1602_send_string>
	lcd1602_goto_xy(0,1);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd1602_goto_xy>
	lcd1602_send_string("DUNYA");
 31c:	88 e0       	ldi	r24, 0x08	; 8
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd1602_send_string>
 324:	ff cf       	rjmp	.-2      	; 0x324 <main+0x20>

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
