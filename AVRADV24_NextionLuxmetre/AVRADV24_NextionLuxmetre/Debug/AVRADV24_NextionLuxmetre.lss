
AVRADV24_NextionLuxmetre.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000c1a  00000cae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080010c  0080010c  00000cba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed1  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095f  00000000  00000000  00001d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000836  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057c  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000650  00000000  00000000  0000360c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_18>
  4c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 35       	cpi	r26, 0x51	; 81
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  9e:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <bh1750_oku>:
		
    }
}

uint32_t bh1750_oku()
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	uint8_t bh1750_addr = (0x23 << 1);
	i2c_rep_start(bh1750_addr+I2C_WRITE);
  aa:	86 e4       	ldi	r24, 0x46	; 70
  ac:	0e 94 29 01 	call	0x252	; 0x252 <i2c_rep_start>
	i2c_write(0x10);
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	0e 94 35 01 	call	0x26a	; 0x26a <i2c_write>
	i2c_stop();
  b6:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f e3       	ldi	r24, 0x3F	; 63
  bc:	9c e9       	ldi	r25, 0x9C	; 156
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <bh1750_oku+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <bh1750_oku+0x1e>
  c4:	00 00       	nop
	_delay_ms(10);
	i2c_rep_start(bh1750_addr+I2C_WRITE);
  c6:	86 e4       	ldi	r24, 0x46	; 70
  c8:	0e 94 29 01 	call	0x252	; 0x252 <i2c_rep_start>
	i2c_write(0x10);
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	0e 94 35 01 	call	0x26a	; 0x26a <i2c_write>
	i2c_stop();
  d2:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_stop>
  d6:	9f ef       	ldi	r25, 0xFF	; 255
  d8:	23 ec       	ldi	r18, 0xC3	; 195
  da:	89 e0       	ldi	r24, 0x09	; 9
  dc:	91 50       	subi	r25, 0x01	; 1
  de:	20 40       	sbci	r18, 0x00	; 0
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <bh1750_oku+0x36>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <bh1750_oku+0x40>
  e6:	00 00       	nop
	_delay_ms(200);
	i2c_start_wait(bh1750_addr+I2C_READ);
  e8:	87 e4       	ldi	r24, 0x47	; 71
  ea:	0e 94 01 01 	call	0x202	; 0x202 <i2c_start_wait>
	uint16_t okuma = 0;
	okuma = i2c_readAck();
  ee:	0e 94 47 01 	call	0x28e	; 0x28e <i2c_readAck>
  f2:	c8 2f       	mov	r28, r24
  f4:	d0 e0       	ldi	r29, 0x00	; 0
	okuma <<= 8;
  f6:	dc 2f       	mov	r29, r28
  f8:	cc 27       	eor	r28, r28
	okuma |= i2c_readNak();
  fa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2c_readNak>
	float lux  = okuma / 1.2F;
	return (uint32_t)lux;
  fe:	be 01       	movw	r22, r28
 100:	68 2b       	or	r22, r24
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 93 02 	call	0x526	; 0x526 <__floatunsisf>
 10a:	2a e9       	ldi	r18, 0x9A	; 154
 10c:	39 e9       	ldi	r19, 0x99	; 153
 10e:	49 e9       	ldi	r20, 0x99	; 153
 110:	5f e3       	ldi	r21, 0x3F	; 63
 112:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__divsf3>
 116:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__fixunssfsi>
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <nextion_komut>:

void nextion_komut(char* komut)
{
	uart_puts(komut);
 120:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <uart_puts>
	uart_putc(0xFF);
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	0e 94 ce 01 	call	0x39c	; 0x39c <uart_putc>
	uart_putc(0xFF);
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	0e 94 ce 01 	call	0x39c	; 0x39c <uart_putc>
	uart_putc(0xFF);
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	0e 94 ce 01 	call	0x39c	; 0x39c <uart_putc>
 136:	08 95       	ret

00000138 <main>:
#include <stdio.h>
uint32_t bh1750_oku();
void nextion_komut(char* komut);

int main(void)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	64 97       	sbiw	r28, 0x14	; 20
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	de bf       	out	0x3e, r29	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	cd bf       	out	0x3d, r28	; 61
    i2c_init();
 14c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_init>
	sei();
 150:	78 94       	sei
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 152:	87 e6       	ldi	r24, 0x67	; 103
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 b5 01 	call	0x36a	; 0x36a <uart_init>
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	81 ee       	ldi	r24, 0xE1	; 225
 15e:	94 e0       	ldi	r25, 0x04	; 4
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x28>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x32>
 16a:	00 00       	nop
	char buf[20];
	uint32_t lux = 0;
    while (1) 
    {
		lux = bh1750_oku();
		sprintf(buf,"n0.val=%lu", lux);
 16c:	0f 2e       	mov	r0, r31
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	ef 2e       	mov	r14, r31
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	ff 2e       	mov	r15, r31
 176:	f0 2d       	mov	r31, r0
 178:	8e 01       	movw	r16, r28
 17a:	0f 5f       	subi	r16, 0xFF	; 255
 17c:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_ms(100);
	char buf[20];
	uint32_t lux = 0;
    while (1) 
    {
		lux = bh1750_oku();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <bh1750_oku>
		sprintf(buf,"n0.val=%lu", lux);
 182:	9f 93       	push	r25
 184:	8f 93       	push	r24
 186:	7f 93       	push	r23
 188:	6f 93       	push	r22
 18a:	ff 92       	push	r15
 18c:	ef 92       	push	r14
 18e:	1f 93       	push	r17
 190:	0f 93       	push	r16
 192:	0e 94 21 03 	call	0x642	; 0x642 <sprintf>
		nextion_komut(buf);
 196:	c8 01       	movw	r24, r16
 198:	0e 94 90 00 	call	0x120	; 0x120 <nextion_komut>
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	eb cf       	rjmp	.-42     	; 0x17e <main+0x46>

000001a8 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 1a8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 1ac:	88 e4       	ldi	r24, 0x48	; 72
 1ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 1b2:	08 95       	ret

000001b4 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 1b4:	94 ea       	ldi	r25, 0xA4	; 164
 1b6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 1ba:	ec eb       	ldi	r30, 0xBC	; 188
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	90 81       	ld	r25, Z
 1c0:	99 23       	and	r25, r25
 1c2:	ec f7       	brge	.-6      	; 0x1be <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 1c4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1c8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 1ca:	98 30       	cpi	r25, 0x08	; 8
 1cc:	11 f0       	breq	.+4      	; 0x1d2 <i2c_start+0x1e>
 1ce:	90 31       	cpi	r25, 0x10	; 16
 1d0:	a1 f4       	brne	.+40     	; 0x1fa <i2c_start+0x46>

	// send device address
	TWDR = address;
 1d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 1d6:	84 e8       	ldi	r24, 0x84	; 132
 1d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 1dc:	ec eb       	ldi	r30, 0xBC	; 188
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	88 23       	and	r24, r24
 1e4:	ec f7       	brge	.-6      	; 0x1e0 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 1e6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1ea:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 1ec:	98 31       	cpi	r25, 0x18	; 24
 1ee:	39 f0       	breq	.+14     	; 0x1fe <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 34       	cpi	r25, 0x40	; 64
 1f4:	29 f4       	brne	.+10     	; 0x200 <i2c_start+0x4c>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 1fe:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 200:	08 95       	ret

00000202 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 206:	ec eb       	ldi	r30, 0xBC	; 188
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 20c:	a9 eb       	ldi	r26, 0xB9	; 185
 20e:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
 210:	cb eb       	ldi	r28, 0xBB	; 187
 212:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 214:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 216:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 218:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 21a:	90 81       	ld	r25, Z
 21c:	99 23       	and	r25, r25
 21e:	ec f7       	brge	.-6      	; 0x21a <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 220:	9c 91       	ld	r25, X
 222:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 224:	98 30       	cpi	r25, 0x08	; 8
 226:	11 f0       	breq	.+4      	; 0x22c <i2c_start_wait+0x2a>
 228:	90 31       	cpi	r25, 0x10	; 16
 22a:	b1 f7       	brne	.-20     	; 0x218 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
 22c:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 22e:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 230:	90 81       	ld	r25, Z
 232:	99 23       	and	r25, r25
 234:	ec f7       	brge	.-6      	; 0x230 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 236:	9c 91       	ld	r25, X
 238:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 23a:	90 32       	cpi	r25, 0x20	; 32
 23c:	11 f0       	breq	.+4      	; 0x242 <i2c_start_wait+0x40>
 23e:	98 35       	cpi	r25, 0x58	; 88
 240:	29 f4       	brne	.+10     	; 0x24c <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 242:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 244:	90 81       	ld	r25, Z
 246:	94 fd       	sbrc	r25, 4
 248:	fd cf       	rjmp	.-6      	; 0x244 <i2c_start_wait+0x42>
 24a:	e6 cf       	rjmp	.-52     	; 0x218 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 252:	0e 94 da 00 	call	0x1b4	; 0x1b4 <i2c_start>

}/* i2c_rep_start */
 256:	08 95       	ret

00000258 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 258:	84 e9       	ldi	r24, 0x94	; 148
 25a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 25e:	ec eb       	ldi	r30, 0xBC	; 188
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	84 fd       	sbrc	r24, 4
 266:	fd cf       	rjmp	.-6      	; 0x262 <i2c_stop+0xa>

}/* i2c_stop */
 268:	08 95       	ret

0000026a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 26a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 26e:	84 e8       	ldi	r24, 0x84	; 132
 270:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 274:	ec eb       	ldi	r30, 0xBC	; 188
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	88 23       	and	r24, r24
 27c:	ec f7       	brge	.-6      	; 0x278 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 27e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 282:	98 7f       	andi	r25, 0xF8	; 248
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	98 32       	cpi	r25, 0x28	; 40
 288:	09 f4       	brne	.+2      	; 0x28c <i2c_write+0x22>
 28a:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 28c:	08 95       	ret

0000028e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 28e:	84 ec       	ldi	r24, 0xC4	; 196
 290:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
 294:	ec eb       	ldi	r30, 0xBC	; 188
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	88 23       	and	r24, r24
 29c:	ec f7       	brge	.-6      	; 0x298 <i2c_readAck+0xa>

    return TWDR;
 29e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
 2a2:	08 95       	ret

000002a4 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 2a4:	84 e8       	ldi	r24, 0x84	; 132
 2a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 2aa:	ec eb       	ldi	r30, 0xBC	; 188
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	88 23       	and	r24, r24
 2b2:	ec f7       	brge	.-6      	; 0x2ae <i2c_readNak+0xa>
	
    return TWDR;
 2b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
 2b8:	08 95       	ret

000002ba <__vector_18>:
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
 2ce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2d2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2d6:	8c 71       	andi	r24, 0x1C	; 28
 2d8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <UART_RxHead>
 2dc:	ef 5f       	subi	r30, 0xFF	; 255
 2de:	ef 71       	andi	r30, 0x1F	; 31
 2e0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <UART_RxTail>
 2e4:	e9 17       	cp	r30, r25
 2e6:	39 f0       	breq	.+14     	; 0x2f6 <__vector_18+0x3c>
 2e8:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <UART_RxHead>
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	ef 5e       	subi	r30, 0xEF	; 239
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	20 83       	st	Z, r18
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <__vector_18+0x3e>
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 2fc:	89 2b       	or	r24, r25
 2fe:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 302:	ff 91       	pop	r31
 304:	ef 91       	pop	r30
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <__vector_19>:
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	ef 93       	push	r30
 326:	ff 93       	push	r31
 328:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <UART_TxHead>
 32c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <UART_TxTail>
 330:	98 17       	cp	r25, r24
 332:	69 f0       	breq	.+26     	; 0x34e <__vector_19+0x38>
 334:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <UART_TxTail>
 338:	ef 5f       	subi	r30, 0xFF	; 255
 33a:	ef 71       	andi	r30, 0x1F	; 31
 33c:	e0 93 0f 01 	sts	0x010F, r30	; 0x80010f <UART_TxTail>
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ef 5c       	subi	r30, 0xCF	; 207
 344:	fe 4f       	sbci	r31, 0xFE	; 254
 346:	80 81       	ld	r24, Z
 348:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 34c:	05 c0       	rjmp	.+10     	; 0x358 <__vector_19+0x42>
 34e:	e1 ec       	ldi	r30, 0xC1	; 193
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	8f 7d       	andi	r24, 0xDF	; 223
 356:	80 83       	st	Z, r24
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <uart_init>:
 36a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <UART_TxHead>
 36e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <UART_TxTail>
 372:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <UART_RxHead>
 376:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <UART_RxTail>
 37a:	99 23       	and	r25, r25
 37c:	1c f4       	brge	.+6      	; 0x384 <uart_init+0x1a>
 37e:	22 e0       	ldi	r18, 0x02	; 2
 380:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 384:	90 78       	andi	r25, 0x80	; 128
 386:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 38a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 38e:	88 e9       	ldi	r24, 0x98	; 152
 390:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 394:	86 e0       	ldi	r24, 0x06	; 6
 396:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 39a:	08 95       	ret

0000039c <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 39c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <UART_TxHead>
 3a0:	2f 5f       	subi	r18, 0xFF	; 255
 3a2:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 3a4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <UART_TxTail>
 3a8:	29 17       	cp	r18, r25
 3aa:	e1 f3       	breq	.-8      	; 0x3a4 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 3ac:	e2 2f       	mov	r30, r18
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	ef 5c       	subi	r30, 0xCF	; 207
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 3b6:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 3ba:	e1 ec       	ldi	r30, 0xC1	; 193
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	80 62       	ori	r24, 0x20	; 32
 3c2:	80 83       	st	Z, r24
 3c4:	08 95       	ret

000003c6 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	ec 01       	movw	r28, r24
    while (*s) 
 3cc:	88 81       	ld	r24, Y
 3ce:	88 23       	and	r24, r24
 3d0:	31 f0       	breq	.+12     	; 0x3de <uart_puts+0x18>
 3d2:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 3d4:	0e 94 ce 01 	call	0x39c	; 0x39c <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 3d8:	89 91       	ld	r24, Y+
 3da:	81 11       	cpse	r24, r1
 3dc:	fb cf       	rjmp	.-10     	; 0x3d4 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <__divsf3>:
 3e4:	0e 94 06 02 	call	0x40c	; 0x40c <__divsf3x>
 3e8:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_round>
 3ec:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_pscB>
 3f0:	58 f0       	brcs	.+22     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_pscA>
 3f6:	40 f0       	brcs	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f8:	29 f4       	brne	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fa:	5f 3f       	cpi	r21, 0xFF	; 255
 3fc:	29 f0       	breq	.+10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3fe:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>
 402:	51 11       	cpse	r21, r1
 404:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_szero>
 408:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_nan>

0000040c <__divsf3x>:
 40c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_split3>
 410:	68 f3       	brcs	.-38     	; 0x3ec <__divsf3+0x8>

00000412 <__divsf3_pse>:
 412:	99 23       	and	r25, r25
 414:	b1 f3       	breq	.-20     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 416:	55 23       	and	r21, r21
 418:	91 f3       	breq	.-28     	; 0x3fe <__divsf3+0x1a>
 41a:	95 1b       	sub	r25, r21
 41c:	55 0b       	sbc	r21, r21
 41e:	bb 27       	eor	r27, r27
 420:	aa 27       	eor	r26, r26
 422:	62 17       	cp	r22, r18
 424:	73 07       	cpc	r23, r19
 426:	84 07       	cpc	r24, r20
 428:	38 f0       	brcs	.+14     	; 0x438 <__divsf3_pse+0x26>
 42a:	9f 5f       	subi	r25, 0xFF	; 255
 42c:	5f 4f       	sbci	r21, 0xFF	; 255
 42e:	22 0f       	add	r18, r18
 430:	33 1f       	adc	r19, r19
 432:	44 1f       	adc	r20, r20
 434:	aa 1f       	adc	r26, r26
 436:	a9 f3       	breq	.-22     	; 0x422 <__divsf3_pse+0x10>
 438:	35 d0       	rcall	.+106    	; 0x4a4 <__divsf3_pse+0x92>
 43a:	0e 2e       	mov	r0, r30
 43c:	3a f0       	brmi	.+14     	; 0x44c <__divsf3_pse+0x3a>
 43e:	e0 e8       	ldi	r30, 0x80	; 128
 440:	32 d0       	rcall	.+100    	; 0x4a6 <__divsf3_pse+0x94>
 442:	91 50       	subi	r25, 0x01	; 1
 444:	50 40       	sbci	r21, 0x00	; 0
 446:	e6 95       	lsr	r30
 448:	00 1c       	adc	r0, r0
 44a:	ca f7       	brpl	.-14     	; 0x43e <__divsf3_pse+0x2c>
 44c:	2b d0       	rcall	.+86     	; 0x4a4 <__divsf3_pse+0x92>
 44e:	fe 2f       	mov	r31, r30
 450:	29 d0       	rcall	.+82     	; 0x4a4 <__divsf3_pse+0x92>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	bb 1f       	adc	r27, r27
 45a:	26 17       	cp	r18, r22
 45c:	37 07       	cpc	r19, r23
 45e:	48 07       	cpc	r20, r24
 460:	ab 07       	cpc	r26, r27
 462:	b0 e8       	ldi	r27, 0x80	; 128
 464:	09 f0       	breq	.+2      	; 0x468 <__divsf3_pse+0x56>
 466:	bb 0b       	sbc	r27, r27
 468:	80 2d       	mov	r24, r0
 46a:	bf 01       	movw	r22, r30
 46c:	ff 27       	eor	r31, r31
 46e:	93 58       	subi	r25, 0x83	; 131
 470:	5f 4f       	sbci	r21, 0xFF	; 255
 472:	3a f0       	brmi	.+14     	; 0x482 <__divsf3_pse+0x70>
 474:	9e 3f       	cpi	r25, 0xFE	; 254
 476:	51 05       	cpc	r21, r1
 478:	78 f0       	brcs	.+30     	; 0x498 <__divsf3_pse+0x86>
 47a:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>
 47e:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_szero>
 482:	5f 3f       	cpi	r21, 0xFF	; 255
 484:	e4 f3       	brlt	.-8      	; 0x47e <__divsf3_pse+0x6c>
 486:	98 3e       	cpi	r25, 0xE8	; 232
 488:	d4 f3       	brlt	.-12     	; 0x47e <__divsf3_pse+0x6c>
 48a:	86 95       	lsr	r24
 48c:	77 95       	ror	r23
 48e:	67 95       	ror	r22
 490:	b7 95       	ror	r27
 492:	f7 95       	ror	r31
 494:	9f 5f       	subi	r25, 0xFF	; 255
 496:	c9 f7       	brne	.-14     	; 0x48a <__divsf3_pse+0x78>
 498:	88 0f       	add	r24, r24
 49a:	91 1d       	adc	r25, r1
 49c:	96 95       	lsr	r25
 49e:	87 95       	ror	r24
 4a0:	97 f9       	bld	r25, 7
 4a2:	08 95       	ret
 4a4:	e1 e0       	ldi	r30, 0x01	; 1
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	bb 1f       	adc	r27, r27
 4ae:	62 17       	cp	r22, r18
 4b0:	73 07       	cpc	r23, r19
 4b2:	84 07       	cpc	r24, r20
 4b4:	ba 07       	cpc	r27, r26
 4b6:	20 f0       	brcs	.+8      	; 0x4c0 <__divsf3_pse+0xae>
 4b8:	62 1b       	sub	r22, r18
 4ba:	73 0b       	sbc	r23, r19
 4bc:	84 0b       	sbc	r24, r20
 4be:	ba 0b       	sbc	r27, r26
 4c0:	ee 1f       	adc	r30, r30
 4c2:	88 f7       	brcc	.-30     	; 0x4a6 <__divsf3_pse+0x94>
 4c4:	e0 95       	com	r30
 4c6:	08 95       	ret

000004c8 <__fixunssfsi>:
 4c8:	0e 94 00 03 	call	0x600	; 0x600 <__fp_splitA>
 4cc:	88 f0       	brcs	.+34     	; 0x4f0 <__fixunssfsi+0x28>
 4ce:	9f 57       	subi	r25, 0x7F	; 127
 4d0:	98 f0       	brcs	.+38     	; 0x4f8 <__fixunssfsi+0x30>
 4d2:	b9 2f       	mov	r27, r25
 4d4:	99 27       	eor	r25, r25
 4d6:	b7 51       	subi	r27, 0x17	; 23
 4d8:	b0 f0       	brcs	.+44     	; 0x506 <__fixunssfsi+0x3e>
 4da:	e1 f0       	breq	.+56     	; 0x514 <__fixunssfsi+0x4c>
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	1a f0       	brmi	.+6      	; 0x4ec <__fixunssfsi+0x24>
 4e6:	ba 95       	dec	r27
 4e8:	c9 f7       	brne	.-14     	; 0x4dc <__fixunssfsi+0x14>
 4ea:	14 c0       	rjmp	.+40     	; 0x514 <__fixunssfsi+0x4c>
 4ec:	b1 30       	cpi	r27, 0x01	; 1
 4ee:	91 f0       	breq	.+36     	; 0x514 <__fixunssfsi+0x4c>
 4f0:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_zero>
 4f4:	b1 e0       	ldi	r27, 0x01	; 1
 4f6:	08 95       	ret
 4f8:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_zero>
 4fc:	67 2f       	mov	r22, r23
 4fe:	78 2f       	mov	r23, r24
 500:	88 27       	eor	r24, r24
 502:	b8 5f       	subi	r27, 0xF8	; 248
 504:	39 f0       	breq	.+14     	; 0x514 <__fixunssfsi+0x4c>
 506:	b9 3f       	cpi	r27, 0xF9	; 249
 508:	cc f3       	brlt	.-14     	; 0x4fc <__fixunssfsi+0x34>
 50a:	86 95       	lsr	r24
 50c:	77 95       	ror	r23
 50e:	67 95       	ror	r22
 510:	b3 95       	inc	r27
 512:	d9 f7       	brne	.-10     	; 0x50a <__fixunssfsi+0x42>
 514:	3e f4       	brtc	.+14     	; 0x524 <__fixunssfsi+0x5c>
 516:	90 95       	com	r25
 518:	80 95       	com	r24
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	8f 4f       	sbci	r24, 0xFF	; 255
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	08 95       	ret

00000526 <__floatunsisf>:
 526:	e8 94       	clt
 528:	09 c0       	rjmp	.+18     	; 0x53c <__floatsisf+0x12>

0000052a <__floatsisf>:
 52a:	97 fb       	bst	r25, 7
 52c:	3e f4       	brtc	.+14     	; 0x53c <__floatsisf+0x12>
 52e:	90 95       	com	r25
 530:	80 95       	com	r24
 532:	70 95       	com	r23
 534:	61 95       	neg	r22
 536:	7f 4f       	sbci	r23, 0xFF	; 255
 538:	8f 4f       	sbci	r24, 0xFF	; 255
 53a:	9f 4f       	sbci	r25, 0xFF	; 255
 53c:	99 23       	and	r25, r25
 53e:	a9 f0       	breq	.+42     	; 0x56a <__floatsisf+0x40>
 540:	f9 2f       	mov	r31, r25
 542:	96 e9       	ldi	r25, 0x96	; 150
 544:	bb 27       	eor	r27, r27
 546:	93 95       	inc	r25
 548:	f6 95       	lsr	r31
 54a:	87 95       	ror	r24
 54c:	77 95       	ror	r23
 54e:	67 95       	ror	r22
 550:	b7 95       	ror	r27
 552:	f1 11       	cpse	r31, r1
 554:	f8 cf       	rjmp	.-16     	; 0x546 <__floatsisf+0x1c>
 556:	fa f4       	brpl	.+62     	; 0x596 <__floatsisf+0x6c>
 558:	bb 0f       	add	r27, r27
 55a:	11 f4       	brne	.+4      	; 0x560 <__floatsisf+0x36>
 55c:	60 ff       	sbrs	r22, 0
 55e:	1b c0       	rjmp	.+54     	; 0x596 <__floatsisf+0x6c>
 560:	6f 5f       	subi	r22, 0xFF	; 255
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	16 c0       	rjmp	.+44     	; 0x596 <__floatsisf+0x6c>
 56a:	88 23       	and	r24, r24
 56c:	11 f0       	breq	.+4      	; 0x572 <__floatsisf+0x48>
 56e:	96 e9       	ldi	r25, 0x96	; 150
 570:	11 c0       	rjmp	.+34     	; 0x594 <__floatsisf+0x6a>
 572:	77 23       	and	r23, r23
 574:	21 f0       	breq	.+8      	; 0x57e <__floatsisf+0x54>
 576:	9e e8       	ldi	r25, 0x8E	; 142
 578:	87 2f       	mov	r24, r23
 57a:	76 2f       	mov	r23, r22
 57c:	05 c0       	rjmp	.+10     	; 0x588 <__floatsisf+0x5e>
 57e:	66 23       	and	r22, r22
 580:	71 f0       	breq	.+28     	; 0x59e <__floatsisf+0x74>
 582:	96 e8       	ldi	r25, 0x86	; 134
 584:	86 2f       	mov	r24, r22
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	2a f0       	brmi	.+10     	; 0x596 <__floatsisf+0x6c>
 58c:	9a 95       	dec	r25
 58e:	66 0f       	add	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	da f7       	brpl	.-10     	; 0x58c <__floatsisf+0x62>
 596:	88 0f       	add	r24, r24
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	97 f9       	bld	r25, 7
 59e:	08 95       	ret

000005a0 <__fp_inf>:
 5a0:	97 f9       	bld	r25, 7
 5a2:	9f 67       	ori	r25, 0x7F	; 127
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	08 95       	ret

000005ac <__fp_nan>:
 5ac:	9f ef       	ldi	r25, 0xFF	; 255
 5ae:	80 ec       	ldi	r24, 0xC0	; 192
 5b0:	08 95       	ret

000005b2 <__fp_pscA>:
 5b2:	00 24       	eor	r0, r0
 5b4:	0a 94       	dec	r0
 5b6:	16 16       	cp	r1, r22
 5b8:	17 06       	cpc	r1, r23
 5ba:	18 06       	cpc	r1, r24
 5bc:	09 06       	cpc	r0, r25
 5be:	08 95       	ret

000005c0 <__fp_pscB>:
 5c0:	00 24       	eor	r0, r0
 5c2:	0a 94       	dec	r0
 5c4:	12 16       	cp	r1, r18
 5c6:	13 06       	cpc	r1, r19
 5c8:	14 06       	cpc	r1, r20
 5ca:	05 06       	cpc	r0, r21
 5cc:	08 95       	ret

000005ce <__fp_round>:
 5ce:	09 2e       	mov	r0, r25
 5d0:	03 94       	inc	r0
 5d2:	00 0c       	add	r0, r0
 5d4:	11 f4       	brne	.+4      	; 0x5da <__fp_round+0xc>
 5d6:	88 23       	and	r24, r24
 5d8:	52 f0       	brmi	.+20     	; 0x5ee <__fp_round+0x20>
 5da:	bb 0f       	add	r27, r27
 5dc:	40 f4       	brcc	.+16     	; 0x5ee <__fp_round+0x20>
 5de:	bf 2b       	or	r27, r31
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__fp_round+0x18>
 5e2:	60 ff       	sbrs	r22, 0
 5e4:	04 c0       	rjmp	.+8      	; 0x5ee <__fp_round+0x20>
 5e6:	6f 5f       	subi	r22, 0xFF	; 255
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	08 95       	ret

000005f0 <__fp_split3>:
 5f0:	57 fd       	sbrc	r21, 7
 5f2:	90 58       	subi	r25, 0x80	; 128
 5f4:	44 0f       	add	r20, r20
 5f6:	55 1f       	adc	r21, r21
 5f8:	59 f0       	breq	.+22     	; 0x610 <__fp_splitA+0x10>
 5fa:	5f 3f       	cpi	r21, 0xFF	; 255
 5fc:	71 f0       	breq	.+28     	; 0x61a <__fp_splitA+0x1a>
 5fe:	47 95       	ror	r20

00000600 <__fp_splitA>:
 600:	88 0f       	add	r24, r24
 602:	97 fb       	bst	r25, 7
 604:	99 1f       	adc	r25, r25
 606:	61 f0       	breq	.+24     	; 0x620 <__fp_splitA+0x20>
 608:	9f 3f       	cpi	r25, 0xFF	; 255
 60a:	79 f0       	breq	.+30     	; 0x62a <__fp_splitA+0x2a>
 60c:	87 95       	ror	r24
 60e:	08 95       	ret
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	14 06       	cpc	r1, r20
 616:	55 1f       	adc	r21, r21
 618:	f2 cf       	rjmp	.-28     	; 0x5fe <__fp_split3+0xe>
 61a:	46 95       	lsr	r20
 61c:	f1 df       	rcall	.-30     	; 0x600 <__fp_splitA>
 61e:	08 c0       	rjmp	.+16     	; 0x630 <__fp_splitA+0x30>
 620:	16 16       	cp	r1, r22
 622:	17 06       	cpc	r1, r23
 624:	18 06       	cpc	r1, r24
 626:	99 1f       	adc	r25, r25
 628:	f1 cf       	rjmp	.-30     	; 0x60c <__fp_splitA+0xc>
 62a:	86 95       	lsr	r24
 62c:	71 05       	cpc	r23, r1
 62e:	61 05       	cpc	r22, r1
 630:	08 94       	sec
 632:	08 95       	ret

00000634 <__fp_zero>:
 634:	e8 94       	clt

00000636 <__fp_szero>:
 636:	bb 27       	eor	r27, r27
 638:	66 27       	eor	r22, r22
 63a:	77 27       	eor	r23, r23
 63c:	cb 01       	movw	r24, r22
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret

00000642 <sprintf>:
 642:	ae e0       	ldi	r26, 0x0E	; 14
 644:	b0 e0       	ldi	r27, 0x00	; 0
 646:	e7 e2       	ldi	r30, 0x27	; 39
 648:	f3 e0       	ldi	r31, 0x03	; 3
 64a:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__prologue_saves__+0x1c>
 64e:	0d 89       	ldd	r16, Y+21	; 0x15
 650:	1e 89       	ldd	r17, Y+22	; 0x16
 652:	86 e0       	ldi	r24, 0x06	; 6
 654:	8c 83       	std	Y+4, r24	; 0x04
 656:	1a 83       	std	Y+2, r17	; 0x02
 658:	09 83       	std	Y+1, r16	; 0x01
 65a:	8f ef       	ldi	r24, 0xFF	; 255
 65c:	9f e7       	ldi	r25, 0x7F	; 127
 65e:	9e 83       	std	Y+6, r25	; 0x06
 660:	8d 83       	std	Y+5, r24	; 0x05
 662:	ae 01       	movw	r20, r28
 664:	47 5e       	subi	r20, 0xE7	; 231
 666:	5f 4f       	sbci	r21, 0xFF	; 255
 668:	6f 89       	ldd	r22, Y+23	; 0x17
 66a:	78 8d       	ldd	r23, Y+24	; 0x18
 66c:	ce 01       	movw	r24, r28
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	0e 94 43 03 	call	0x686	; 0x686 <vfprintf>
 674:	ef 81       	ldd	r30, Y+7	; 0x07
 676:	f8 85       	ldd	r31, Y+8	; 0x08
 678:	e0 0f       	add	r30, r16
 67a:	f1 1f       	adc	r31, r17
 67c:	10 82       	st	Z, r1
 67e:	2e 96       	adiw	r28, 0x0e	; 14
 680:	e4 e0       	ldi	r30, 0x04	; 4
 682:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__epilogue_restores__+0x1c>

00000686 <vfprintf>:
 686:	ab e0       	ldi	r26, 0x0B	; 11
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e9 e4       	ldi	r30, 0x49	; 73
 68c:	f3 e0       	ldi	r31, 0x03	; 3
 68e:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__prologue_saves__>
 692:	6c 01       	movw	r12, r24
 694:	7b 01       	movw	r14, r22
 696:	8a 01       	movw	r16, r20
 698:	fc 01       	movw	r30, r24
 69a:	17 82       	std	Z+7, r1	; 0x07
 69c:	16 82       	std	Z+6, r1	; 0x06
 69e:	83 81       	ldd	r24, Z+3	; 0x03
 6a0:	81 ff       	sbrs	r24, 1
 6a2:	cc c1       	rjmp	.+920    	; 0xa3c <__stack+0x13d>
 6a4:	ce 01       	movw	r24, r28
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	3c 01       	movw	r6, r24
 6aa:	f6 01       	movw	r30, r12
 6ac:	93 81       	ldd	r25, Z+3	; 0x03
 6ae:	f7 01       	movw	r30, r14
 6b0:	93 fd       	sbrc	r25, 3
 6b2:	85 91       	lpm	r24, Z+
 6b4:	93 ff       	sbrs	r25, 3
 6b6:	81 91       	ld	r24, Z+
 6b8:	7f 01       	movw	r14, r30
 6ba:	88 23       	and	r24, r24
 6bc:	09 f4       	brne	.+2      	; 0x6c0 <vfprintf+0x3a>
 6be:	ba c1       	rjmp	.+884    	; 0xa34 <__stack+0x135>
 6c0:	85 32       	cpi	r24, 0x25	; 37
 6c2:	39 f4       	brne	.+14     	; 0x6d2 <vfprintf+0x4c>
 6c4:	93 fd       	sbrc	r25, 3
 6c6:	85 91       	lpm	r24, Z+
 6c8:	93 ff       	sbrs	r25, 3
 6ca:	81 91       	ld	r24, Z+
 6cc:	7f 01       	movw	r14, r30
 6ce:	85 32       	cpi	r24, 0x25	; 37
 6d0:	29 f4       	brne	.+10     	; 0x6dc <vfprintf+0x56>
 6d2:	b6 01       	movw	r22, r12
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 6da:	e7 cf       	rjmp	.-50     	; 0x6aa <vfprintf+0x24>
 6dc:	91 2c       	mov	r9, r1
 6de:	21 2c       	mov	r2, r1
 6e0:	31 2c       	mov	r3, r1
 6e2:	ff e1       	ldi	r31, 0x1F	; 31
 6e4:	f3 15       	cp	r31, r3
 6e6:	d8 f0       	brcs	.+54     	; 0x71e <vfprintf+0x98>
 6e8:	8b 32       	cpi	r24, 0x2B	; 43
 6ea:	79 f0       	breq	.+30     	; 0x70a <vfprintf+0x84>
 6ec:	38 f4       	brcc	.+14     	; 0x6fc <vfprintf+0x76>
 6ee:	80 32       	cpi	r24, 0x20	; 32
 6f0:	79 f0       	breq	.+30     	; 0x710 <vfprintf+0x8a>
 6f2:	83 32       	cpi	r24, 0x23	; 35
 6f4:	a1 f4       	brne	.+40     	; 0x71e <vfprintf+0x98>
 6f6:	23 2d       	mov	r18, r3
 6f8:	20 61       	ori	r18, 0x10	; 16
 6fa:	1d c0       	rjmp	.+58     	; 0x736 <vfprintf+0xb0>
 6fc:	8d 32       	cpi	r24, 0x2D	; 45
 6fe:	61 f0       	breq	.+24     	; 0x718 <vfprintf+0x92>
 700:	80 33       	cpi	r24, 0x30	; 48
 702:	69 f4       	brne	.+26     	; 0x71e <vfprintf+0x98>
 704:	23 2d       	mov	r18, r3
 706:	21 60       	ori	r18, 0x01	; 1
 708:	16 c0       	rjmp	.+44     	; 0x736 <vfprintf+0xb0>
 70a:	83 2d       	mov	r24, r3
 70c:	82 60       	ori	r24, 0x02	; 2
 70e:	38 2e       	mov	r3, r24
 710:	e3 2d       	mov	r30, r3
 712:	e4 60       	ori	r30, 0x04	; 4
 714:	3e 2e       	mov	r3, r30
 716:	2a c0       	rjmp	.+84     	; 0x76c <vfprintf+0xe6>
 718:	f3 2d       	mov	r31, r3
 71a:	f8 60       	ori	r31, 0x08	; 8
 71c:	1d c0       	rjmp	.+58     	; 0x758 <vfprintf+0xd2>
 71e:	37 fc       	sbrc	r3, 7
 720:	2d c0       	rjmp	.+90     	; 0x77c <vfprintf+0xf6>
 722:	20 ed       	ldi	r18, 0xD0	; 208
 724:	28 0f       	add	r18, r24
 726:	2a 30       	cpi	r18, 0x0A	; 10
 728:	40 f0       	brcs	.+16     	; 0x73a <vfprintf+0xb4>
 72a:	8e 32       	cpi	r24, 0x2E	; 46
 72c:	b9 f4       	brne	.+46     	; 0x75c <vfprintf+0xd6>
 72e:	36 fc       	sbrc	r3, 6
 730:	81 c1       	rjmp	.+770    	; 0xa34 <__stack+0x135>
 732:	23 2d       	mov	r18, r3
 734:	20 64       	ori	r18, 0x40	; 64
 736:	32 2e       	mov	r3, r18
 738:	19 c0       	rjmp	.+50     	; 0x76c <vfprintf+0xe6>
 73a:	36 fe       	sbrs	r3, 6
 73c:	06 c0       	rjmp	.+12     	; 0x74a <vfprintf+0xc4>
 73e:	8a e0       	ldi	r24, 0x0A	; 10
 740:	98 9e       	mul	r9, r24
 742:	20 0d       	add	r18, r0
 744:	11 24       	eor	r1, r1
 746:	92 2e       	mov	r9, r18
 748:	11 c0       	rjmp	.+34     	; 0x76c <vfprintf+0xe6>
 74a:	ea e0       	ldi	r30, 0x0A	; 10
 74c:	2e 9e       	mul	r2, r30
 74e:	20 0d       	add	r18, r0
 750:	11 24       	eor	r1, r1
 752:	22 2e       	mov	r2, r18
 754:	f3 2d       	mov	r31, r3
 756:	f0 62       	ori	r31, 0x20	; 32
 758:	3f 2e       	mov	r3, r31
 75a:	08 c0       	rjmp	.+16     	; 0x76c <vfprintf+0xe6>
 75c:	8c 36       	cpi	r24, 0x6C	; 108
 75e:	21 f4       	brne	.+8      	; 0x768 <vfprintf+0xe2>
 760:	83 2d       	mov	r24, r3
 762:	80 68       	ori	r24, 0x80	; 128
 764:	38 2e       	mov	r3, r24
 766:	02 c0       	rjmp	.+4      	; 0x76c <vfprintf+0xe6>
 768:	88 36       	cpi	r24, 0x68	; 104
 76a:	41 f4       	brne	.+16     	; 0x77c <vfprintf+0xf6>
 76c:	f7 01       	movw	r30, r14
 76e:	93 fd       	sbrc	r25, 3
 770:	85 91       	lpm	r24, Z+
 772:	93 ff       	sbrs	r25, 3
 774:	81 91       	ld	r24, Z+
 776:	7f 01       	movw	r14, r30
 778:	81 11       	cpse	r24, r1
 77a:	b3 cf       	rjmp	.-154    	; 0x6e2 <vfprintf+0x5c>
 77c:	98 2f       	mov	r25, r24
 77e:	9f 7d       	andi	r25, 0xDF	; 223
 780:	95 54       	subi	r25, 0x45	; 69
 782:	93 30       	cpi	r25, 0x03	; 3
 784:	28 f4       	brcc	.+10     	; 0x790 <vfprintf+0x10a>
 786:	0c 5f       	subi	r16, 0xFC	; 252
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	9f e3       	ldi	r25, 0x3F	; 63
 78c:	99 83       	std	Y+1, r25	; 0x01
 78e:	0d c0       	rjmp	.+26     	; 0x7aa <vfprintf+0x124>
 790:	83 36       	cpi	r24, 0x63	; 99
 792:	31 f0       	breq	.+12     	; 0x7a0 <vfprintf+0x11a>
 794:	83 37       	cpi	r24, 0x73	; 115
 796:	71 f0       	breq	.+28     	; 0x7b4 <vfprintf+0x12e>
 798:	83 35       	cpi	r24, 0x53	; 83
 79a:	09 f0       	breq	.+2      	; 0x79e <vfprintf+0x118>
 79c:	59 c0       	rjmp	.+178    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 79e:	21 c0       	rjmp	.+66     	; 0x7e2 <vfprintf+0x15c>
 7a0:	f8 01       	movw	r30, r16
 7a2:	80 81       	ld	r24, Z
 7a4:	89 83       	std	Y+1, r24	; 0x01
 7a6:	0e 5f       	subi	r16, 0xFE	; 254
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	88 24       	eor	r8, r8
 7ac:	83 94       	inc	r8
 7ae:	91 2c       	mov	r9, r1
 7b0:	53 01       	movw	r10, r6
 7b2:	13 c0       	rjmp	.+38     	; 0x7da <vfprintf+0x154>
 7b4:	28 01       	movw	r4, r16
 7b6:	f2 e0       	ldi	r31, 0x02	; 2
 7b8:	4f 0e       	add	r4, r31
 7ba:	51 1c       	adc	r5, r1
 7bc:	f8 01       	movw	r30, r16
 7be:	a0 80       	ld	r10, Z
 7c0:	b1 80       	ldd	r11, Z+1	; 0x01
 7c2:	36 fe       	sbrs	r3, 6
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <vfprintf+0x146>
 7c6:	69 2d       	mov	r22, r9
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <vfprintf+0x14a>
 7cc:	6f ef       	ldi	r22, 0xFF	; 255
 7ce:	7f ef       	ldi	r23, 0xFF	; 255
 7d0:	c5 01       	movw	r24, r10
 7d2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <strnlen>
 7d6:	4c 01       	movw	r8, r24
 7d8:	82 01       	movw	r16, r4
 7da:	f3 2d       	mov	r31, r3
 7dc:	ff 77       	andi	r31, 0x7F	; 127
 7de:	3f 2e       	mov	r3, r31
 7e0:	16 c0       	rjmp	.+44     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7e2:	28 01       	movw	r4, r16
 7e4:	22 e0       	ldi	r18, 0x02	; 2
 7e6:	42 0e       	add	r4, r18
 7e8:	51 1c       	adc	r5, r1
 7ea:	f8 01       	movw	r30, r16
 7ec:	a0 80       	ld	r10, Z
 7ee:	b1 80       	ldd	r11, Z+1	; 0x01
 7f0:	36 fe       	sbrs	r3, 6
 7f2:	03 c0       	rjmp	.+6      	; 0x7fa <vfprintf+0x174>
 7f4:	69 2d       	mov	r22, r9
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <vfprintf+0x178>
 7fa:	6f ef       	ldi	r22, 0xFF	; 255
 7fc:	7f ef       	ldi	r23, 0xFF	; 255
 7fe:	c5 01       	movw	r24, r10
 800:	0e 94 24 05 	call	0xa48	; 0xa48 <strnlen_P>
 804:	4c 01       	movw	r8, r24
 806:	f3 2d       	mov	r31, r3
 808:	f0 68       	ori	r31, 0x80	; 128
 80a:	3f 2e       	mov	r3, r31
 80c:	82 01       	movw	r16, r4
 80e:	33 fc       	sbrc	r3, 3
 810:	1b c0       	rjmp	.+54     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 812:	82 2d       	mov	r24, r2
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	88 16       	cp	r8, r24
 818:	99 06       	cpc	r9, r25
 81a:	b0 f4       	brcc	.+44     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 81c:	b6 01       	movw	r22, r12
 81e:	80 e2       	ldi	r24, 0x20	; 32
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 826:	2a 94       	dec	r2
 828:	f4 cf       	rjmp	.-24     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 82a:	f5 01       	movw	r30, r10
 82c:	37 fc       	sbrc	r3, 7
 82e:	85 91       	lpm	r24, Z+
 830:	37 fe       	sbrs	r3, 7
 832:	81 91       	ld	r24, Z+
 834:	5f 01       	movw	r10, r30
 836:	b6 01       	movw	r22, r12
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 83e:	21 10       	cpse	r2, r1
 840:	2a 94       	dec	r2
 842:	21 e0       	ldi	r18, 0x01	; 1
 844:	82 1a       	sub	r8, r18
 846:	91 08       	sbc	r9, r1
 848:	81 14       	cp	r8, r1
 84a:	91 04       	cpc	r9, r1
 84c:	71 f7       	brne	.-36     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 84e:	e8 c0       	rjmp	.+464    	; 0xa20 <__stack+0x121>
 850:	84 36       	cpi	r24, 0x64	; 100
 852:	11 f0       	breq	.+4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 854:	89 36       	cpi	r24, 0x69	; 105
 856:	41 f5       	brne	.+80     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 858:	f8 01       	movw	r30, r16
 85a:	37 fe       	sbrs	r3, 7
 85c:	07 c0       	rjmp	.+14     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 85e:	60 81       	ld	r22, Z
 860:	71 81       	ldd	r23, Z+1	; 0x01
 862:	82 81       	ldd	r24, Z+2	; 0x02
 864:	93 81       	ldd	r25, Z+3	; 0x03
 866:	0c 5f       	subi	r16, 0xFC	; 252
 868:	1f 4f       	sbci	r17, 0xFF	; 255
 86a:	08 c0       	rjmp	.+16     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 86c:	60 81       	ld	r22, Z
 86e:	71 81       	ldd	r23, Z+1	; 0x01
 870:	07 2e       	mov	r0, r23
 872:	00 0c       	add	r0, r0
 874:	88 0b       	sbc	r24, r24
 876:	99 0b       	sbc	r25, r25
 878:	0e 5f       	subi	r16, 0xFE	; 254
 87a:	1f 4f       	sbci	r17, 0xFF	; 255
 87c:	f3 2d       	mov	r31, r3
 87e:	ff 76       	andi	r31, 0x6F	; 111
 880:	3f 2e       	mov	r3, r31
 882:	97 ff       	sbrs	r25, 7
 884:	09 c0       	rjmp	.+18     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 886:	90 95       	com	r25
 888:	80 95       	com	r24
 88a:	70 95       	com	r23
 88c:	61 95       	neg	r22
 88e:	7f 4f       	sbci	r23, 0xFF	; 255
 890:	8f 4f       	sbci	r24, 0xFF	; 255
 892:	9f 4f       	sbci	r25, 0xFF	; 255
 894:	f0 68       	ori	r31, 0x80	; 128
 896:	3f 2e       	mov	r3, r31
 898:	2a e0       	ldi	r18, 0x0A	; 10
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	a3 01       	movw	r20, r6
 89e:	0e 94 76 05 	call	0xaec	; 0xaec <__ultoa_invert>
 8a2:	88 2e       	mov	r8, r24
 8a4:	86 18       	sub	r8, r6
 8a6:	45 c0       	rjmp	.+138    	; 0x932 <__stack+0x33>
 8a8:	85 37       	cpi	r24, 0x75	; 117
 8aa:	31 f4       	brne	.+12     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 8ac:	23 2d       	mov	r18, r3
 8ae:	2f 7e       	andi	r18, 0xEF	; 239
 8b0:	b2 2e       	mov	r11, r18
 8b2:	2a e0       	ldi	r18, 0x0A	; 10
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	25 c0       	rjmp	.+74     	; 0x902 <__stack+0x3>
 8b8:	93 2d       	mov	r25, r3
 8ba:	99 7f       	andi	r25, 0xF9	; 249
 8bc:	b9 2e       	mov	r11, r25
 8be:	8f 36       	cpi	r24, 0x6F	; 111
 8c0:	c1 f0       	breq	.+48     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8c2:	18 f4       	brcc	.+6      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8c4:	88 35       	cpi	r24, 0x58	; 88
 8c6:	79 f0       	breq	.+30     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8c8:	b5 c0       	rjmp	.+362    	; 0xa34 <__stack+0x135>
 8ca:	80 37       	cpi	r24, 0x70	; 112
 8cc:	19 f0       	breq	.+6      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8ce:	88 37       	cpi	r24, 0x78	; 120
 8d0:	21 f0       	breq	.+8      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8d2:	b0 c0       	rjmp	.+352    	; 0xa34 <__stack+0x135>
 8d4:	e9 2f       	mov	r30, r25
 8d6:	e0 61       	ori	r30, 0x10	; 16
 8d8:	be 2e       	mov	r11, r30
 8da:	b4 fe       	sbrs	r11, 4
 8dc:	0d c0       	rjmp	.+26     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8de:	fb 2d       	mov	r31, r11
 8e0:	f4 60       	ori	r31, 0x04	; 4
 8e2:	bf 2e       	mov	r11, r31
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8e6:	34 fe       	sbrs	r3, 4
 8e8:	0a c0       	rjmp	.+20     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8ea:	29 2f       	mov	r18, r25
 8ec:	26 60       	ori	r18, 0x06	; 6
 8ee:	b2 2e       	mov	r11, r18
 8f0:	06 c0       	rjmp	.+12     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8f2:	28 e0       	ldi	r18, 0x08	; 8
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	05 c0       	rjmp	.+10     	; 0x902 <__stack+0x3>
 8f8:	20 e1       	ldi	r18, 0x10	; 16
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0x3>
 8fe:	20 e1       	ldi	r18, 0x10	; 16
 900:	32 e0       	ldi	r19, 0x02	; 2
 902:	f8 01       	movw	r30, r16
 904:	b7 fe       	sbrs	r11, 7
 906:	07 c0       	rjmp	.+14     	; 0x916 <__stack+0x17>
 908:	60 81       	ld	r22, Z
 90a:	71 81       	ldd	r23, Z+1	; 0x01
 90c:	82 81       	ldd	r24, Z+2	; 0x02
 90e:	93 81       	ldd	r25, Z+3	; 0x03
 910:	0c 5f       	subi	r16, 0xFC	; 252
 912:	1f 4f       	sbci	r17, 0xFF	; 255
 914:	06 c0       	rjmp	.+12     	; 0x922 <__stack+0x23>
 916:	60 81       	ld	r22, Z
 918:	71 81       	ldd	r23, Z+1	; 0x01
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 5f       	subi	r16, 0xFE	; 254
 920:	1f 4f       	sbci	r17, 0xFF	; 255
 922:	a3 01       	movw	r20, r6
 924:	0e 94 76 05 	call	0xaec	; 0xaec <__ultoa_invert>
 928:	88 2e       	mov	r8, r24
 92a:	86 18       	sub	r8, r6
 92c:	fb 2d       	mov	r31, r11
 92e:	ff 77       	andi	r31, 0x7F	; 127
 930:	3f 2e       	mov	r3, r31
 932:	36 fe       	sbrs	r3, 6
 934:	0d c0       	rjmp	.+26     	; 0x950 <__stack+0x51>
 936:	23 2d       	mov	r18, r3
 938:	2e 7f       	andi	r18, 0xFE	; 254
 93a:	a2 2e       	mov	r10, r18
 93c:	89 14       	cp	r8, r9
 93e:	58 f4       	brcc	.+22     	; 0x956 <__stack+0x57>
 940:	34 fe       	sbrs	r3, 4
 942:	0b c0       	rjmp	.+22     	; 0x95a <__stack+0x5b>
 944:	32 fc       	sbrc	r3, 2
 946:	09 c0       	rjmp	.+18     	; 0x95a <__stack+0x5b>
 948:	83 2d       	mov	r24, r3
 94a:	8e 7e       	andi	r24, 0xEE	; 238
 94c:	a8 2e       	mov	r10, r24
 94e:	05 c0       	rjmp	.+10     	; 0x95a <__stack+0x5b>
 950:	b8 2c       	mov	r11, r8
 952:	a3 2c       	mov	r10, r3
 954:	03 c0       	rjmp	.+6      	; 0x95c <__stack+0x5d>
 956:	b8 2c       	mov	r11, r8
 958:	01 c0       	rjmp	.+2      	; 0x95c <__stack+0x5d>
 95a:	b9 2c       	mov	r11, r9
 95c:	a4 fe       	sbrs	r10, 4
 95e:	0f c0       	rjmp	.+30     	; 0x97e <__stack+0x7f>
 960:	fe 01       	movw	r30, r28
 962:	e8 0d       	add	r30, r8
 964:	f1 1d       	adc	r31, r1
 966:	80 81       	ld	r24, Z
 968:	80 33       	cpi	r24, 0x30	; 48
 96a:	21 f4       	brne	.+8      	; 0x974 <__stack+0x75>
 96c:	9a 2d       	mov	r25, r10
 96e:	99 7e       	andi	r25, 0xE9	; 233
 970:	a9 2e       	mov	r10, r25
 972:	09 c0       	rjmp	.+18     	; 0x986 <__stack+0x87>
 974:	a2 fe       	sbrs	r10, 2
 976:	06 c0       	rjmp	.+12     	; 0x984 <__stack+0x85>
 978:	b3 94       	inc	r11
 97a:	b3 94       	inc	r11
 97c:	04 c0       	rjmp	.+8      	; 0x986 <__stack+0x87>
 97e:	8a 2d       	mov	r24, r10
 980:	86 78       	andi	r24, 0x86	; 134
 982:	09 f0       	breq	.+2      	; 0x986 <__stack+0x87>
 984:	b3 94       	inc	r11
 986:	a3 fc       	sbrc	r10, 3
 988:	11 c0       	rjmp	.+34     	; 0x9ac <__stack+0xad>
 98a:	a0 fe       	sbrs	r10, 0
 98c:	06 c0       	rjmp	.+12     	; 0x99a <__stack+0x9b>
 98e:	b2 14       	cp	r11, r2
 990:	88 f4       	brcc	.+34     	; 0x9b4 <__stack+0xb5>
 992:	28 0c       	add	r2, r8
 994:	92 2c       	mov	r9, r2
 996:	9b 18       	sub	r9, r11
 998:	0e c0       	rjmp	.+28     	; 0x9b6 <__stack+0xb7>
 99a:	b2 14       	cp	r11, r2
 99c:	60 f4       	brcc	.+24     	; 0x9b6 <__stack+0xb7>
 99e:	b6 01       	movw	r22, r12
 9a0:	80 e2       	ldi	r24, 0x20	; 32
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 9a8:	b3 94       	inc	r11
 9aa:	f7 cf       	rjmp	.-18     	; 0x99a <__stack+0x9b>
 9ac:	b2 14       	cp	r11, r2
 9ae:	18 f4       	brcc	.+6      	; 0x9b6 <__stack+0xb7>
 9b0:	2b 18       	sub	r2, r11
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <__stack+0xb9>
 9b4:	98 2c       	mov	r9, r8
 9b6:	21 2c       	mov	r2, r1
 9b8:	a4 fe       	sbrs	r10, 4
 9ba:	10 c0       	rjmp	.+32     	; 0x9dc <__stack+0xdd>
 9bc:	b6 01       	movw	r22, r12
 9be:	80 e3       	ldi	r24, 0x30	; 48
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 9c6:	a2 fe       	sbrs	r10, 2
 9c8:	17 c0       	rjmp	.+46     	; 0x9f8 <__stack+0xf9>
 9ca:	a1 fc       	sbrc	r10, 1
 9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <__stack+0xd5>
 9ce:	88 e7       	ldi	r24, 0x78	; 120
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <__stack+0xd9>
 9d4:	88 e5       	ldi	r24, 0x58	; 88
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	b6 01       	movw	r22, r12
 9da:	0c c0       	rjmp	.+24     	; 0x9f4 <__stack+0xf5>
 9dc:	8a 2d       	mov	r24, r10
 9de:	86 78       	andi	r24, 0x86	; 134
 9e0:	59 f0       	breq	.+22     	; 0x9f8 <__stack+0xf9>
 9e2:	a1 fe       	sbrs	r10, 1
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <__stack+0xeb>
 9e6:	8b e2       	ldi	r24, 0x2B	; 43
 9e8:	01 c0       	rjmp	.+2      	; 0x9ec <__stack+0xed>
 9ea:	80 e2       	ldi	r24, 0x20	; 32
 9ec:	a7 fc       	sbrc	r10, 7
 9ee:	8d e2       	ldi	r24, 0x2D	; 45
 9f0:	b6 01       	movw	r22, r12
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 9f8:	89 14       	cp	r8, r9
 9fa:	38 f4       	brcc	.+14     	; 0xa0a <__stack+0x10b>
 9fc:	b6 01       	movw	r22, r12
 9fe:	80 e3       	ldi	r24, 0x30	; 48
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 a06:	9a 94       	dec	r9
 a08:	f7 cf       	rjmp	.-18     	; 0x9f8 <__stack+0xf9>
 a0a:	8a 94       	dec	r8
 a0c:	f3 01       	movw	r30, r6
 a0e:	e8 0d       	add	r30, r8
 a10:	f1 1d       	adc	r31, r1
 a12:	80 81       	ld	r24, Z
 a14:	b6 01       	movw	r22, r12
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 a1c:	81 10       	cpse	r8, r1
 a1e:	f5 cf       	rjmp	.-22     	; 0xa0a <__stack+0x10b>
 a20:	22 20       	and	r2, r2
 a22:	09 f4       	brne	.+2      	; 0xa26 <__stack+0x127>
 a24:	42 ce       	rjmp	.-892    	; 0x6aa <vfprintf+0x24>
 a26:	b6 01       	movw	r22, r12
 a28:	80 e2       	ldi	r24, 0x20	; 32
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 a30:	2a 94       	dec	r2
 a32:	f6 cf       	rjmp	.-20     	; 0xa20 <__stack+0x121>
 a34:	f6 01       	movw	r30, r12
 a36:	86 81       	ldd	r24, Z+6	; 0x06
 a38:	97 81       	ldd	r25, Z+7	; 0x07
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <__stack+0x141>
 a3c:	8f ef       	ldi	r24, 0xFF	; 255
 a3e:	9f ef       	ldi	r25, 0xFF	; 255
 a40:	2b 96       	adiw	r28, 0x0b	; 11
 a42:	e2 e1       	ldi	r30, 0x12	; 18
 a44:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__epilogue_restores__>

00000a48 <strnlen_P>:
 a48:	fc 01       	movw	r30, r24
 a4a:	05 90       	lpm	r0, Z+
 a4c:	61 50       	subi	r22, 0x01	; 1
 a4e:	70 40       	sbci	r23, 0x00	; 0
 a50:	01 10       	cpse	r0, r1
 a52:	d8 f7       	brcc	.-10     	; 0xa4a <strnlen_P+0x2>
 a54:	80 95       	com	r24
 a56:	90 95       	com	r25
 a58:	8e 0f       	add	r24, r30
 a5a:	9f 1f       	adc	r25, r31
 a5c:	08 95       	ret

00000a5e <strnlen>:
 a5e:	fc 01       	movw	r30, r24
 a60:	61 50       	subi	r22, 0x01	; 1
 a62:	70 40       	sbci	r23, 0x00	; 0
 a64:	01 90       	ld	r0, Z+
 a66:	01 10       	cpse	r0, r1
 a68:	d8 f7       	brcc	.-10     	; 0xa60 <strnlen+0x2>
 a6a:	80 95       	com	r24
 a6c:	90 95       	com	r25
 a6e:	8e 0f       	add	r24, r30
 a70:	9f 1f       	adc	r25, r31
 a72:	08 95       	ret

00000a74 <fputc>:
 a74:	0f 93       	push	r16
 a76:	1f 93       	push	r17
 a78:	cf 93       	push	r28
 a7a:	df 93       	push	r29
 a7c:	fb 01       	movw	r30, r22
 a7e:	23 81       	ldd	r18, Z+3	; 0x03
 a80:	21 fd       	sbrc	r18, 1
 a82:	03 c0       	rjmp	.+6      	; 0xa8a <fputc+0x16>
 a84:	8f ef       	ldi	r24, 0xFF	; 255
 a86:	9f ef       	ldi	r25, 0xFF	; 255
 a88:	2c c0       	rjmp	.+88     	; 0xae2 <fputc+0x6e>
 a8a:	22 ff       	sbrs	r18, 2
 a8c:	16 c0       	rjmp	.+44     	; 0xaba <fputc+0x46>
 a8e:	46 81       	ldd	r20, Z+6	; 0x06
 a90:	57 81       	ldd	r21, Z+7	; 0x07
 a92:	24 81       	ldd	r18, Z+4	; 0x04
 a94:	35 81       	ldd	r19, Z+5	; 0x05
 a96:	42 17       	cp	r20, r18
 a98:	53 07       	cpc	r21, r19
 a9a:	44 f4       	brge	.+16     	; 0xaac <fputc+0x38>
 a9c:	a0 81       	ld	r26, Z
 a9e:	b1 81       	ldd	r27, Z+1	; 0x01
 aa0:	9d 01       	movw	r18, r26
 aa2:	2f 5f       	subi	r18, 0xFF	; 255
 aa4:	3f 4f       	sbci	r19, 0xFF	; 255
 aa6:	31 83       	std	Z+1, r19	; 0x01
 aa8:	20 83       	st	Z, r18
 aaa:	8c 93       	st	X, r24
 aac:	26 81       	ldd	r18, Z+6	; 0x06
 aae:	37 81       	ldd	r19, Z+7	; 0x07
 ab0:	2f 5f       	subi	r18, 0xFF	; 255
 ab2:	3f 4f       	sbci	r19, 0xFF	; 255
 ab4:	37 83       	std	Z+7, r19	; 0x07
 ab6:	26 83       	std	Z+6, r18	; 0x06
 ab8:	14 c0       	rjmp	.+40     	; 0xae2 <fputc+0x6e>
 aba:	8b 01       	movw	r16, r22
 abc:	ec 01       	movw	r28, r24
 abe:	fb 01       	movw	r30, r22
 ac0:	00 84       	ldd	r0, Z+8	; 0x08
 ac2:	f1 85       	ldd	r31, Z+9	; 0x09
 ac4:	e0 2d       	mov	r30, r0
 ac6:	09 95       	icall
 ac8:	89 2b       	or	r24, r25
 aca:	e1 f6       	brne	.-72     	; 0xa84 <fputc+0x10>
 acc:	d8 01       	movw	r26, r16
 ace:	16 96       	adiw	r26, 0x06	; 6
 ad0:	8d 91       	ld	r24, X+
 ad2:	9c 91       	ld	r25, X
 ad4:	17 97       	sbiw	r26, 0x07	; 7
 ad6:	01 96       	adiw	r24, 0x01	; 1
 ad8:	17 96       	adiw	r26, 0x07	; 7
 ada:	9c 93       	st	X, r25
 adc:	8e 93       	st	-X, r24
 ade:	16 97       	sbiw	r26, 0x06	; 6
 ae0:	ce 01       	movw	r24, r28
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	1f 91       	pop	r17
 ae8:	0f 91       	pop	r16
 aea:	08 95       	ret

00000aec <__ultoa_invert>:
 aec:	fa 01       	movw	r30, r20
 aee:	aa 27       	eor	r26, r26
 af0:	28 30       	cpi	r18, 0x08	; 8
 af2:	51 f1       	breq	.+84     	; 0xb48 <__ultoa_invert+0x5c>
 af4:	20 31       	cpi	r18, 0x10	; 16
 af6:	81 f1       	breq	.+96     	; 0xb58 <__ultoa_invert+0x6c>
 af8:	e8 94       	clt
 afa:	6f 93       	push	r22
 afc:	6e 7f       	andi	r22, 0xFE	; 254
 afe:	6e 5f       	subi	r22, 0xFE	; 254
 b00:	7f 4f       	sbci	r23, 0xFF	; 255
 b02:	8f 4f       	sbci	r24, 0xFF	; 255
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	af 4f       	sbci	r26, 0xFF	; 255
 b08:	b1 e0       	ldi	r27, 0x01	; 1
 b0a:	3e d0       	rcall	.+124    	; 0xb88 <__ultoa_invert+0x9c>
 b0c:	b4 e0       	ldi	r27, 0x04	; 4
 b0e:	3c d0       	rcall	.+120    	; 0xb88 <__ultoa_invert+0x9c>
 b10:	67 0f       	add	r22, r23
 b12:	78 1f       	adc	r23, r24
 b14:	89 1f       	adc	r24, r25
 b16:	9a 1f       	adc	r25, r26
 b18:	a1 1d       	adc	r26, r1
 b1a:	68 0f       	add	r22, r24
 b1c:	79 1f       	adc	r23, r25
 b1e:	8a 1f       	adc	r24, r26
 b20:	91 1d       	adc	r25, r1
 b22:	a1 1d       	adc	r26, r1
 b24:	6a 0f       	add	r22, r26
 b26:	71 1d       	adc	r23, r1
 b28:	81 1d       	adc	r24, r1
 b2a:	91 1d       	adc	r25, r1
 b2c:	a1 1d       	adc	r26, r1
 b2e:	20 d0       	rcall	.+64     	; 0xb70 <__ultoa_invert+0x84>
 b30:	09 f4       	brne	.+2      	; 0xb34 <__ultoa_invert+0x48>
 b32:	68 94       	set
 b34:	3f 91       	pop	r19
 b36:	2a e0       	ldi	r18, 0x0A	; 10
 b38:	26 9f       	mul	r18, r22
 b3a:	11 24       	eor	r1, r1
 b3c:	30 19       	sub	r19, r0
 b3e:	30 5d       	subi	r19, 0xD0	; 208
 b40:	31 93       	st	Z+, r19
 b42:	de f6       	brtc	.-74     	; 0xafa <__ultoa_invert+0xe>
 b44:	cf 01       	movw	r24, r30
 b46:	08 95       	ret
 b48:	46 2f       	mov	r20, r22
 b4a:	47 70       	andi	r20, 0x07	; 7
 b4c:	40 5d       	subi	r20, 0xD0	; 208
 b4e:	41 93       	st	Z+, r20
 b50:	b3 e0       	ldi	r27, 0x03	; 3
 b52:	0f d0       	rcall	.+30     	; 0xb72 <__ultoa_invert+0x86>
 b54:	c9 f7       	brne	.-14     	; 0xb48 <__ultoa_invert+0x5c>
 b56:	f6 cf       	rjmp	.-20     	; 0xb44 <__ultoa_invert+0x58>
 b58:	46 2f       	mov	r20, r22
 b5a:	4f 70       	andi	r20, 0x0F	; 15
 b5c:	40 5d       	subi	r20, 0xD0	; 208
 b5e:	4a 33       	cpi	r20, 0x3A	; 58
 b60:	18 f0       	brcs	.+6      	; 0xb68 <__ultoa_invert+0x7c>
 b62:	49 5d       	subi	r20, 0xD9	; 217
 b64:	31 fd       	sbrc	r19, 1
 b66:	40 52       	subi	r20, 0x20	; 32
 b68:	41 93       	st	Z+, r20
 b6a:	02 d0       	rcall	.+4      	; 0xb70 <__ultoa_invert+0x84>
 b6c:	a9 f7       	brne	.-22     	; 0xb58 <__ultoa_invert+0x6c>
 b6e:	ea cf       	rjmp	.-44     	; 0xb44 <__ultoa_invert+0x58>
 b70:	b4 e0       	ldi	r27, 0x04	; 4
 b72:	a6 95       	lsr	r26
 b74:	97 95       	ror	r25
 b76:	87 95       	ror	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	ba 95       	dec	r27
 b7e:	c9 f7       	brne	.-14     	; 0xb72 <__ultoa_invert+0x86>
 b80:	00 97       	sbiw	r24, 0x00	; 0
 b82:	61 05       	cpc	r22, r1
 b84:	71 05       	cpc	r23, r1
 b86:	08 95       	ret
 b88:	9b 01       	movw	r18, r22
 b8a:	ac 01       	movw	r20, r24
 b8c:	0a 2e       	mov	r0, r26
 b8e:	06 94       	lsr	r0
 b90:	57 95       	ror	r21
 b92:	47 95       	ror	r20
 b94:	37 95       	ror	r19
 b96:	27 95       	ror	r18
 b98:	ba 95       	dec	r27
 b9a:	c9 f7       	brne	.-14     	; 0xb8e <__ultoa_invert+0xa2>
 b9c:	62 0f       	add	r22, r18
 b9e:	73 1f       	adc	r23, r19
 ba0:	84 1f       	adc	r24, r20
 ba2:	95 1f       	adc	r25, r21
 ba4:	a0 1d       	adc	r26, r0
 ba6:	08 95       	ret

00000ba8 <__prologue_saves__>:
 ba8:	2f 92       	push	r2
 baa:	3f 92       	push	r3
 bac:	4f 92       	push	r4
 bae:	5f 92       	push	r5
 bb0:	6f 92       	push	r6
 bb2:	7f 92       	push	r7
 bb4:	8f 92       	push	r8
 bb6:	9f 92       	push	r9
 bb8:	af 92       	push	r10
 bba:	bf 92       	push	r11
 bbc:	cf 92       	push	r12
 bbe:	df 92       	push	r13
 bc0:	ef 92       	push	r14
 bc2:	ff 92       	push	r15
 bc4:	0f 93       	push	r16
 bc6:	1f 93       	push	r17
 bc8:	cf 93       	push	r28
 bca:	df 93       	push	r29
 bcc:	cd b7       	in	r28, 0x3d	; 61
 bce:	de b7       	in	r29, 0x3e	; 62
 bd0:	ca 1b       	sub	r28, r26
 bd2:	db 0b       	sbc	r29, r27
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	de bf       	out	0x3e, r29	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	cd bf       	out	0x3d, r28	; 61
 bde:	09 94       	ijmp

00000be0 <__epilogue_restores__>:
 be0:	2a 88       	ldd	r2, Y+18	; 0x12
 be2:	39 88       	ldd	r3, Y+17	; 0x11
 be4:	48 88       	ldd	r4, Y+16	; 0x10
 be6:	5f 84       	ldd	r5, Y+15	; 0x0f
 be8:	6e 84       	ldd	r6, Y+14	; 0x0e
 bea:	7d 84       	ldd	r7, Y+13	; 0x0d
 bec:	8c 84       	ldd	r8, Y+12	; 0x0c
 bee:	9b 84       	ldd	r9, Y+11	; 0x0b
 bf0:	aa 84       	ldd	r10, Y+10	; 0x0a
 bf2:	b9 84       	ldd	r11, Y+9	; 0x09
 bf4:	c8 84       	ldd	r12, Y+8	; 0x08
 bf6:	df 80       	ldd	r13, Y+7	; 0x07
 bf8:	ee 80       	ldd	r14, Y+6	; 0x06
 bfa:	fd 80       	ldd	r15, Y+5	; 0x05
 bfc:	0c 81       	ldd	r16, Y+4	; 0x04
 bfe:	1b 81       	ldd	r17, Y+3	; 0x03
 c00:	aa 81       	ldd	r26, Y+2	; 0x02
 c02:	b9 81       	ldd	r27, Y+1	; 0x01
 c04:	ce 0f       	add	r28, r30
 c06:	d1 1d       	adc	r29, r1
 c08:	0f b6       	in	r0, 0x3f	; 63
 c0a:	f8 94       	cli
 c0c:	de bf       	out	0x3e, r29	; 62
 c0e:	0f be       	out	0x3f, r0	; 63
 c10:	cd bf       	out	0x3d, r28	; 61
 c12:	ed 01       	movw	r28, r26
 c14:	08 95       	ret

00000c16 <_exit>:
 c16:	f8 94       	cli

00000c18 <__stop_program>:
 c18:	ff cf       	rjmp	.-2      	; 0xc18 <__stop_program>
