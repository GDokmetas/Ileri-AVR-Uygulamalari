
AVRADV15_DS3231LIBRARY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000c08  00000c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080011a  0080011a  00000cb6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b3  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a24  00000000  00000000  00002557  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be8  00000000  00000000  00002f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00003b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000642  00000000  00000000  00003e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ff8  00000000  00000000  000044b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000054ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_18>
  4c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 35       	cpi	r26, 0x5F	; 95
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bb 01 	call	0x376	; 0x376 <main>
  9e:	0c 94 02 06 	jmp	0xc04	; 0xc04 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <read_sec>:
	uint8_t data = (secx10 << 4) | (secx1);
	i2c_start(DS3231_ADDR+I2C_WRITE);
	i2c_write(0x00);
	i2c_write(data);
	i2c_stop();
}
  a6:	cf 93       	push	r28
  a8:	80 ed       	ldi	r24, 0xD0	; 208
  aa:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
  b4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
  b8:	81 ed       	ldi	r24, 0xD1	; 209
  ba:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
  be:	0e 94 78 02 	call	0x4f0	; 0x4f0 <i2c_readNak>
  c2:	c8 2f       	mov	r28, r24
  c4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
  c8:	8c 2f       	mov	r24, r28
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	c0 77       	andi	r28, 0x70	; 112
  ce:	c6 95       	lsr	r28
  d0:	c6 95       	lsr	r28
  d2:	c6 95       	lsr	r28
  d4:	9c 2f       	mov	r25, r28
  d6:	99 0f       	add	r25, r25
  d8:	99 0f       	add	r25, r25
  da:	c9 0f       	add	r28, r25
  dc:	8c 0f       	add	r24, r28
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <read_min>:
  e2:	cf 93       	push	r28
  e4:	80 ed       	ldi	r24, 0xD0	; 208
  e6:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
  f0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
  f4:	81 ed       	ldi	r24, 0xD1	; 209
  f6:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
  fa:	0e 94 78 02 	call	0x4f0	; 0x4f0 <i2c_readNak>
  fe:	c8 2f       	mov	r28, r24
 100:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
 104:	8c 2f       	mov	r24, r28
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	c0 77       	andi	r28, 0x70	; 112
 10a:	c6 95       	lsr	r28
 10c:	c6 95       	lsr	r28
 10e:	c6 95       	lsr	r28
 110:	9c 2f       	mov	r25, r28
 112:	99 0f       	add	r25, r25
 114:	99 0f       	add	r25, r25
 116:	c9 0f       	add	r28, r25
 118:	8c 0f       	add	r24, r28
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <read_hour>:
 11e:	cf 93       	push	r28
 120:	80 ed       	ldi	r24, 0xD0	; 208
 122:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
 12c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
 130:	81 ed       	ldi	r24, 0xD1	; 209
 132:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
 136:	0e 94 78 02 	call	0x4f0	; 0x4f0 <i2c_readNak>
 13a:	c8 2f       	mov	r28, r24
 13c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
 140:	8c 2f       	mov	r24, r28
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	c4 fb       	bst	r28, 4
 146:	99 27       	eor	r25, r25
 148:	90 f9       	bld	r25, 0
 14a:	99 0f       	add	r25, r25
 14c:	29 2f       	mov	r18, r25
 14e:	22 0f       	add	r18, r18
 150:	22 0f       	add	r18, r18
 152:	29 0f       	add	r18, r25
 154:	c5 fb       	bst	r28, 5
 156:	cc 27       	eor	r28, r28
 158:	c0 f9       	bld	r28, 0
 15a:	cc 0f       	add	r28, r28
 15c:	cc 0f       	add	r28, r28
 15e:	9c 2f       	mov	r25, r28
 160:	99 0f       	add	r25, r25
 162:	99 0f       	add	r25, r25
 164:	c9 0f       	add	r28, r25
 166:	c2 0f       	add	r28, r18
 168:	8c 0f       	add	r24, r28
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <write_min>:

void write_min(uint8_t min)
{
 16e:	cf 93       	push	r28
 170:	c8 2f       	mov	r28, r24
	uint8_t minx1 = min % 10;
	uint8_t minx10 = min / 10;
	uint8_t data = (minx10 << 4) | (minx1);
	i2c_start(DS3231_ADDR+I2C_WRITE);
 172:	80 ed       	ldi	r24, 0xD0	; 208
 174:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
	i2c_write(0x01);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_write(data);
 17e:	9d ec       	ldi	r25, 0xCD	; 205
 180:	c9 9f       	mul	r28, r25
 182:	91 2d       	mov	r25, r1
 184:	11 24       	eor	r1, r1
 186:	96 95       	lsr	r25
 188:	96 95       	lsr	r25
 18a:	96 95       	lsr	r25
 18c:	80 e1       	ldi	r24, 0x10	; 16
 18e:	98 9f       	mul	r25, r24
 190:	a0 01       	movw	r20, r0
 192:	11 24       	eor	r1, r1
 194:	99 0f       	add	r25, r25
 196:	29 2f       	mov	r18, r25
 198:	22 0f       	add	r18, r18
 19a:	22 0f       	add	r18, r18
 19c:	92 0f       	add	r25, r18
 19e:	8c 2f       	mov	r24, r28
 1a0:	89 1b       	sub	r24, r25
 1a2:	84 2b       	or	r24, r20
 1a4:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_stop();
 1a8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <write_hour>:

void write_hour(uint8_t hour)
{
 1b0:	cf 93       	push	r28

	uint8_t hourx1 = hour % 10;
 1b2:	2d ec       	ldi	r18, 0xCD	; 205
 1b4:	82 9f       	mul	r24, r18
 1b6:	21 2d       	mov	r18, r1
 1b8:	11 24       	eor	r1, r1
 1ba:	92 2f       	mov	r25, r18
 1bc:	96 95       	lsr	r25
 1be:	96 95       	lsr	r25
 1c0:	96 95       	lsr	r25
 1c2:	99 0f       	add	r25, r25
 1c4:	39 2f       	mov	r19, r25
 1c6:	33 0f       	add	r19, r19
 1c8:	33 0f       	add	r19, r19
 1ca:	93 0f       	add	r25, r19
 1cc:	89 1b       	sub	r24, r25
 1ce:	98 2f       	mov	r25, r24
	uint8_t data;
	if (hourx10 == 2)
	{
    data = (1<<5);
	}
	if(hourx10 == 1)
 1d0:	26 95       	lsr	r18
 1d2:	26 95       	lsr	r18
 1d4:	26 95       	lsr	r18
 1d6:	21 30       	cpi	r18, 0x01	; 1
 1d8:	11 f4       	brne	.+4      	; 0x1de <write_hour+0x2e>
	{
    data = (1<<4);
 1da:	c0 e1       	ldi	r28, 0x10	; 16
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <write_hour+0x30>
 1de:	c0 e2       	ldi	r28, 0x20	; 32
	}
	data |= hourx1;
 1e0:	c9 2b       	or	r28, r25
	i2c_start(DS3231_ADDR+I2C_WRITE);
 1e2:	80 ed       	ldi	r24, 0xD0	; 208
 1e4:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
	i2c_write(0x02);
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_write(data);
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_stop();
 1f4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
}
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <read_date>:

uint8_t read_date()
{
 1fc:	cf 93       	push	r28
	i2c_start(DS3231_ADDR+I2C_WRITE);
 1fe:	80 ed       	ldi	r24, 0xD0	; 208
 200:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
	i2c_write(0x04);
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_stop();
 20a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
	i2c_start(DS3231_ADDR+I2C_READ);
 20e:	81 ed       	ldi	r24, 0xD1	; 209
 210:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
	unsigned char data = i2c_readNak();
 214:	0e 94 78 02 	call	0x4f0	; 0x4f0 <i2c_readNak>
 218:	c8 2f       	mov	r28, r24
	i2c_stop();
 21a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
	unsigned char date = data & 0b00001111;
 21e:	8c 2f       	mov	r24, r28
 220:	8f 70       	andi	r24, 0x0F	; 15
	unsigned char datex10 = ((data & 0b01110000) >> 4);
	date += datex10 * 10;
	return date;
 222:	c0 77       	andi	r28, 0x70	; 112
 224:	c6 95       	lsr	r28
 226:	c6 95       	lsr	r28
 228:	c6 95       	lsr	r28
 22a:	9c 2f       	mov	r25, r28
 22c:	99 0f       	add	r25, r25
 22e:	99 0f       	add	r25, r25
 230:	c9 0f       	add	r28, r25
}
 232:	8c 0f       	add	r24, r28
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <read_month>:

uint8_t read_month()
{
 238:	cf 93       	push	r28
	i2c_start(DS3231_ADDR+I2C_WRITE);
 23a:	80 ed       	ldi	r24, 0xD0	; 208
 23c:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
	i2c_write(0x05);
 240:	85 e0       	ldi	r24, 0x05	; 5
 242:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_stop();
 246:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
	i2c_start(DS3231_ADDR+I2C_READ);
 24a:	81 ed       	ldi	r24, 0xD1	; 209
 24c:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
	unsigned char data = i2c_readNak();
 250:	0e 94 78 02 	call	0x4f0	; 0x4f0 <i2c_readNak>
 254:	c8 2f       	mov	r28, r24
	i2c_stop();
 256:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
	unsigned char month = data & 0b00001111;
 25a:	8c 2f       	mov	r24, r28
 25c:	8f 70       	andi	r24, 0x0F	; 15
	unsigned char monthx10 = ((data & 0b01110000) >> 4);
	month += monthx10 * 10;
	return month;
 25e:	c0 77       	andi	r28, 0x70	; 112
 260:	c6 95       	lsr	r28
 262:	c6 95       	lsr	r28
 264:	c6 95       	lsr	r28
 266:	9c 2f       	mov	r25, r28
 268:	99 0f       	add	r25, r25
 26a:	99 0f       	add	r25, r25
 26c:	c9 0f       	add	r28, r25
}
 26e:	8c 0f       	add	r24, r28
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <read_year>:

uint8_t read_year()
{
 274:	cf 93       	push	r28
	i2c_start(DS3231_ADDR+I2C_WRITE);
 276:	80 ed       	ldi	r24, 0xD0	; 208
 278:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
	i2c_write(0x06);
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_stop();
 282:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
	i2c_start(DS3231_ADDR+I2C_READ);
 286:	81 ed       	ldi	r24, 0xD1	; 209
 288:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
	unsigned char data = i2c_readNak();
 28c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <i2c_readNak>
 290:	c8 2f       	mov	r28, r24
	i2c_stop();
 292:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
	unsigned char year = data & 0b00001111;
 296:	8c 2f       	mov	r24, r28
 298:	8f 70       	andi	r24, 0x0F	; 15
	unsigned char yearx10 = ((data & 0b01110000) >> 4);
	year += yearx10 * 10;
	return year;
 29a:	c0 77       	andi	r28, 0x70	; 112
 29c:	c6 95       	lsr	r28
 29e:	c6 95       	lsr	r28
 2a0:	c6 95       	lsr	r28
 2a2:	9c 2f       	mov	r25, r28
 2a4:	99 0f       	add	r25, r25
 2a6:	99 0f       	add	r25, r25
 2a8:	c9 0f       	add	r28, r25
}
 2aa:	8c 0f       	add	r24, r28
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <write_date>:

void write_date(uint8_t date)
{
 2b0:	cf 93       	push	r28
 2b2:	c8 2f       	mov	r28, r24
	uint8_t datex1 = date % 10;
	uint8_t datex10 = date / 10;
	uint8_t data = (datex10 << 4) | (datex1);
	i2c_start(DS3231_ADDR+I2C_WRITE);
 2b4:	80 ed       	ldi	r24, 0xD0	; 208
 2b6:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
	i2c_write(0x04);
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_write(data);
 2c0:	9d ec       	ldi	r25, 0xCD	; 205
 2c2:	c9 9f       	mul	r28, r25
 2c4:	91 2d       	mov	r25, r1
 2c6:	11 24       	eor	r1, r1
 2c8:	96 95       	lsr	r25
 2ca:	96 95       	lsr	r25
 2cc:	96 95       	lsr	r25
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	98 9f       	mul	r25, r24
 2d2:	a0 01       	movw	r20, r0
 2d4:	11 24       	eor	r1, r1
 2d6:	99 0f       	add	r25, r25
 2d8:	29 2f       	mov	r18, r25
 2da:	22 0f       	add	r18, r18
 2dc:	22 0f       	add	r18, r18
 2de:	92 0f       	add	r25, r18
 2e0:	8c 2f       	mov	r24, r28
 2e2:	89 1b       	sub	r24, r25
 2e4:	84 2b       	or	r24, r20
 2e6:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_stop();
 2ea:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
}
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <write_month>:

void write_month(uint8_t month)
{
 2f2:	cf 93       	push	r28
 2f4:	c8 2f       	mov	r28, r24
	uint8_t monthx1 = month % 10;
	uint8_t monthx10 = month / 10;
	uint8_t data = (monthx10 << 4) | (monthx1);
	i2c_start(DS3231_ADDR+I2C_WRITE);
 2f6:	80 ed       	ldi	r24, 0xD0	; 208
 2f8:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
	i2c_write(0x05);
 2fc:	85 e0       	ldi	r24, 0x05	; 5
 2fe:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_write(data);
 302:	9d ec       	ldi	r25, 0xCD	; 205
 304:	c9 9f       	mul	r28, r25
 306:	91 2d       	mov	r25, r1
 308:	11 24       	eor	r1, r1
 30a:	96 95       	lsr	r25
 30c:	96 95       	lsr	r25
 30e:	96 95       	lsr	r25
 310:	80 e1       	ldi	r24, 0x10	; 16
 312:	98 9f       	mul	r25, r24
 314:	a0 01       	movw	r20, r0
 316:	11 24       	eor	r1, r1
 318:	99 0f       	add	r25, r25
 31a:	29 2f       	mov	r18, r25
 31c:	22 0f       	add	r18, r18
 31e:	22 0f       	add	r18, r18
 320:	92 0f       	add	r25, r18
 322:	8c 2f       	mov	r24, r28
 324:	89 1b       	sub	r24, r25
 326:	84 2b       	or	r24, r20
 328:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_stop();
 32c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
}
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <write_year>:

void write_year(uint8_t year)
{
 334:	cf 93       	push	r28
 336:	c8 2f       	mov	r28, r24
	uint8_t yearx1 = year % 10;
	uint8_t yearx10 = year / 10;
	uint8_t data = (yearx10 << 4) | (yearx1);
	i2c_start(DS3231_ADDR+I2C_WRITE);
 338:	80 ed       	ldi	r24, 0xD0	; 208
 33a:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_start>
	i2c_write(0x06);
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_write(data);
 344:	9d ec       	ldi	r25, 0xCD	; 205
 346:	c9 9f       	mul	r28, r25
 348:	91 2d       	mov	r25, r1
 34a:	11 24       	eor	r1, r1
 34c:	96 95       	lsr	r25
 34e:	96 95       	lsr	r25
 350:	96 95       	lsr	r25
 352:	80 e1       	ldi	r24, 0x10	; 16
 354:	98 9f       	mul	r25, r24
 356:	a0 01       	movw	r20, r0
 358:	11 24       	eor	r1, r1
 35a:	99 0f       	add	r25, r25
 35c:	29 2f       	mov	r18, r25
 35e:	22 0f       	add	r18, r18
 360:	22 0f       	add	r18, r18
 362:	92 0f       	add	r25, r18
 364:	8c 2f       	mov	r24, r28
 366:	89 1b       	sub	r24, r25
 368:	84 2b       	or	r24, r20
 36a:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_write>
	i2c_stop();
 36e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
}
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <main>:
#include "uart.h"
#include "i2cmaster.h"
#include "ds3231.h"
#include <stdio.h>
int main(void)
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	64 97       	sbiw	r28, 0x14	; 20
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	f8 94       	cli
 384:	de bf       	out	0x3e, r29	; 62
 386:	0f be       	out	0x3f, r0	; 63
 388:	cd bf       	out	0x3d, r28	; 61
    sei();
 38a:	78 94       	sei
    uart_init(UART_BAUD_SELECT(9600,F_CPU));
 38c:	87 e6       	ldi	r24, 0x67	; 103
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 394:	2f ef       	ldi	r18, 0xFF	; 255
 396:	81 ee       	ldi	r24, 0xE1	; 225
 398:	94 e0       	ldi	r25, 0x04	; 4
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	80 40       	sbci	r24, 0x00	; 0
 39e:	90 40       	sbci	r25, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <main+0x24>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <main+0x2e>
 3a4:	00 00       	nop
    _delay_ms(100);
    i2c_init();
 3a6:	0e 94 30 02 	call	0x460	; 0x460 <i2c_init>
	char buf[20];
	uint8_t sec = 0, min = 0, hour = 0;
	uint8_t date = 0, month = 0, year = 0;
	write_min(50);
 3aa:	82 e3       	ldi	r24, 0x32	; 50
 3ac:	0e 94 b7 00 	call	0x16e	; 0x16e <write_min>
	write_hour(20);
 3b0:	84 e1       	ldi	r24, 0x14	; 20
 3b2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <write_hour>
	write_date(6);
 3b6:	86 e0       	ldi	r24, 0x06	; 6
 3b8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <write_date>
	write_month(6);
 3bc:	86 e0       	ldi	r24, 0x06	; 6
 3be:	0e 94 79 01 	call	0x2f2	; 0x2f2 <write_month>
	write_year(6);
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	0e 94 9a 01 	call	0x334	; 0x334 <write_year>
    while (1) 
    {
	sec = read_sec();
	min = read_min();
	hour = read_hour();
	sprintf(buf, "%u:%u:%u \n", hour, min, sec);
 3c8:	0f 2e       	mov	r0, r31
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	cf 2e       	mov	r12, r31
 3ce:	f1 e0       	ldi	r31, 0x01	; 1
 3d0:	df 2e       	mov	r13, r31
 3d2:	f0 2d       	mov	r31, r0
 3d4:	8e 01       	movw	r16, r28
 3d6:	0f 5f       	subi	r16, 0xFF	; 255
 3d8:	1f 4f       	sbci	r17, 0xFF	; 255
	uart_puts(buf);
	date = read_date();
	month = read_month();
	year = read_year();
	sprintf(buf, "%u / %u / %u \n", date, month, year);
 3da:	0f 2e       	mov	r0, r31
 3dc:	fb e0       	ldi	r31, 0x0B	; 11
 3de:	ef 2e       	mov	r14, r31
 3e0:	f1 e0       	ldi	r31, 0x01	; 1
 3e2:	ff 2e       	mov	r15, r31
 3e4:	f0 2d       	mov	r31, r0
	write_date(6);
	write_month(6);
	write_year(6);
    while (1) 
    {
	sec = read_sec();
 3e6:	0e 94 53 00 	call	0xa6	; 0xa6 <read_sec>
 3ea:	a8 2e       	mov	r10, r24
	min = read_min();
 3ec:	0e 94 71 00 	call	0xe2	; 0xe2 <read_min>
 3f0:	b8 2e       	mov	r11, r24
	hour = read_hour();
 3f2:	0e 94 8f 00 	call	0x11e	; 0x11e <read_hour>
	sprintf(buf, "%u:%u:%u \n", hour, min, sec);
 3f6:	1f 92       	push	r1
 3f8:	af 92       	push	r10
 3fa:	1f 92       	push	r1
 3fc:	bf 92       	push	r11
 3fe:	1f 92       	push	r1
 400:	8f 93       	push	r24
 402:	df 92       	push	r13
 404:	cf 92       	push	r12
 406:	1f 93       	push	r17
 408:	0f 93       	push	r16
 40a:	0e 94 18 03 	call	0x630	; 0x630 <sprintf>
	uart_puts(buf);
 40e:	c8 01       	movw	r24, r16
 410:	0e 94 09 03 	call	0x612	; 0x612 <uart_puts>
	date = read_date();
 414:	0e 94 fe 00 	call	0x1fc	; 0x1fc <read_date>
 418:	b8 2e       	mov	r11, r24
	month = read_month();
 41a:	0e 94 1c 01 	call	0x238	; 0x238 <read_month>
 41e:	a8 2e       	mov	r10, r24
	year = read_year();
 420:	0e 94 3a 01 	call	0x274	; 0x274 <read_year>
	sprintf(buf, "%u / %u / %u \n", date, month, year);
 424:	1f 92       	push	r1
 426:	8f 93       	push	r24
 428:	1f 92       	push	r1
 42a:	af 92       	push	r10
 42c:	1f 92       	push	r1
 42e:	bf 92       	push	r11
 430:	ff 92       	push	r15
 432:	ef 92       	push	r14
 434:	1f 93       	push	r17
 436:	0f 93       	push	r16
 438:	0e 94 18 03 	call	0x630	; 0x630 <sprintf>
	uart_puts(buf);
 43c:	c8 01       	movw	r24, r16
 43e:	0e 94 09 03 	call	0x612	; 0x612 <uart_puts>
 442:	2f ef       	ldi	r18, 0xFF	; 255
 444:	85 ea       	ldi	r24, 0xA5	; 165
 446:	9e e0       	ldi	r25, 0x0E	; 14
 448:	21 50       	subi	r18, 0x01	; 1
 44a:	80 40       	sbci	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
 45e:	c3 cf       	rjmp	.-122    	; 0x3e6 <main+0x70>

00000460 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
 460:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 464:	88 e4       	ldi	r24, 0x48	; 72
 466:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 46a:	08 95       	ret

0000046c <i2c_start>:
 46c:	94 ea       	ldi	r25, 0xA4	; 164
 46e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 472:	ec eb       	ldi	r30, 0xBC	; 188
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	90 81       	ld	r25, Z
 478:	99 23       	and	r25, r25
 47a:	ec f7       	brge	.-6      	; 0x476 <i2c_start+0xa>
 47c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 480:	98 7f       	andi	r25, 0xF8	; 248
 482:	98 30       	cpi	r25, 0x08	; 8
 484:	11 f0       	breq	.+4      	; 0x48a <i2c_start+0x1e>
 486:	90 31       	cpi	r25, 0x10	; 16
 488:	a1 f4       	brne	.+40     	; 0x4b2 <i2c_start+0x46>
 48a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 48e:	84 e8       	ldi	r24, 0x84	; 132
 490:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 494:	ec eb       	ldi	r30, 0xBC	; 188
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	88 23       	and	r24, r24
 49c:	ec f7       	brge	.-6      	; 0x498 <i2c_start+0x2c>
 49e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4a2:	98 7f       	andi	r25, 0xF8	; 248
 4a4:	98 31       	cpi	r25, 0x18	; 24
 4a6:	39 f0       	breq	.+14     	; 0x4b6 <i2c_start+0x4a>
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 34       	cpi	r25, 0x40	; 64
 4ac:	29 f4       	brne	.+10     	; 0x4b8 <i2c_start+0x4c>
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	08 95       	ret
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	08 95       	ret
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	08 95       	ret

000004ba <i2c_stop>:
 4ba:	84 e9       	ldi	r24, 0x94	; 148
 4bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4c0:	ec eb       	ldi	r30, 0xBC	; 188
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	84 fd       	sbrc	r24, 4
 4c8:	fd cf       	rjmp	.-6      	; 0x4c4 <i2c_stop+0xa>
 4ca:	08 95       	ret

000004cc <i2c_write>:
 4cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 4d0:	84 e8       	ldi	r24, 0x84	; 132
 4d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4d6:	ec eb       	ldi	r30, 0xBC	; 188
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	88 23       	and	r24, r24
 4de:	ec f7       	brge	.-6      	; 0x4da <i2c_write+0xe>
 4e0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4e4:	98 7f       	andi	r25, 0xF8	; 248
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	98 32       	cpi	r25, 0x28	; 40
 4ea:	09 f4       	brne	.+2      	; 0x4ee <i2c_write+0x22>
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	08 95       	ret

000004f0 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 4f0:	84 e8       	ldi	r24, 0x84	; 132
 4f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 4f6:	ec eb       	ldi	r30, 0xBC	; 188
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	88 23       	and	r24, r24
 4fe:	ec f7       	brge	.-6      	; 0x4fa <i2c_readNak+0xa>
	
    return TWDR;
 500:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
 504:	08 95       	ret

00000506 <__vector_18>:
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	2f 93       	push	r18
 512:	8f 93       	push	r24
 514:	9f 93       	push	r25
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
 51a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 51e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 522:	8c 71       	andi	r24, 0x1C	; 28
 524:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <UART_RxHead>
 528:	ef 5f       	subi	r30, 0xFF	; 255
 52a:	ef 71       	andi	r30, 0x1F	; 31
 52c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <UART_RxTail>
 530:	e9 17       	cp	r30, r25
 532:	39 f0       	breq	.+14     	; 0x542 <__vector_18+0x3c>
 534:	e0 93 1c 01 	sts	0x011C, r30	; 0x80011c <UART_RxHead>
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	e1 5e       	subi	r30, 0xE1	; 225
 53c:	fe 4f       	sbci	r31, 0xFE	; 254
 53e:	20 83       	st	Z, r18
 540:	01 c0       	rjmp	.+2      	; 0x544 <__vector_18+0x3e>
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <__data_end>
 548:	89 2b       	or	r24, r25
 54a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <__vector_19>:
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	8f 93       	push	r24
 56e:	9f 93       	push	r25
 570:	ef 93       	push	r30
 572:	ff 93       	push	r31
 574:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <UART_TxHead>
 578:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <UART_TxTail>
 57c:	98 17       	cp	r25, r24
 57e:	69 f0       	breq	.+26     	; 0x59a <__vector_19+0x38>
 580:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <UART_TxTail>
 584:	ef 5f       	subi	r30, 0xFF	; 255
 586:	ef 71       	andi	r30, 0x1F	; 31
 588:	e0 93 1d 01 	sts	0x011D, r30	; 0x80011d <UART_TxTail>
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	e1 5c       	subi	r30, 0xC1	; 193
 590:	fe 4f       	sbci	r31, 0xFE	; 254
 592:	80 81       	ld	r24, Z
 594:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <__vector_19+0x42>
 59a:	e1 ec       	ldi	r30, 0xC1	; 193
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	8f 7d       	andi	r24, 0xDF	; 223
 5a2:	80 83       	st	Z, r24
 5a4:	ff 91       	pop	r31
 5a6:	ef 91       	pop	r30
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <uart_init>:
 5b6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <UART_TxHead>
 5ba:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <UART_TxTail>
 5be:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <UART_RxHead>
 5c2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <UART_RxTail>
 5c6:	99 23       	and	r25, r25
 5c8:	1c f4       	brge	.+6      	; 0x5d0 <uart_init+0x1a>
 5ca:	22 e0       	ldi	r18, 0x02	; 2
 5cc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5d0:	90 78       	andi	r25, 0x80	; 128
 5d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 5d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 5da:	88 e9       	ldi	r24, 0x98	; 152
 5dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 5e0:	86 e0       	ldi	r24, 0x06	; 6
 5e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 5e6:	08 95       	ret

000005e8 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 5e8:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <UART_TxHead>
 5ec:	2f 5f       	subi	r18, 0xFF	; 255
 5ee:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 5f0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <UART_TxTail>
 5f4:	29 17       	cp	r18, r25
 5f6:	e1 f3       	breq	.-8      	; 0x5f0 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 5f8:	e2 2f       	mov	r30, r18
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	e1 5c       	subi	r30, 0xC1	; 193
 5fe:	fe 4f       	sbci	r31, 0xFE	; 254
 600:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 602:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 606:	e1 ec       	ldi	r30, 0xC1	; 193
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	80 62       	ori	r24, 0x20	; 32
 60e:	80 83       	st	Z, r24
 610:	08 95       	ret

00000612 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	ec 01       	movw	r28, r24
    while (*s) 
 618:	88 81       	ld	r24, Y
 61a:	88 23       	and	r24, r24
 61c:	31 f0       	breq	.+12     	; 0x62a <uart_puts+0x18>
 61e:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 620:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 624:	89 91       	ld	r24, Y+
 626:	81 11       	cpse	r24, r1
 628:	fb cf       	rjmp	.-10     	; 0x620 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <sprintf>:
 630:	ae e0       	ldi	r26, 0x0E	; 14
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	ee e1       	ldi	r30, 0x1E	; 30
 636:	f3 e0       	ldi	r31, 0x03	; 3
 638:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__prologue_saves__+0x1c>
 63c:	0d 89       	ldd	r16, Y+21	; 0x15
 63e:	1e 89       	ldd	r17, Y+22	; 0x16
 640:	86 e0       	ldi	r24, 0x06	; 6
 642:	8c 83       	std	Y+4, r24	; 0x04
 644:	1a 83       	std	Y+2, r17	; 0x02
 646:	09 83       	std	Y+1, r16	; 0x01
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	9f e7       	ldi	r25, 0x7F	; 127
 64c:	9e 83       	std	Y+6, r25	; 0x06
 64e:	8d 83       	std	Y+5, r24	; 0x05
 650:	ae 01       	movw	r20, r28
 652:	47 5e       	subi	r20, 0xE7	; 231
 654:	5f 4f       	sbci	r21, 0xFF	; 255
 656:	6f 89       	ldd	r22, Y+23	; 0x17
 658:	78 8d       	ldd	r23, Y+24	; 0x18
 65a:	ce 01       	movw	r24, r28
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	0e 94 3a 03 	call	0x674	; 0x674 <vfprintf>
 662:	ef 81       	ldd	r30, Y+7	; 0x07
 664:	f8 85       	ldd	r31, Y+8	; 0x08
 666:	e0 0f       	add	r30, r16
 668:	f1 1f       	adc	r31, r17
 66a:	10 82       	st	Z, r1
 66c:	2e 96       	adiw	r28, 0x0e	; 14
 66e:	e4 e0       	ldi	r30, 0x04	; 4
 670:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__epilogue_restores__+0x1c>

00000674 <vfprintf>:
 674:	ab e0       	ldi	r26, 0x0B	; 11
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	e0 e4       	ldi	r30, 0x40	; 64
 67a:	f3 e0       	ldi	r31, 0x03	; 3
 67c:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__prologue_saves__>
 680:	6c 01       	movw	r12, r24
 682:	7b 01       	movw	r14, r22
 684:	8a 01       	movw	r16, r20
 686:	fc 01       	movw	r30, r24
 688:	17 82       	std	Z+7, r1	; 0x07
 68a:	16 82       	std	Z+6, r1	; 0x06
 68c:	83 81       	ldd	r24, Z+3	; 0x03
 68e:	81 ff       	sbrs	r24, 1
 690:	cc c1       	rjmp	.+920    	; 0xa2a <__stack+0x12b>
 692:	ce 01       	movw	r24, r28
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	3c 01       	movw	r6, r24
 698:	f6 01       	movw	r30, r12
 69a:	93 81       	ldd	r25, Z+3	; 0x03
 69c:	f7 01       	movw	r30, r14
 69e:	93 fd       	sbrc	r25, 3
 6a0:	85 91       	lpm	r24, Z+
 6a2:	93 ff       	sbrs	r25, 3
 6a4:	81 91       	ld	r24, Z+
 6a6:	7f 01       	movw	r14, r30
 6a8:	88 23       	and	r24, r24
 6aa:	09 f4       	brne	.+2      	; 0x6ae <vfprintf+0x3a>
 6ac:	ba c1       	rjmp	.+884    	; 0xa22 <__stack+0x123>
 6ae:	85 32       	cpi	r24, 0x25	; 37
 6b0:	39 f4       	brne	.+14     	; 0x6c0 <vfprintf+0x4c>
 6b2:	93 fd       	sbrc	r25, 3
 6b4:	85 91       	lpm	r24, Z+
 6b6:	93 ff       	sbrs	r25, 3
 6b8:	81 91       	ld	r24, Z+
 6ba:	7f 01       	movw	r14, r30
 6bc:	85 32       	cpi	r24, 0x25	; 37
 6be:	29 f4       	brne	.+10     	; 0x6ca <vfprintf+0x56>
 6c0:	b6 01       	movw	r22, r12
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 31 05 	call	0xa62	; 0xa62 <fputc>
 6c8:	e7 cf       	rjmp	.-50     	; 0x698 <vfprintf+0x24>
 6ca:	91 2c       	mov	r9, r1
 6cc:	21 2c       	mov	r2, r1
 6ce:	31 2c       	mov	r3, r1
 6d0:	ff e1       	ldi	r31, 0x1F	; 31
 6d2:	f3 15       	cp	r31, r3
 6d4:	d8 f0       	brcs	.+54     	; 0x70c <vfprintf+0x98>
 6d6:	8b 32       	cpi	r24, 0x2B	; 43
 6d8:	79 f0       	breq	.+30     	; 0x6f8 <vfprintf+0x84>
 6da:	38 f4       	brcc	.+14     	; 0x6ea <vfprintf+0x76>
 6dc:	80 32       	cpi	r24, 0x20	; 32
 6de:	79 f0       	breq	.+30     	; 0x6fe <vfprintf+0x8a>
 6e0:	83 32       	cpi	r24, 0x23	; 35
 6e2:	a1 f4       	brne	.+40     	; 0x70c <vfprintf+0x98>
 6e4:	23 2d       	mov	r18, r3
 6e6:	20 61       	ori	r18, 0x10	; 16
 6e8:	1d c0       	rjmp	.+58     	; 0x724 <vfprintf+0xb0>
 6ea:	8d 32       	cpi	r24, 0x2D	; 45
 6ec:	61 f0       	breq	.+24     	; 0x706 <vfprintf+0x92>
 6ee:	80 33       	cpi	r24, 0x30	; 48
 6f0:	69 f4       	brne	.+26     	; 0x70c <vfprintf+0x98>
 6f2:	23 2d       	mov	r18, r3
 6f4:	21 60       	ori	r18, 0x01	; 1
 6f6:	16 c0       	rjmp	.+44     	; 0x724 <vfprintf+0xb0>
 6f8:	83 2d       	mov	r24, r3
 6fa:	82 60       	ori	r24, 0x02	; 2
 6fc:	38 2e       	mov	r3, r24
 6fe:	e3 2d       	mov	r30, r3
 700:	e4 60       	ori	r30, 0x04	; 4
 702:	3e 2e       	mov	r3, r30
 704:	2a c0       	rjmp	.+84     	; 0x75a <vfprintf+0xe6>
 706:	f3 2d       	mov	r31, r3
 708:	f8 60       	ori	r31, 0x08	; 8
 70a:	1d c0       	rjmp	.+58     	; 0x746 <vfprintf+0xd2>
 70c:	37 fc       	sbrc	r3, 7
 70e:	2d c0       	rjmp	.+90     	; 0x76a <vfprintf+0xf6>
 710:	20 ed       	ldi	r18, 0xD0	; 208
 712:	28 0f       	add	r18, r24
 714:	2a 30       	cpi	r18, 0x0A	; 10
 716:	40 f0       	brcs	.+16     	; 0x728 <vfprintf+0xb4>
 718:	8e 32       	cpi	r24, 0x2E	; 46
 71a:	b9 f4       	brne	.+46     	; 0x74a <vfprintf+0xd6>
 71c:	36 fc       	sbrc	r3, 6
 71e:	81 c1       	rjmp	.+770    	; 0xa22 <__stack+0x123>
 720:	23 2d       	mov	r18, r3
 722:	20 64       	ori	r18, 0x40	; 64
 724:	32 2e       	mov	r3, r18
 726:	19 c0       	rjmp	.+50     	; 0x75a <vfprintf+0xe6>
 728:	36 fe       	sbrs	r3, 6
 72a:	06 c0       	rjmp	.+12     	; 0x738 <vfprintf+0xc4>
 72c:	8a e0       	ldi	r24, 0x0A	; 10
 72e:	98 9e       	mul	r9, r24
 730:	20 0d       	add	r18, r0
 732:	11 24       	eor	r1, r1
 734:	92 2e       	mov	r9, r18
 736:	11 c0       	rjmp	.+34     	; 0x75a <vfprintf+0xe6>
 738:	ea e0       	ldi	r30, 0x0A	; 10
 73a:	2e 9e       	mul	r2, r30
 73c:	20 0d       	add	r18, r0
 73e:	11 24       	eor	r1, r1
 740:	22 2e       	mov	r2, r18
 742:	f3 2d       	mov	r31, r3
 744:	f0 62       	ori	r31, 0x20	; 32
 746:	3f 2e       	mov	r3, r31
 748:	08 c0       	rjmp	.+16     	; 0x75a <vfprintf+0xe6>
 74a:	8c 36       	cpi	r24, 0x6C	; 108
 74c:	21 f4       	brne	.+8      	; 0x756 <vfprintf+0xe2>
 74e:	83 2d       	mov	r24, r3
 750:	80 68       	ori	r24, 0x80	; 128
 752:	38 2e       	mov	r3, r24
 754:	02 c0       	rjmp	.+4      	; 0x75a <vfprintf+0xe6>
 756:	88 36       	cpi	r24, 0x68	; 104
 758:	41 f4       	brne	.+16     	; 0x76a <vfprintf+0xf6>
 75a:	f7 01       	movw	r30, r14
 75c:	93 fd       	sbrc	r25, 3
 75e:	85 91       	lpm	r24, Z+
 760:	93 ff       	sbrs	r25, 3
 762:	81 91       	ld	r24, Z+
 764:	7f 01       	movw	r14, r30
 766:	81 11       	cpse	r24, r1
 768:	b3 cf       	rjmp	.-154    	; 0x6d0 <vfprintf+0x5c>
 76a:	98 2f       	mov	r25, r24
 76c:	9f 7d       	andi	r25, 0xDF	; 223
 76e:	95 54       	subi	r25, 0x45	; 69
 770:	93 30       	cpi	r25, 0x03	; 3
 772:	28 f4       	brcc	.+10     	; 0x77e <vfprintf+0x10a>
 774:	0c 5f       	subi	r16, 0xFC	; 252
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	9f e3       	ldi	r25, 0x3F	; 63
 77a:	99 83       	std	Y+1, r25	; 0x01
 77c:	0d c0       	rjmp	.+26     	; 0x798 <vfprintf+0x124>
 77e:	83 36       	cpi	r24, 0x63	; 99
 780:	31 f0       	breq	.+12     	; 0x78e <vfprintf+0x11a>
 782:	83 37       	cpi	r24, 0x73	; 115
 784:	71 f0       	breq	.+28     	; 0x7a2 <vfprintf+0x12e>
 786:	83 35       	cpi	r24, 0x53	; 83
 788:	09 f0       	breq	.+2      	; 0x78c <vfprintf+0x118>
 78a:	59 c0       	rjmp	.+178    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 78c:	21 c0       	rjmp	.+66     	; 0x7d0 <vfprintf+0x15c>
 78e:	f8 01       	movw	r30, r16
 790:	80 81       	ld	r24, Z
 792:	89 83       	std	Y+1, r24	; 0x01
 794:	0e 5f       	subi	r16, 0xFE	; 254
 796:	1f 4f       	sbci	r17, 0xFF	; 255
 798:	88 24       	eor	r8, r8
 79a:	83 94       	inc	r8
 79c:	91 2c       	mov	r9, r1
 79e:	53 01       	movw	r10, r6
 7a0:	13 c0       	rjmp	.+38     	; 0x7c8 <vfprintf+0x154>
 7a2:	28 01       	movw	r4, r16
 7a4:	f2 e0       	ldi	r31, 0x02	; 2
 7a6:	4f 0e       	add	r4, r31
 7a8:	51 1c       	adc	r5, r1
 7aa:	f8 01       	movw	r30, r16
 7ac:	a0 80       	ld	r10, Z
 7ae:	b1 80       	ldd	r11, Z+1	; 0x01
 7b0:	36 fe       	sbrs	r3, 6
 7b2:	03 c0       	rjmp	.+6      	; 0x7ba <vfprintf+0x146>
 7b4:	69 2d       	mov	r22, r9
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <vfprintf+0x14a>
 7ba:	6f ef       	ldi	r22, 0xFF	; 255
 7bc:	7f ef       	ldi	r23, 0xFF	; 255
 7be:	c5 01       	movw	r24, r10
 7c0:	0e 94 26 05 	call	0xa4c	; 0xa4c <strnlen>
 7c4:	4c 01       	movw	r8, r24
 7c6:	82 01       	movw	r16, r4
 7c8:	f3 2d       	mov	r31, r3
 7ca:	ff 77       	andi	r31, 0x7F	; 127
 7cc:	3f 2e       	mov	r3, r31
 7ce:	16 c0       	rjmp	.+44     	; 0x7fc <vfprintf+0x188>
 7d0:	28 01       	movw	r4, r16
 7d2:	22 e0       	ldi	r18, 0x02	; 2
 7d4:	42 0e       	add	r4, r18
 7d6:	51 1c       	adc	r5, r1
 7d8:	f8 01       	movw	r30, r16
 7da:	a0 80       	ld	r10, Z
 7dc:	b1 80       	ldd	r11, Z+1	; 0x01
 7de:	36 fe       	sbrs	r3, 6
 7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <vfprintf+0x174>
 7e2:	69 2d       	mov	r22, r9
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <vfprintf+0x178>
 7e8:	6f ef       	ldi	r22, 0xFF	; 255
 7ea:	7f ef       	ldi	r23, 0xFF	; 255
 7ec:	c5 01       	movw	r24, r10
 7ee:	0e 94 1b 05 	call	0xa36	; 0xa36 <strnlen_P>
 7f2:	4c 01       	movw	r8, r24
 7f4:	f3 2d       	mov	r31, r3
 7f6:	f0 68       	ori	r31, 0x80	; 128
 7f8:	3f 2e       	mov	r3, r31
 7fa:	82 01       	movw	r16, r4
 7fc:	33 fc       	sbrc	r3, 3
 7fe:	1b c0       	rjmp	.+54     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 800:	82 2d       	mov	r24, r2
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	88 16       	cp	r8, r24
 806:	99 06       	cpc	r9, r25
 808:	b0 f4       	brcc	.+44     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 80a:	b6 01       	movw	r22, r12
 80c:	80 e2       	ldi	r24, 0x20	; 32
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 31 05 	call	0xa62	; 0xa62 <fputc>
 814:	2a 94       	dec	r2
 816:	f4 cf       	rjmp	.-24     	; 0x800 <__DATA_REGION_LENGTH__>
 818:	f5 01       	movw	r30, r10
 81a:	37 fc       	sbrc	r3, 7
 81c:	85 91       	lpm	r24, Z+
 81e:	37 fe       	sbrs	r3, 7
 820:	81 91       	ld	r24, Z+
 822:	5f 01       	movw	r10, r30
 824:	b6 01       	movw	r22, r12
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 31 05 	call	0xa62	; 0xa62 <fputc>
 82c:	21 10       	cpse	r2, r1
 82e:	2a 94       	dec	r2
 830:	21 e0       	ldi	r18, 0x01	; 1
 832:	82 1a       	sub	r8, r18
 834:	91 08       	sbc	r9, r1
 836:	81 14       	cp	r8, r1
 838:	91 04       	cpc	r9, r1
 83a:	71 f7       	brne	.-36     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 83c:	e8 c0       	rjmp	.+464    	; 0xa0e <__stack+0x10f>
 83e:	84 36       	cpi	r24, 0x64	; 100
 840:	11 f0       	breq	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	89 36       	cpi	r24, 0x69	; 105
 844:	41 f5       	brne	.+80     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 846:	f8 01       	movw	r30, r16
 848:	37 fe       	sbrs	r3, 7
 84a:	07 c0       	rjmp	.+14     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 84c:	60 81       	ld	r22, Z
 84e:	71 81       	ldd	r23, Z+1	; 0x01
 850:	82 81       	ldd	r24, Z+2	; 0x02
 852:	93 81       	ldd	r25, Z+3	; 0x03
 854:	0c 5f       	subi	r16, 0xFC	; 252
 856:	1f 4f       	sbci	r17, 0xFF	; 255
 858:	08 c0       	rjmp	.+16     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 85a:	60 81       	ld	r22, Z
 85c:	71 81       	ldd	r23, Z+1	; 0x01
 85e:	07 2e       	mov	r0, r23
 860:	00 0c       	add	r0, r0
 862:	88 0b       	sbc	r24, r24
 864:	99 0b       	sbc	r25, r25
 866:	0e 5f       	subi	r16, 0xFE	; 254
 868:	1f 4f       	sbci	r17, 0xFF	; 255
 86a:	f3 2d       	mov	r31, r3
 86c:	ff 76       	andi	r31, 0x6F	; 111
 86e:	3f 2e       	mov	r3, r31
 870:	97 ff       	sbrs	r25, 7
 872:	09 c0       	rjmp	.+18     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 874:	90 95       	com	r25
 876:	80 95       	com	r24
 878:	70 95       	com	r23
 87a:	61 95       	neg	r22
 87c:	7f 4f       	sbci	r23, 0xFF	; 255
 87e:	8f 4f       	sbci	r24, 0xFF	; 255
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	f0 68       	ori	r31, 0x80	; 128
 884:	3f 2e       	mov	r3, r31
 886:	2a e0       	ldi	r18, 0x0A	; 10
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	a3 01       	movw	r20, r6
 88c:	0e 94 6d 05 	call	0xada	; 0xada <__ultoa_invert>
 890:	88 2e       	mov	r8, r24
 892:	86 18       	sub	r8, r6
 894:	45 c0       	rjmp	.+138    	; 0x920 <__stack+0x21>
 896:	85 37       	cpi	r24, 0x75	; 117
 898:	31 f4       	brne	.+12     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 89a:	23 2d       	mov	r18, r3
 89c:	2f 7e       	andi	r18, 0xEF	; 239
 89e:	b2 2e       	mov	r11, r18
 8a0:	2a e0       	ldi	r18, 0x0A	; 10
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	25 c0       	rjmp	.+74     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 8a6:	93 2d       	mov	r25, r3
 8a8:	99 7f       	andi	r25, 0xF9	; 249
 8aa:	b9 2e       	mov	r11, r25
 8ac:	8f 36       	cpi	r24, 0x6F	; 111
 8ae:	c1 f0       	breq	.+48     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8b0:	18 f4       	brcc	.+6      	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 8b2:	88 35       	cpi	r24, 0x58	; 88
 8b4:	79 f0       	breq	.+30     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8b6:	b5 c0       	rjmp	.+362    	; 0xa22 <__stack+0x123>
 8b8:	80 37       	cpi	r24, 0x70	; 112
 8ba:	19 f0       	breq	.+6      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8bc:	88 37       	cpi	r24, 0x78	; 120
 8be:	21 f0       	breq	.+8      	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8c0:	b0 c0       	rjmp	.+352    	; 0xa22 <__stack+0x123>
 8c2:	e9 2f       	mov	r30, r25
 8c4:	e0 61       	ori	r30, 0x10	; 16
 8c6:	be 2e       	mov	r11, r30
 8c8:	b4 fe       	sbrs	r11, 4
 8ca:	0d c0       	rjmp	.+26     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8cc:	fb 2d       	mov	r31, r11
 8ce:	f4 60       	ori	r31, 0x04	; 4
 8d0:	bf 2e       	mov	r11, r31
 8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8d4:	34 fe       	sbrs	r3, 4
 8d6:	0a c0       	rjmp	.+20     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8d8:	29 2f       	mov	r18, r25
 8da:	26 60       	ori	r18, 0x06	; 6
 8dc:	b2 2e       	mov	r11, r18
 8de:	06 c0       	rjmp	.+12     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8e0:	28 e0       	ldi	r18, 0x08	; 8
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 8e6:	20 e1       	ldi	r18, 0x10	; 16
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 8ec:	20 e1       	ldi	r18, 0x10	; 16
 8ee:	32 e0       	ldi	r19, 0x02	; 2
 8f0:	f8 01       	movw	r30, r16
 8f2:	b7 fe       	sbrs	r11, 7
 8f4:	07 c0       	rjmp	.+14     	; 0x904 <__stack+0x5>
 8f6:	60 81       	ld	r22, Z
 8f8:	71 81       	ldd	r23, Z+1	; 0x01
 8fa:	82 81       	ldd	r24, Z+2	; 0x02
 8fc:	93 81       	ldd	r25, Z+3	; 0x03
 8fe:	0c 5f       	subi	r16, 0xFC	; 252
 900:	1f 4f       	sbci	r17, 0xFF	; 255
 902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0x11>
 904:	60 81       	ld	r22, Z
 906:	71 81       	ldd	r23, Z+1	; 0x01
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 5f       	subi	r16, 0xFE	; 254
 90e:	1f 4f       	sbci	r17, 0xFF	; 255
 910:	a3 01       	movw	r20, r6
 912:	0e 94 6d 05 	call	0xada	; 0xada <__ultoa_invert>
 916:	88 2e       	mov	r8, r24
 918:	86 18       	sub	r8, r6
 91a:	fb 2d       	mov	r31, r11
 91c:	ff 77       	andi	r31, 0x7F	; 127
 91e:	3f 2e       	mov	r3, r31
 920:	36 fe       	sbrs	r3, 6
 922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0x3f>
 924:	23 2d       	mov	r18, r3
 926:	2e 7f       	andi	r18, 0xFE	; 254
 928:	a2 2e       	mov	r10, r18
 92a:	89 14       	cp	r8, r9
 92c:	58 f4       	brcc	.+22     	; 0x944 <__stack+0x45>
 92e:	34 fe       	sbrs	r3, 4
 930:	0b c0       	rjmp	.+22     	; 0x948 <__stack+0x49>
 932:	32 fc       	sbrc	r3, 2
 934:	09 c0       	rjmp	.+18     	; 0x948 <__stack+0x49>
 936:	83 2d       	mov	r24, r3
 938:	8e 7e       	andi	r24, 0xEE	; 238
 93a:	a8 2e       	mov	r10, r24
 93c:	05 c0       	rjmp	.+10     	; 0x948 <__stack+0x49>
 93e:	b8 2c       	mov	r11, r8
 940:	a3 2c       	mov	r10, r3
 942:	03 c0       	rjmp	.+6      	; 0x94a <__stack+0x4b>
 944:	b8 2c       	mov	r11, r8
 946:	01 c0       	rjmp	.+2      	; 0x94a <__stack+0x4b>
 948:	b9 2c       	mov	r11, r9
 94a:	a4 fe       	sbrs	r10, 4
 94c:	0f c0       	rjmp	.+30     	; 0x96c <__stack+0x6d>
 94e:	fe 01       	movw	r30, r28
 950:	e8 0d       	add	r30, r8
 952:	f1 1d       	adc	r31, r1
 954:	80 81       	ld	r24, Z
 956:	80 33       	cpi	r24, 0x30	; 48
 958:	21 f4       	brne	.+8      	; 0x962 <__stack+0x63>
 95a:	9a 2d       	mov	r25, r10
 95c:	99 7e       	andi	r25, 0xE9	; 233
 95e:	a9 2e       	mov	r10, r25
 960:	09 c0       	rjmp	.+18     	; 0x974 <__stack+0x75>
 962:	a2 fe       	sbrs	r10, 2
 964:	06 c0       	rjmp	.+12     	; 0x972 <__stack+0x73>
 966:	b3 94       	inc	r11
 968:	b3 94       	inc	r11
 96a:	04 c0       	rjmp	.+8      	; 0x974 <__stack+0x75>
 96c:	8a 2d       	mov	r24, r10
 96e:	86 78       	andi	r24, 0x86	; 134
 970:	09 f0       	breq	.+2      	; 0x974 <__stack+0x75>
 972:	b3 94       	inc	r11
 974:	a3 fc       	sbrc	r10, 3
 976:	11 c0       	rjmp	.+34     	; 0x99a <__stack+0x9b>
 978:	a0 fe       	sbrs	r10, 0
 97a:	06 c0       	rjmp	.+12     	; 0x988 <__stack+0x89>
 97c:	b2 14       	cp	r11, r2
 97e:	88 f4       	brcc	.+34     	; 0x9a2 <__stack+0xa3>
 980:	28 0c       	add	r2, r8
 982:	92 2c       	mov	r9, r2
 984:	9b 18       	sub	r9, r11
 986:	0e c0       	rjmp	.+28     	; 0x9a4 <__stack+0xa5>
 988:	b2 14       	cp	r11, r2
 98a:	60 f4       	brcc	.+24     	; 0x9a4 <__stack+0xa5>
 98c:	b6 01       	movw	r22, r12
 98e:	80 e2       	ldi	r24, 0x20	; 32
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 31 05 	call	0xa62	; 0xa62 <fputc>
 996:	b3 94       	inc	r11
 998:	f7 cf       	rjmp	.-18     	; 0x988 <__stack+0x89>
 99a:	b2 14       	cp	r11, r2
 99c:	18 f4       	brcc	.+6      	; 0x9a4 <__stack+0xa5>
 99e:	2b 18       	sub	r2, r11
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0xa7>
 9a2:	98 2c       	mov	r9, r8
 9a4:	21 2c       	mov	r2, r1
 9a6:	a4 fe       	sbrs	r10, 4
 9a8:	10 c0       	rjmp	.+32     	; 0x9ca <__stack+0xcb>
 9aa:	b6 01       	movw	r22, r12
 9ac:	80 e3       	ldi	r24, 0x30	; 48
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 31 05 	call	0xa62	; 0xa62 <fputc>
 9b4:	a2 fe       	sbrs	r10, 2
 9b6:	17 c0       	rjmp	.+46     	; 0x9e6 <__stack+0xe7>
 9b8:	a1 fc       	sbrc	r10, 1
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <__stack+0xc3>
 9bc:	88 e7       	ldi	r24, 0x78	; 120
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <__stack+0xc7>
 9c2:	88 e5       	ldi	r24, 0x58	; 88
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	b6 01       	movw	r22, r12
 9c8:	0c c0       	rjmp	.+24     	; 0x9e2 <__stack+0xe3>
 9ca:	8a 2d       	mov	r24, r10
 9cc:	86 78       	andi	r24, 0x86	; 134
 9ce:	59 f0       	breq	.+22     	; 0x9e6 <__stack+0xe7>
 9d0:	a1 fe       	sbrs	r10, 1
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <__stack+0xd9>
 9d4:	8b e2       	ldi	r24, 0x2B	; 43
 9d6:	01 c0       	rjmp	.+2      	; 0x9da <__stack+0xdb>
 9d8:	80 e2       	ldi	r24, 0x20	; 32
 9da:	a7 fc       	sbrc	r10, 7
 9dc:	8d e2       	ldi	r24, 0x2D	; 45
 9de:	b6 01       	movw	r22, r12
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	0e 94 31 05 	call	0xa62	; 0xa62 <fputc>
 9e6:	89 14       	cp	r8, r9
 9e8:	38 f4       	brcc	.+14     	; 0x9f8 <__stack+0xf9>
 9ea:	b6 01       	movw	r22, r12
 9ec:	80 e3       	ldi	r24, 0x30	; 48
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e 94 31 05 	call	0xa62	; 0xa62 <fputc>
 9f4:	9a 94       	dec	r9
 9f6:	f7 cf       	rjmp	.-18     	; 0x9e6 <__stack+0xe7>
 9f8:	8a 94       	dec	r8
 9fa:	f3 01       	movw	r30, r6
 9fc:	e8 0d       	add	r30, r8
 9fe:	f1 1d       	adc	r31, r1
 a00:	80 81       	ld	r24, Z
 a02:	b6 01       	movw	r22, r12
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 31 05 	call	0xa62	; 0xa62 <fputc>
 a0a:	81 10       	cpse	r8, r1
 a0c:	f5 cf       	rjmp	.-22     	; 0x9f8 <__stack+0xf9>
 a0e:	22 20       	and	r2, r2
 a10:	09 f4       	brne	.+2      	; 0xa14 <__stack+0x115>
 a12:	42 ce       	rjmp	.-892    	; 0x698 <vfprintf+0x24>
 a14:	b6 01       	movw	r22, r12
 a16:	80 e2       	ldi	r24, 0x20	; 32
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 31 05 	call	0xa62	; 0xa62 <fputc>
 a1e:	2a 94       	dec	r2
 a20:	f6 cf       	rjmp	.-20     	; 0xa0e <__stack+0x10f>
 a22:	f6 01       	movw	r30, r12
 a24:	86 81       	ldd	r24, Z+6	; 0x06
 a26:	97 81       	ldd	r25, Z+7	; 0x07
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <__stack+0x12f>
 a2a:	8f ef       	ldi	r24, 0xFF	; 255
 a2c:	9f ef       	ldi	r25, 0xFF	; 255
 a2e:	2b 96       	adiw	r28, 0x0b	; 11
 a30:	e2 e1       	ldi	r30, 0x12	; 18
 a32:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__epilogue_restores__>

00000a36 <strnlen_P>:
 a36:	fc 01       	movw	r30, r24
 a38:	05 90       	lpm	r0, Z+
 a3a:	61 50       	subi	r22, 0x01	; 1
 a3c:	70 40       	sbci	r23, 0x00	; 0
 a3e:	01 10       	cpse	r0, r1
 a40:	d8 f7       	brcc	.-10     	; 0xa38 <strnlen_P+0x2>
 a42:	80 95       	com	r24
 a44:	90 95       	com	r25
 a46:	8e 0f       	add	r24, r30
 a48:	9f 1f       	adc	r25, r31
 a4a:	08 95       	ret

00000a4c <strnlen>:
 a4c:	fc 01       	movw	r30, r24
 a4e:	61 50       	subi	r22, 0x01	; 1
 a50:	70 40       	sbci	r23, 0x00	; 0
 a52:	01 90       	ld	r0, Z+
 a54:	01 10       	cpse	r0, r1
 a56:	d8 f7       	brcc	.-10     	; 0xa4e <strnlen+0x2>
 a58:	80 95       	com	r24
 a5a:	90 95       	com	r25
 a5c:	8e 0f       	add	r24, r30
 a5e:	9f 1f       	adc	r25, r31
 a60:	08 95       	ret

00000a62 <fputc>:
 a62:	0f 93       	push	r16
 a64:	1f 93       	push	r17
 a66:	cf 93       	push	r28
 a68:	df 93       	push	r29
 a6a:	fb 01       	movw	r30, r22
 a6c:	23 81       	ldd	r18, Z+3	; 0x03
 a6e:	21 fd       	sbrc	r18, 1
 a70:	03 c0       	rjmp	.+6      	; 0xa78 <fputc+0x16>
 a72:	8f ef       	ldi	r24, 0xFF	; 255
 a74:	9f ef       	ldi	r25, 0xFF	; 255
 a76:	2c c0       	rjmp	.+88     	; 0xad0 <fputc+0x6e>
 a78:	22 ff       	sbrs	r18, 2
 a7a:	16 c0       	rjmp	.+44     	; 0xaa8 <fputc+0x46>
 a7c:	46 81       	ldd	r20, Z+6	; 0x06
 a7e:	57 81       	ldd	r21, Z+7	; 0x07
 a80:	24 81       	ldd	r18, Z+4	; 0x04
 a82:	35 81       	ldd	r19, Z+5	; 0x05
 a84:	42 17       	cp	r20, r18
 a86:	53 07       	cpc	r21, r19
 a88:	44 f4       	brge	.+16     	; 0xa9a <fputc+0x38>
 a8a:	a0 81       	ld	r26, Z
 a8c:	b1 81       	ldd	r27, Z+1	; 0x01
 a8e:	9d 01       	movw	r18, r26
 a90:	2f 5f       	subi	r18, 0xFF	; 255
 a92:	3f 4f       	sbci	r19, 0xFF	; 255
 a94:	31 83       	std	Z+1, r19	; 0x01
 a96:	20 83       	st	Z, r18
 a98:	8c 93       	st	X, r24
 a9a:	26 81       	ldd	r18, Z+6	; 0x06
 a9c:	37 81       	ldd	r19, Z+7	; 0x07
 a9e:	2f 5f       	subi	r18, 0xFF	; 255
 aa0:	3f 4f       	sbci	r19, 0xFF	; 255
 aa2:	37 83       	std	Z+7, r19	; 0x07
 aa4:	26 83       	std	Z+6, r18	; 0x06
 aa6:	14 c0       	rjmp	.+40     	; 0xad0 <fputc+0x6e>
 aa8:	8b 01       	movw	r16, r22
 aaa:	ec 01       	movw	r28, r24
 aac:	fb 01       	movw	r30, r22
 aae:	00 84       	ldd	r0, Z+8	; 0x08
 ab0:	f1 85       	ldd	r31, Z+9	; 0x09
 ab2:	e0 2d       	mov	r30, r0
 ab4:	09 95       	icall
 ab6:	89 2b       	or	r24, r25
 ab8:	e1 f6       	brne	.-72     	; 0xa72 <fputc+0x10>
 aba:	d8 01       	movw	r26, r16
 abc:	16 96       	adiw	r26, 0x06	; 6
 abe:	8d 91       	ld	r24, X+
 ac0:	9c 91       	ld	r25, X
 ac2:	17 97       	sbiw	r26, 0x07	; 7
 ac4:	01 96       	adiw	r24, 0x01	; 1
 ac6:	17 96       	adiw	r26, 0x07	; 7
 ac8:	9c 93       	st	X, r25
 aca:	8e 93       	st	-X, r24
 acc:	16 97       	sbiw	r26, 0x06	; 6
 ace:	ce 01       	movw	r24, r28
 ad0:	df 91       	pop	r29
 ad2:	cf 91       	pop	r28
 ad4:	1f 91       	pop	r17
 ad6:	0f 91       	pop	r16
 ad8:	08 95       	ret

00000ada <__ultoa_invert>:
 ada:	fa 01       	movw	r30, r20
 adc:	aa 27       	eor	r26, r26
 ade:	28 30       	cpi	r18, 0x08	; 8
 ae0:	51 f1       	breq	.+84     	; 0xb36 <__ultoa_invert+0x5c>
 ae2:	20 31       	cpi	r18, 0x10	; 16
 ae4:	81 f1       	breq	.+96     	; 0xb46 <__ultoa_invert+0x6c>
 ae6:	e8 94       	clt
 ae8:	6f 93       	push	r22
 aea:	6e 7f       	andi	r22, 0xFE	; 254
 aec:	6e 5f       	subi	r22, 0xFE	; 254
 aee:	7f 4f       	sbci	r23, 0xFF	; 255
 af0:	8f 4f       	sbci	r24, 0xFF	; 255
 af2:	9f 4f       	sbci	r25, 0xFF	; 255
 af4:	af 4f       	sbci	r26, 0xFF	; 255
 af6:	b1 e0       	ldi	r27, 0x01	; 1
 af8:	3e d0       	rcall	.+124    	; 0xb76 <__ultoa_invert+0x9c>
 afa:	b4 e0       	ldi	r27, 0x04	; 4
 afc:	3c d0       	rcall	.+120    	; 0xb76 <__ultoa_invert+0x9c>
 afe:	67 0f       	add	r22, r23
 b00:	78 1f       	adc	r23, r24
 b02:	89 1f       	adc	r24, r25
 b04:	9a 1f       	adc	r25, r26
 b06:	a1 1d       	adc	r26, r1
 b08:	68 0f       	add	r22, r24
 b0a:	79 1f       	adc	r23, r25
 b0c:	8a 1f       	adc	r24, r26
 b0e:	91 1d       	adc	r25, r1
 b10:	a1 1d       	adc	r26, r1
 b12:	6a 0f       	add	r22, r26
 b14:	71 1d       	adc	r23, r1
 b16:	81 1d       	adc	r24, r1
 b18:	91 1d       	adc	r25, r1
 b1a:	a1 1d       	adc	r26, r1
 b1c:	20 d0       	rcall	.+64     	; 0xb5e <__ultoa_invert+0x84>
 b1e:	09 f4       	brne	.+2      	; 0xb22 <__ultoa_invert+0x48>
 b20:	68 94       	set
 b22:	3f 91       	pop	r19
 b24:	2a e0       	ldi	r18, 0x0A	; 10
 b26:	26 9f       	mul	r18, r22
 b28:	11 24       	eor	r1, r1
 b2a:	30 19       	sub	r19, r0
 b2c:	30 5d       	subi	r19, 0xD0	; 208
 b2e:	31 93       	st	Z+, r19
 b30:	de f6       	brtc	.-74     	; 0xae8 <__ultoa_invert+0xe>
 b32:	cf 01       	movw	r24, r30
 b34:	08 95       	ret
 b36:	46 2f       	mov	r20, r22
 b38:	47 70       	andi	r20, 0x07	; 7
 b3a:	40 5d       	subi	r20, 0xD0	; 208
 b3c:	41 93       	st	Z+, r20
 b3e:	b3 e0       	ldi	r27, 0x03	; 3
 b40:	0f d0       	rcall	.+30     	; 0xb60 <__ultoa_invert+0x86>
 b42:	c9 f7       	brne	.-14     	; 0xb36 <__ultoa_invert+0x5c>
 b44:	f6 cf       	rjmp	.-20     	; 0xb32 <__ultoa_invert+0x58>
 b46:	46 2f       	mov	r20, r22
 b48:	4f 70       	andi	r20, 0x0F	; 15
 b4a:	40 5d       	subi	r20, 0xD0	; 208
 b4c:	4a 33       	cpi	r20, 0x3A	; 58
 b4e:	18 f0       	brcs	.+6      	; 0xb56 <__ultoa_invert+0x7c>
 b50:	49 5d       	subi	r20, 0xD9	; 217
 b52:	31 fd       	sbrc	r19, 1
 b54:	40 52       	subi	r20, 0x20	; 32
 b56:	41 93       	st	Z+, r20
 b58:	02 d0       	rcall	.+4      	; 0xb5e <__ultoa_invert+0x84>
 b5a:	a9 f7       	brne	.-22     	; 0xb46 <__ultoa_invert+0x6c>
 b5c:	ea cf       	rjmp	.-44     	; 0xb32 <__ultoa_invert+0x58>
 b5e:	b4 e0       	ldi	r27, 0x04	; 4
 b60:	a6 95       	lsr	r26
 b62:	97 95       	ror	r25
 b64:	87 95       	ror	r24
 b66:	77 95       	ror	r23
 b68:	67 95       	ror	r22
 b6a:	ba 95       	dec	r27
 b6c:	c9 f7       	brne	.-14     	; 0xb60 <__ultoa_invert+0x86>
 b6e:	00 97       	sbiw	r24, 0x00	; 0
 b70:	61 05       	cpc	r22, r1
 b72:	71 05       	cpc	r23, r1
 b74:	08 95       	ret
 b76:	9b 01       	movw	r18, r22
 b78:	ac 01       	movw	r20, r24
 b7a:	0a 2e       	mov	r0, r26
 b7c:	06 94       	lsr	r0
 b7e:	57 95       	ror	r21
 b80:	47 95       	ror	r20
 b82:	37 95       	ror	r19
 b84:	27 95       	ror	r18
 b86:	ba 95       	dec	r27
 b88:	c9 f7       	brne	.-14     	; 0xb7c <__ultoa_invert+0xa2>
 b8a:	62 0f       	add	r22, r18
 b8c:	73 1f       	adc	r23, r19
 b8e:	84 1f       	adc	r24, r20
 b90:	95 1f       	adc	r25, r21
 b92:	a0 1d       	adc	r26, r0
 b94:	08 95       	ret

00000b96 <__prologue_saves__>:
 b96:	2f 92       	push	r2
 b98:	3f 92       	push	r3
 b9a:	4f 92       	push	r4
 b9c:	5f 92       	push	r5
 b9e:	6f 92       	push	r6
 ba0:	7f 92       	push	r7
 ba2:	8f 92       	push	r8
 ba4:	9f 92       	push	r9
 ba6:	af 92       	push	r10
 ba8:	bf 92       	push	r11
 baa:	cf 92       	push	r12
 bac:	df 92       	push	r13
 bae:	ef 92       	push	r14
 bb0:	ff 92       	push	r15
 bb2:	0f 93       	push	r16
 bb4:	1f 93       	push	r17
 bb6:	cf 93       	push	r28
 bb8:	df 93       	push	r29
 bba:	cd b7       	in	r28, 0x3d	; 61
 bbc:	de b7       	in	r29, 0x3e	; 62
 bbe:	ca 1b       	sub	r28, r26
 bc0:	db 0b       	sbc	r29, r27
 bc2:	0f b6       	in	r0, 0x3f	; 63
 bc4:	f8 94       	cli
 bc6:	de bf       	out	0x3e, r29	; 62
 bc8:	0f be       	out	0x3f, r0	; 63
 bca:	cd bf       	out	0x3d, r28	; 61
 bcc:	09 94       	ijmp

00000bce <__epilogue_restores__>:
 bce:	2a 88       	ldd	r2, Y+18	; 0x12
 bd0:	39 88       	ldd	r3, Y+17	; 0x11
 bd2:	48 88       	ldd	r4, Y+16	; 0x10
 bd4:	5f 84       	ldd	r5, Y+15	; 0x0f
 bd6:	6e 84       	ldd	r6, Y+14	; 0x0e
 bd8:	7d 84       	ldd	r7, Y+13	; 0x0d
 bda:	8c 84       	ldd	r8, Y+12	; 0x0c
 bdc:	9b 84       	ldd	r9, Y+11	; 0x0b
 bde:	aa 84       	ldd	r10, Y+10	; 0x0a
 be0:	b9 84       	ldd	r11, Y+9	; 0x09
 be2:	c8 84       	ldd	r12, Y+8	; 0x08
 be4:	df 80       	ldd	r13, Y+7	; 0x07
 be6:	ee 80       	ldd	r14, Y+6	; 0x06
 be8:	fd 80       	ldd	r15, Y+5	; 0x05
 bea:	0c 81       	ldd	r16, Y+4	; 0x04
 bec:	1b 81       	ldd	r17, Y+3	; 0x03
 bee:	aa 81       	ldd	r26, Y+2	; 0x02
 bf0:	b9 81       	ldd	r27, Y+1	; 0x01
 bf2:	ce 0f       	add	r28, r30
 bf4:	d1 1d       	adc	r29, r1
 bf6:	0f b6       	in	r0, 0x3f	; 63
 bf8:	f8 94       	cli
 bfa:	de bf       	out	0x3e, r29	; 62
 bfc:	0f be       	out	0x3f, r0	; 63
 bfe:	cd bf       	out	0x3d, r28	; 61
 c00:	ed 01       	movw	r28, r26
 c02:	08 95       	ret

00000c04 <_exit>:
 c04:	f8 94       	cli

00000c06 <__stop_program>:
 c06:	ff cf       	rjmp	.-2      	; 0xc06 <__stop_program>
