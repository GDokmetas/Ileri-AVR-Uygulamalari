
AVDADV22_MAX7219LUXMETRE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fe9  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009bd  00000000  00000000  00001851  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000896  00000000  00000000  0000220e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000505  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006cf  00000000  00000000  0000319d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000386c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  78:	0c 94 4f 03 	jmp	0x69e	; 0x69e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <bh1750_oku>:
		_delay_ms(200);
    }
}

uint32_t bh1750_oku()
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
	uint8_t bh1750_addr = (0x23 << 1);
	i2c_rep_start(bh1750_addr+I2C_WRITE);
  84:	86 e4       	ldi	r24, 0x46	; 70
  86:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_rep_start>
	i2c_write(0x10);
  8a:	80 e1       	ldi	r24, 0x10	; 16
  8c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
	i2c_stop();
  90:	0e 94 cd 01 	call	0x39a	; 0x39a <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f e3       	ldi	r24, 0x3F	; 63
  96:	9c e9       	ldi	r25, 0x9C	; 156
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <bh1750_oku+0x18>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <bh1750_oku+0x1e>
  9e:	00 00       	nop
	_delay_ms(10);
	i2c_rep_start(bh1750_addr+I2C_WRITE);
  a0:	86 e4       	ldi	r24, 0x46	; 70
  a2:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_rep_start>
	i2c_write(0x10);
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
	i2c_stop();
  ac:	0e 94 cd 01 	call	0x39a	; 0x39a <i2c_stop>
  b0:	9f ef       	ldi	r25, 0xFF	; 255
  b2:	23 ec       	ldi	r18, 0xC3	; 195
  b4:	89 e0       	ldi	r24, 0x09	; 9
  b6:	91 50       	subi	r25, 0x01	; 1
  b8:	20 40       	sbci	r18, 0x00	; 0
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <bh1750_oku+0x36>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <bh1750_oku+0x40>
  c0:	00 00       	nop
	_delay_ms(200);
	i2c_start_wait(bh1750_addr+I2C_READ);
  c2:	87 e4       	ldi	r24, 0x47	; 71
  c4:	0e 94 a2 01 	call	0x344	; 0x344 <i2c_start_wait>
	uint16_t okuma = 0;
	okuma = i2c_readAck();
  c8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <i2c_readAck>
  cc:	c8 2f       	mov	r28, r24
  ce:	d0 e0       	ldi	r29, 0x00	; 0
	okuma <<= 8;
  d0:	dc 2f       	mov	r29, r28
  d2:	cc 27       	eor	r28, r28
	okuma |= i2c_readNak();
  d4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_readNak>
	float lux  = okuma / 1.2F;
	return (uint32_t)lux;
  d8:	be 01       	movw	r22, r28
  da:	68 2b       	or	r22, r24
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 9f 02 	call	0x53e	; 0x53e <__floatunsisf>
  e4:	2a e9       	ldi	r18, 0x9A	; 154
  e6:	39 e9       	ldi	r19, 0x99	; 153
  e8:	49 e9       	ldi	r20, 0x99	; 153
  ea:	5f e3       	ldi	r21, 0x3F	; 63
  ec:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__divsf3>
  f0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fixunssfsi>
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <main>:
#include <inttypes.h>
#include <util/delay.h>
uint32_t bh1750_oku();
int main(void)
{
    i2c_init();
  fa:	0e 94 75 01 	call	0x2ea	; 0x2ea <i2c_init>
	max_init();
  fe:	0e 94 a4 00 	call	0x148	; 0x148 <max_init>
    while (1) 
    {
		max_show32bit(bh1750_oku());
 102:	0e 94 40 00 	call	0x80	; 0x80 <bh1750_oku>
 106:	0e 94 ba 00 	call	0x174	; 0x174 <max_show32bit>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	83 ec       	ldi	r24, 0xC3	; 195
 10e:	99 e0       	ldi	r25, 0x09	; 9
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x16>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x20>
 11a:	00 00       	nop
 11c:	f2 cf       	rjmp	.-28     	; 0x102 <main+0x8>

0000011e <max_send_byte>:
	} while (--i);
}

void max_digit(uint8_t digit, uint8_t value)
{
	max_send_byte(digit, value);
 11e:	cf 93       	push	r28
 120:	c6 2f       	mov	r28, r22
 122:	2a 98       	cbi	0x05, 2	; 5
 124:	0e 94 6f 01 	call	0x2de	; 0x2de <spi_transceive>
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 6f 01 	call	0x2de	; 0x2de <spi_transceive>
 12e:	2a 9a       	sbi	0x05, 2	; 5
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <max_clear_display>:
 134:	cf 93       	push	r28
 136:	c8 e0       	ldi	r28, 0x08	; 8
 138:	6f e0       	ldi	r22, 0x0F	; 15
 13a:	8c 2f       	mov	r24, r28
 13c:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 140:	c1 50       	subi	r28, 0x01	; 1
 142:	d1 f7       	brne	.-12     	; 0x138 <max_clear_display+0x4>
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <max_init>:
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <spi_init>
 14e:	6f ef       	ldi	r22, 0xFF	; 255
 150:	89 e0       	ldi	r24, 0x09	; 9
 152:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 156:	67 e0       	ldi	r22, 0x07	; 7
 158:	8b e0       	ldi	r24, 0x0B	; 11
 15a:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	8a e0       	ldi	r24, 0x0A	; 10
 162:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 16e:	0e 94 9a 00 	call	0x134	; 0x134 <max_clear_display>
 172:	08 95       	ret

00000174 <max_show32bit>:
}

void max_show32bit(uint32_t number)
{
 174:	4f 92       	push	r4
 176:	5f 92       	push	r5
 178:	6f 92       	push	r6
 17a:	7f 92       	push	r7
 17c:	8f 92       	push	r8
 17e:	9f 92       	push	r9
 180:	af 92       	push	r10
 182:	bf 92       	push	r11
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	4b 01       	movw	r8, r22
 18e:	5c 01       	movw	r10, r24
	max_clear_display();
 190:	0e 94 9a 00 	call	0x134	; 0x134 <max_clear_display>
	} while (--i);
}

void max_digit(uint8_t digit, uint8_t value)
{
	max_send_byte(digit, value);
 194:	0f 2e       	mov	r0, r31
 196:	fa e0       	ldi	r31, 0x0A	; 10
 198:	cf 2e       	mov	r12, r31
 19a:	d1 2c       	mov	r13, r1
 19c:	e1 2c       	mov	r14, r1
 19e:	f1 2c       	mov	r15, r1
 1a0:	f0 2d       	mov	r31, r0
 1a2:	c5 01       	movw	r24, r10
 1a4:	b4 01       	movw	r22, r8
 1a6:	a7 01       	movw	r20, r14
 1a8:	96 01       	movw	r18, r12
 1aa:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 1ae:	29 01       	movw	r4, r18
 1b0:	3a 01       	movw	r6, r20
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 1b8:	c3 01       	movw	r24, r6
 1ba:	b2 01       	movw	r22, r4
 1bc:	a7 01       	movw	r20, r14
 1be:	96 01       	movw	r18, r12
 1c0:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 1ca:	c5 01       	movw	r24, r10
 1cc:	b4 01       	movw	r22, r8
 1ce:	24 e6       	ldi	r18, 0x64	; 100
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 1da:	ca 01       	movw	r24, r20
 1dc:	b9 01       	movw	r22, r18
 1de:	a7 01       	movw	r20, r14
 1e0:	96 01       	movw	r18, r12
 1e2:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 1ec:	c5 01       	movw	r24, r10
 1ee:	b4 01       	movw	r22, r8
 1f0:	28 ee       	ldi	r18, 0xE8	; 232
 1f2:	33 e0       	ldi	r19, 0x03	; 3
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 1fc:	ca 01       	movw	r24, r20
 1fe:	b9 01       	movw	r22, r18
 200:	a7 01       	movw	r20, r14
 202:	96 01       	movw	r18, r12
 204:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 20e:	c5 01       	movw	r24, r10
 210:	b4 01       	movw	r22, r8
 212:	20 e1       	ldi	r18, 0x10	; 16
 214:	37 e2       	ldi	r19, 0x27	; 39
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 21e:	ca 01       	movw	r24, r20
 220:	b9 01       	movw	r22, r18
 222:	a7 01       	movw	r20, r14
 224:	96 01       	movw	r18, r12
 226:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 22a:	85 e0       	ldi	r24, 0x05	; 5
 22c:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 230:	c5 01       	movw	r24, r10
 232:	b4 01       	movw	r22, r8
 234:	20 ea       	ldi	r18, 0xA0	; 160
 236:	36 e8       	ldi	r19, 0x86	; 134
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 240:	ca 01       	movw	r24, r20
 242:	b9 01       	movw	r22, r18
 244:	a7 01       	movw	r20, r14
 246:	96 01       	movw	r18, r12
 248:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 252:	c5 01       	movw	r24, r10
 254:	b4 01       	movw	r22, r8
 256:	20 e4       	ldi	r18, 0x40	; 64
 258:	32 e4       	ldi	r19, 0x42	; 66
 25a:	4f e0       	ldi	r20, 0x0F	; 15
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 262:	ca 01       	movw	r24, r20
 264:	b9 01       	movw	r22, r18
 266:	a7 01       	movw	r20, r14
 268:	96 01       	movw	r18, r12
 26a:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 26e:	87 e0       	ldi	r24, 0x07	; 7
 270:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
 274:	c5 01       	movw	r24, r10
 276:	b4 01       	movw	r22, r8
 278:	20 e8       	ldi	r18, 0x80	; 128
 27a:	36 e9       	ldi	r19, 0x96	; 150
 27c:	48 e9       	ldi	r20, 0x98	; 152
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 284:	ca 01       	movw	r24, r20
 286:	b9 01       	movw	r22, r18
 288:	a7 01       	movw	r20, r14
 28a:	96 01       	movw	r18, r12
 28c:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 290:	88 e0       	ldi	r24, 0x08	; 8
 292:	0e 94 8f 00 	call	0x11e	; 0x11e <max_send_byte>
	max_digit(4, (number / 1000) % 10);
	max_digit(5, (number / 10000) % 10);
	max_digit(6, (number / 100000) % 10);
	max_digit(7, (number / 1000000) % 10);
	max_digit(8, (number / 10000000) % 10);
}
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	df 90       	pop	r13
 29c:	cf 90       	pop	r12
 29e:	bf 90       	pop	r11
 2a0:	af 90       	pop	r10
 2a2:	9f 90       	pop	r9
 2a4:	8f 90       	pop	r8
 2a6:	7f 90       	pop	r7
 2a8:	6f 90       	pop	r6
 2aa:	5f 90       	pop	r5
 2ac:	4f 90       	pop	r4
 2ae:	08 95       	ret

000002b0 <spi_init>:

void spi_init(uint8_t mode)
{
	if (SPI_DATA_ORDER == MSB_FIRST)
	{
		SPCR &= ~(1<<DORD);
 2b0:	9c b5       	in	r25, 0x2c	; 44
 2b2:	9f 7d       	andi	r25, 0xDF	; 223
 2b4:	9c bd       	out	0x2c, r25	; 44
	}
	else
	{
		SPCR |= (1<<DORD);
	}
	if(mode == SLAVE)
 2b6:	81 11       	cpse	r24, r1
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <spi_init+0x12>
	{
			// MISO OUTPUT, OTHERS INPUT
			DDRB |= (1<<DDD4);
 2ba:	24 9a       	sbi	0x04, 4	; 4
			/* Enable SPI */
			SPCR = (1<<SPE);
 2bc:	80 e4       	ldi	r24, 0x40	; 64
 2be:	8c bd       	out	0x2c, r24	; 44
 2c0:	08 95       	ret
	}
	else
	{
			// MOSI , SCK OUTPUT
			DDRB |= (1<<DDB3)|(1<<DDB5);
 2c2:	84 b1       	in	r24, 0x04	; 4
 2c4:	88 62       	ori	r24, 0x28	; 40
 2c6:	84 b9       	out	0x04, r24	; 4
			DDRB |= (1<<DDB2); //SS OUTPUT
 2c8:	22 9a       	sbi	0x04, 2	; 4
			/*SPI Enable, Master Mod */
			SPCR |= ((1<<SPE)|(1<<MSTR));
 2ca:	8c b5       	in	r24, 0x2c	; 44
 2cc:	80 65       	ori	r24, 0x50	; 80
 2ce:	8c bd       	out	0x2c, r24	; 44
			SPCR |= (SPI_CLOCK_RATE); 
 2d0:	8c b5       	in	r24, 0x2c	; 44
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (SPI_SPEED);
 2d6:	8d b5       	in	r24, 0x2d	; 45
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	8d bd       	out	0x2d, r24	; 45
 2dc:	08 95       	ret

000002de <spi_transceive>:
}

uint8_t spi_transceive(uint8_t data)
{
	/* Send data */
	SPDR = data;
 2de:	8e bd       	out	0x2e, r24	; 46
	/* wait for end of transmission */
	while(!(SPSR & (1<<SPIF)))
 2e0:	0d b4       	in	r0, 0x2d	; 45
 2e2:	07 fe       	sbrs	r0, 7
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <spi_transceive+0x2>
	;
	return SPDR;
 2e6:	8e b5       	in	r24, 0x2e	; 46
}
 2e8:	08 95       	ret

000002ea <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 2ea:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 2ee:	88 e4       	ldi	r24, 0x48	; 72
 2f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 2f4:	08 95       	ret

000002f6 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 2f6:	94 ea       	ldi	r25, 0xA4	; 164
 2f8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 2fc:	ec eb       	ldi	r30, 0xBC	; 188
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	90 81       	ld	r25, Z
 302:	99 23       	and	r25, r25
 304:	ec f7       	brge	.-6      	; 0x300 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 306:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 30a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 30c:	98 30       	cpi	r25, 0x08	; 8
 30e:	11 f0       	breq	.+4      	; 0x314 <i2c_start+0x1e>
 310:	90 31       	cpi	r25, 0x10	; 16
 312:	a1 f4       	brne	.+40     	; 0x33c <i2c_start+0x46>

	// send device address
	TWDR = address;
 314:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 318:	84 e8       	ldi	r24, 0x84	; 132
 31a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 31e:	ec eb       	ldi	r30, 0xBC	; 188
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	88 23       	and	r24, r24
 326:	ec f7       	brge	.-6      	; 0x322 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 328:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 32c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 32e:	98 31       	cpi	r25, 0x18	; 24
 330:	39 f0       	breq	.+14     	; 0x340 <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 34       	cpi	r25, 0x40	; 64
 336:	29 f4       	brne	.+10     	; 0x342 <i2c_start+0x4c>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 340:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 342:	08 95       	ret

00000344 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 348:	ec eb       	ldi	r30, 0xBC	; 188
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 34e:	a9 eb       	ldi	r26, 0xB9	; 185
 350:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
 352:	cb eb       	ldi	r28, 0xBB	; 187
 354:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 356:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 358:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 35a:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 35c:	90 81       	ld	r25, Z
 35e:	99 23       	and	r25, r25
 360:	ec f7       	brge	.-6      	; 0x35c <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 362:	9c 91       	ld	r25, X
 364:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 366:	98 30       	cpi	r25, 0x08	; 8
 368:	11 f0       	breq	.+4      	; 0x36e <i2c_start_wait+0x2a>
 36a:	90 31       	cpi	r25, 0x10	; 16
 36c:	b1 f7       	brne	.-20     	; 0x35a <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
 36e:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 370:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 372:	90 81       	ld	r25, Z
 374:	99 23       	and	r25, r25
 376:	ec f7       	brge	.-6      	; 0x372 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 378:	9c 91       	ld	r25, X
 37a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 37c:	90 32       	cpi	r25, 0x20	; 32
 37e:	11 f0       	breq	.+4      	; 0x384 <i2c_start_wait+0x40>
 380:	98 35       	cpi	r25, 0x58	; 88
 382:	29 f4       	brne	.+10     	; 0x38e <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 384:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 386:	90 81       	ld	r25, Z
 388:	94 fd       	sbrc	r25, 4
 38a:	fd cf       	rjmp	.-6      	; 0x386 <i2c_start_wait+0x42>
 38c:	e6 cf       	rjmp	.-52     	; 0x35a <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 394:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c_start>

}/* i2c_rep_start */
 398:	08 95       	ret

0000039a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 39a:	84 e9       	ldi	r24, 0x94	; 148
 39c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 3a0:	ec eb       	ldi	r30, 0xBC	; 188
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	84 fd       	sbrc	r24, 4
 3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <i2c_stop+0xa>

}/* i2c_stop */
 3aa:	08 95       	ret

000003ac <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 3ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 3b0:	84 e8       	ldi	r24, 0x84	; 132
 3b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 3b6:	ec eb       	ldi	r30, 0xBC	; 188
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	88 23       	and	r24, r24
 3be:	ec f7       	brge	.-6      	; 0x3ba <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 3c0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3c4:	98 7f       	andi	r25, 0xF8	; 248
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	98 32       	cpi	r25, 0x28	; 40
 3ca:	09 f4       	brne	.+2      	; 0x3ce <i2c_write+0x22>
 3cc:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 3ce:	08 95       	ret

000003d0 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 3d0:	84 ec       	ldi	r24, 0xC4	; 196
 3d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
 3d6:	ec eb       	ldi	r30, 0xBC	; 188
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	88 23       	and	r24, r24
 3de:	ec f7       	brge	.-6      	; 0x3da <i2c_readAck+0xa>

    return TWDR;
 3e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
 3e4:	08 95       	ret

000003e6 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 3e6:	84 e8       	ldi	r24, 0x84	; 132
 3e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 3ec:	ec eb       	ldi	r30, 0xBC	; 188
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	88 23       	and	r24, r24
 3f4:	ec f7       	brge	.-6      	; 0x3f0 <i2c_readNak+0xa>
	
    return TWDR;
 3f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
 3fa:	08 95       	ret

000003fc <__divsf3>:
 3fc:	0e 94 12 02 	call	0x424	; 0x424 <__divsf3x>
 400:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__fp_round>
 404:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__fp_pscB>
 408:	58 f0       	brcs	.+22     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 40a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fp_pscA>
 40e:	40 f0       	brcs	.+16     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 410:	29 f4       	brne	.+10     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 412:	5f 3f       	cpi	r21, 0xFF	; 255
 414:	29 f0       	breq	.+10     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 416:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__fp_inf>
 41a:	51 11       	cpse	r21, r1
 41c:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_szero>
 420:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__fp_nan>

00000424 <__divsf3x>:
 424:	0e 94 04 03 	call	0x608	; 0x608 <__fp_split3>
 428:	68 f3       	brcs	.-38     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>

0000042a <__divsf3_pse>:
 42a:	99 23       	and	r25, r25
 42c:	b1 f3       	breq	.-20     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 42e:	55 23       	and	r21, r21
 430:	91 f3       	breq	.-28     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 432:	95 1b       	sub	r25, r21
 434:	55 0b       	sbc	r21, r21
 436:	bb 27       	eor	r27, r27
 438:	aa 27       	eor	r26, r26
 43a:	62 17       	cp	r22, r18
 43c:	73 07       	cpc	r23, r19
 43e:	84 07       	cpc	r24, r20
 440:	38 f0       	brcs	.+14     	; 0x450 <__divsf3_pse+0x26>
 442:	9f 5f       	subi	r25, 0xFF	; 255
 444:	5f 4f       	sbci	r21, 0xFF	; 255
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	44 1f       	adc	r20, r20
 44c:	aa 1f       	adc	r26, r26
 44e:	a9 f3       	breq	.-22     	; 0x43a <__divsf3_pse+0x10>
 450:	35 d0       	rcall	.+106    	; 0x4bc <__divsf3_pse+0x92>
 452:	0e 2e       	mov	r0, r30
 454:	3a f0       	brmi	.+14     	; 0x464 <__divsf3_pse+0x3a>
 456:	e0 e8       	ldi	r30, 0x80	; 128
 458:	32 d0       	rcall	.+100    	; 0x4be <__divsf3_pse+0x94>
 45a:	91 50       	subi	r25, 0x01	; 1
 45c:	50 40       	sbci	r21, 0x00	; 0
 45e:	e6 95       	lsr	r30
 460:	00 1c       	adc	r0, r0
 462:	ca f7       	brpl	.-14     	; 0x456 <__divsf3_pse+0x2c>
 464:	2b d0       	rcall	.+86     	; 0x4bc <__divsf3_pse+0x92>
 466:	fe 2f       	mov	r31, r30
 468:	29 d0       	rcall	.+82     	; 0x4bc <__divsf3_pse+0x92>
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	bb 1f       	adc	r27, r27
 472:	26 17       	cp	r18, r22
 474:	37 07       	cpc	r19, r23
 476:	48 07       	cpc	r20, r24
 478:	ab 07       	cpc	r26, r27
 47a:	b0 e8       	ldi	r27, 0x80	; 128
 47c:	09 f0       	breq	.+2      	; 0x480 <__divsf3_pse+0x56>
 47e:	bb 0b       	sbc	r27, r27
 480:	80 2d       	mov	r24, r0
 482:	bf 01       	movw	r22, r30
 484:	ff 27       	eor	r31, r31
 486:	93 58       	subi	r25, 0x83	; 131
 488:	5f 4f       	sbci	r21, 0xFF	; 255
 48a:	3a f0       	brmi	.+14     	; 0x49a <__divsf3_pse+0x70>
 48c:	9e 3f       	cpi	r25, 0xFE	; 254
 48e:	51 05       	cpc	r21, r1
 490:	78 f0       	brcs	.+30     	; 0x4b0 <__divsf3_pse+0x86>
 492:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__fp_inf>
 496:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_szero>
 49a:	5f 3f       	cpi	r21, 0xFF	; 255
 49c:	e4 f3       	brlt	.-8      	; 0x496 <__divsf3_pse+0x6c>
 49e:	98 3e       	cpi	r25, 0xE8	; 232
 4a0:	d4 f3       	brlt	.-12     	; 0x496 <__divsf3_pse+0x6c>
 4a2:	86 95       	lsr	r24
 4a4:	77 95       	ror	r23
 4a6:	67 95       	ror	r22
 4a8:	b7 95       	ror	r27
 4aa:	f7 95       	ror	r31
 4ac:	9f 5f       	subi	r25, 0xFF	; 255
 4ae:	c9 f7       	brne	.-14     	; 0x4a2 <__divsf3_pse+0x78>
 4b0:	88 0f       	add	r24, r24
 4b2:	91 1d       	adc	r25, r1
 4b4:	96 95       	lsr	r25
 4b6:	87 95       	ror	r24
 4b8:	97 f9       	bld	r25, 7
 4ba:	08 95       	ret
 4bc:	e1 e0       	ldi	r30, 0x01	; 1
 4be:	66 0f       	add	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	88 1f       	adc	r24, r24
 4c4:	bb 1f       	adc	r27, r27
 4c6:	62 17       	cp	r22, r18
 4c8:	73 07       	cpc	r23, r19
 4ca:	84 07       	cpc	r24, r20
 4cc:	ba 07       	cpc	r27, r26
 4ce:	20 f0       	brcs	.+8      	; 0x4d8 <__divsf3_pse+0xae>
 4d0:	62 1b       	sub	r22, r18
 4d2:	73 0b       	sbc	r23, r19
 4d4:	84 0b       	sbc	r24, r20
 4d6:	ba 0b       	sbc	r27, r26
 4d8:	ee 1f       	adc	r30, r30
 4da:	88 f7       	brcc	.-30     	; 0x4be <__divsf3_pse+0x94>
 4dc:	e0 95       	com	r30
 4de:	08 95       	ret

000004e0 <__fixunssfsi>:
 4e0:	0e 94 0c 03 	call	0x618	; 0x618 <__fp_splitA>
 4e4:	88 f0       	brcs	.+34     	; 0x508 <__fixunssfsi+0x28>
 4e6:	9f 57       	subi	r25, 0x7F	; 127
 4e8:	98 f0       	brcs	.+38     	; 0x510 <__fixunssfsi+0x30>
 4ea:	b9 2f       	mov	r27, r25
 4ec:	99 27       	eor	r25, r25
 4ee:	b7 51       	subi	r27, 0x17	; 23
 4f0:	b0 f0       	brcs	.+44     	; 0x51e <__fixunssfsi+0x3e>
 4f2:	e1 f0       	breq	.+56     	; 0x52c <__fixunssfsi+0x4c>
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	1a f0       	brmi	.+6      	; 0x504 <__fixunssfsi+0x24>
 4fe:	ba 95       	dec	r27
 500:	c9 f7       	brne	.-14     	; 0x4f4 <__fixunssfsi+0x14>
 502:	14 c0       	rjmp	.+40     	; 0x52c <__fixunssfsi+0x4c>
 504:	b1 30       	cpi	r27, 0x01	; 1
 506:	91 f0       	breq	.+36     	; 0x52c <__fixunssfsi+0x4c>
 508:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_zero>
 50c:	b1 e0       	ldi	r27, 0x01	; 1
 50e:	08 95       	ret
 510:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_zero>
 514:	67 2f       	mov	r22, r23
 516:	78 2f       	mov	r23, r24
 518:	88 27       	eor	r24, r24
 51a:	b8 5f       	subi	r27, 0xF8	; 248
 51c:	39 f0       	breq	.+14     	; 0x52c <__fixunssfsi+0x4c>
 51e:	b9 3f       	cpi	r27, 0xF9	; 249
 520:	cc f3       	brlt	.-14     	; 0x514 <__fixunssfsi+0x34>
 522:	86 95       	lsr	r24
 524:	77 95       	ror	r23
 526:	67 95       	ror	r22
 528:	b3 95       	inc	r27
 52a:	d9 f7       	brne	.-10     	; 0x522 <__fixunssfsi+0x42>
 52c:	3e f4       	brtc	.+14     	; 0x53c <__fixunssfsi+0x5c>
 52e:	90 95       	com	r25
 530:	80 95       	com	r24
 532:	70 95       	com	r23
 534:	61 95       	neg	r22
 536:	7f 4f       	sbci	r23, 0xFF	; 255
 538:	8f 4f       	sbci	r24, 0xFF	; 255
 53a:	9f 4f       	sbci	r25, 0xFF	; 255
 53c:	08 95       	ret

0000053e <__floatunsisf>:
 53e:	e8 94       	clt
 540:	09 c0       	rjmp	.+18     	; 0x554 <__floatsisf+0x12>

00000542 <__floatsisf>:
 542:	97 fb       	bst	r25, 7
 544:	3e f4       	brtc	.+14     	; 0x554 <__floatsisf+0x12>
 546:	90 95       	com	r25
 548:	80 95       	com	r24
 54a:	70 95       	com	r23
 54c:	61 95       	neg	r22
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	8f 4f       	sbci	r24, 0xFF	; 255
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	99 23       	and	r25, r25
 556:	a9 f0       	breq	.+42     	; 0x582 <__floatsisf+0x40>
 558:	f9 2f       	mov	r31, r25
 55a:	96 e9       	ldi	r25, 0x96	; 150
 55c:	bb 27       	eor	r27, r27
 55e:	93 95       	inc	r25
 560:	f6 95       	lsr	r31
 562:	87 95       	ror	r24
 564:	77 95       	ror	r23
 566:	67 95       	ror	r22
 568:	b7 95       	ror	r27
 56a:	f1 11       	cpse	r31, r1
 56c:	f8 cf       	rjmp	.-16     	; 0x55e <__floatsisf+0x1c>
 56e:	fa f4       	brpl	.+62     	; 0x5ae <__floatsisf+0x6c>
 570:	bb 0f       	add	r27, r27
 572:	11 f4       	brne	.+4      	; 0x578 <__floatsisf+0x36>
 574:	60 ff       	sbrs	r22, 0
 576:	1b c0       	rjmp	.+54     	; 0x5ae <__floatsisf+0x6c>
 578:	6f 5f       	subi	r22, 0xFF	; 255
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	8f 4f       	sbci	r24, 0xFF	; 255
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	16 c0       	rjmp	.+44     	; 0x5ae <__floatsisf+0x6c>
 582:	88 23       	and	r24, r24
 584:	11 f0       	breq	.+4      	; 0x58a <__floatsisf+0x48>
 586:	96 e9       	ldi	r25, 0x96	; 150
 588:	11 c0       	rjmp	.+34     	; 0x5ac <__floatsisf+0x6a>
 58a:	77 23       	and	r23, r23
 58c:	21 f0       	breq	.+8      	; 0x596 <__floatsisf+0x54>
 58e:	9e e8       	ldi	r25, 0x8E	; 142
 590:	87 2f       	mov	r24, r23
 592:	76 2f       	mov	r23, r22
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <__floatsisf+0x5e>
 596:	66 23       	and	r22, r22
 598:	71 f0       	breq	.+28     	; 0x5b6 <__floatsisf+0x74>
 59a:	96 e8       	ldi	r25, 0x86	; 134
 59c:	86 2f       	mov	r24, r22
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	2a f0       	brmi	.+10     	; 0x5ae <__floatsisf+0x6c>
 5a4:	9a 95       	dec	r25
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	da f7       	brpl	.-10     	; 0x5a4 <__floatsisf+0x62>
 5ae:	88 0f       	add	r24, r24
 5b0:	96 95       	lsr	r25
 5b2:	87 95       	ror	r24
 5b4:	97 f9       	bld	r25, 7
 5b6:	08 95       	ret

000005b8 <__fp_inf>:
 5b8:	97 f9       	bld	r25, 7
 5ba:	9f 67       	ori	r25, 0x7F	; 127
 5bc:	80 e8       	ldi	r24, 0x80	; 128
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	08 95       	ret

000005c4 <__fp_nan>:
 5c4:	9f ef       	ldi	r25, 0xFF	; 255
 5c6:	80 ec       	ldi	r24, 0xC0	; 192
 5c8:	08 95       	ret

000005ca <__fp_pscA>:
 5ca:	00 24       	eor	r0, r0
 5cc:	0a 94       	dec	r0
 5ce:	16 16       	cp	r1, r22
 5d0:	17 06       	cpc	r1, r23
 5d2:	18 06       	cpc	r1, r24
 5d4:	09 06       	cpc	r0, r25
 5d6:	08 95       	ret

000005d8 <__fp_pscB>:
 5d8:	00 24       	eor	r0, r0
 5da:	0a 94       	dec	r0
 5dc:	12 16       	cp	r1, r18
 5de:	13 06       	cpc	r1, r19
 5e0:	14 06       	cpc	r1, r20
 5e2:	05 06       	cpc	r0, r21
 5e4:	08 95       	ret

000005e6 <__fp_round>:
 5e6:	09 2e       	mov	r0, r25
 5e8:	03 94       	inc	r0
 5ea:	00 0c       	add	r0, r0
 5ec:	11 f4       	brne	.+4      	; 0x5f2 <__fp_round+0xc>
 5ee:	88 23       	and	r24, r24
 5f0:	52 f0       	brmi	.+20     	; 0x606 <__fp_round+0x20>
 5f2:	bb 0f       	add	r27, r27
 5f4:	40 f4       	brcc	.+16     	; 0x606 <__fp_round+0x20>
 5f6:	bf 2b       	or	r27, r31
 5f8:	11 f4       	brne	.+4      	; 0x5fe <__fp_round+0x18>
 5fa:	60 ff       	sbrs	r22, 0
 5fc:	04 c0       	rjmp	.+8      	; 0x606 <__fp_round+0x20>
 5fe:	6f 5f       	subi	r22, 0xFF	; 255
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	8f 4f       	sbci	r24, 0xFF	; 255
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	08 95       	ret

00000608 <__fp_split3>:
 608:	57 fd       	sbrc	r21, 7
 60a:	90 58       	subi	r25, 0x80	; 128
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	59 f0       	breq	.+22     	; 0x628 <__fp_splitA+0x10>
 612:	5f 3f       	cpi	r21, 0xFF	; 255
 614:	71 f0       	breq	.+28     	; 0x632 <__fp_splitA+0x1a>
 616:	47 95       	ror	r20

00000618 <__fp_splitA>:
 618:	88 0f       	add	r24, r24
 61a:	97 fb       	bst	r25, 7
 61c:	99 1f       	adc	r25, r25
 61e:	61 f0       	breq	.+24     	; 0x638 <__fp_splitA+0x20>
 620:	9f 3f       	cpi	r25, 0xFF	; 255
 622:	79 f0       	breq	.+30     	; 0x642 <__fp_splitA+0x2a>
 624:	87 95       	ror	r24
 626:	08 95       	ret
 628:	12 16       	cp	r1, r18
 62a:	13 06       	cpc	r1, r19
 62c:	14 06       	cpc	r1, r20
 62e:	55 1f       	adc	r21, r21
 630:	f2 cf       	rjmp	.-28     	; 0x616 <__fp_split3+0xe>
 632:	46 95       	lsr	r20
 634:	f1 df       	rcall	.-30     	; 0x618 <__fp_splitA>
 636:	08 c0       	rjmp	.+16     	; 0x648 <__fp_splitA+0x30>
 638:	16 16       	cp	r1, r22
 63a:	17 06       	cpc	r1, r23
 63c:	18 06       	cpc	r1, r24
 63e:	99 1f       	adc	r25, r25
 640:	f1 cf       	rjmp	.-30     	; 0x624 <__fp_splitA+0xc>
 642:	86 95       	lsr	r24
 644:	71 05       	cpc	r23, r1
 646:	61 05       	cpc	r22, r1
 648:	08 94       	sec
 64a:	08 95       	ret

0000064c <__fp_zero>:
 64c:	e8 94       	clt

0000064e <__fp_szero>:
 64e:	bb 27       	eor	r27, r27
 650:	66 27       	eor	r22, r22
 652:	77 27       	eor	r23, r23
 654:	cb 01       	movw	r24, r22
 656:	97 f9       	bld	r25, 7
 658:	08 95       	ret

0000065a <__udivmodsi4>:
 65a:	a1 e2       	ldi	r26, 0x21	; 33
 65c:	1a 2e       	mov	r1, r26
 65e:	aa 1b       	sub	r26, r26
 660:	bb 1b       	sub	r27, r27
 662:	fd 01       	movw	r30, r26
 664:	0d c0       	rjmp	.+26     	; 0x680 <__udivmodsi4_ep>

00000666 <__udivmodsi4_loop>:
 666:	aa 1f       	adc	r26, r26
 668:	bb 1f       	adc	r27, r27
 66a:	ee 1f       	adc	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	a2 17       	cp	r26, r18
 670:	b3 07       	cpc	r27, r19
 672:	e4 07       	cpc	r30, r20
 674:	f5 07       	cpc	r31, r21
 676:	20 f0       	brcs	.+8      	; 0x680 <__udivmodsi4_ep>
 678:	a2 1b       	sub	r26, r18
 67a:	b3 0b       	sbc	r27, r19
 67c:	e4 0b       	sbc	r30, r20
 67e:	f5 0b       	sbc	r31, r21

00000680 <__udivmodsi4_ep>:
 680:	66 1f       	adc	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	1a 94       	dec	r1
 68a:	69 f7       	brne	.-38     	; 0x666 <__udivmodsi4_loop>
 68c:	60 95       	com	r22
 68e:	70 95       	com	r23
 690:	80 95       	com	r24
 692:	90 95       	com	r25
 694:	9b 01       	movw	r18, r22
 696:	ac 01       	movw	r20, r24
 698:	bd 01       	movw	r22, r26
 69a:	cf 01       	movw	r24, r30
 69c:	08 95       	ret

0000069e <_exit>:
 69e:	f8 94       	cli

000006a0 <__stop_program>:
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <__stop_program>
