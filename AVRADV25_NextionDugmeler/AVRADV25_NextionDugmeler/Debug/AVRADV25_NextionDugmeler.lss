
AVRADV25_NextionDugmeler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  00000330  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800178  00800178  0000043c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c65  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000865  00000000  00000000  00001191  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000559  00000000  00000000  000019f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000460  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_18>
  4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 37       	cpi	r26, 0x78	; 120
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e7       	ldi	r26, 0x78	; 120
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 3b       	cpi	r26, 0xBD	; 189
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  9e:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <nextion_komut>:



void nextion_komut(char* komut)
{
	uart_puts(komut);
  a6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <uart_puts>
	uart_putc(0xFF);
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <uart_putc>
	uart_putc(0xFF);
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <uart_putc>
	uart_putc(0xFF);
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <uart_putc>
  bc:	08 95       	ret

000000be <main>:
#include <avr/interrupt.h>
#include <stdio.h>
#include <string.h>
void nextion_komut(char* komut);
int main(void)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	64 97       	sbiw	r28, 0x14	; 20
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
    sei();
  d2:	78 94       	sei
    uart_init(UART_BAUD_SELECT(9600,F_CPU));
  d4:	87 e6       	ldi	r24, 0x67	; 103
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 25 01 	call	0x24a	; 0x24a <uart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	81 ee       	ldi	r24, 0xE1	; 225
  e0:	94 e0       	ldi	r25, 0x04	; 4
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x24>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x2e>
  ec:	00 00       	nop
    _delay_ms(100);
	nextion_komut("page 0");
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <nextion_komut>
			 int i = 0;
			 
			 while(1)
			 {
				 
				 buf[i] = uart_getc();
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	7c 01       	movw	r14, r24
  fc:	c8 2e       	mov	r12, r24
  fe:	df 2c       	mov	r13, r15
    _delay_ms(100);
	nextion_komut("page 0");
	 while (1)
	 {
		 char buf [20];
		 if (uart_available() > 0)
 100:	0e 94 80 01 	call	0x300	; 0x300 <uart_available>
 104:	18 16       	cp	r1, r24
 106:	19 06       	cpc	r1, r25
 108:	b4 f4       	brge	.+44     	; 0x136 <main+0x78>
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	10 e0       	ldi	r17, 0x00	; 0
			 int i = 0;
			 
			 while(1)
			 {
				 
				 buf[i] = uart_getc();
 10e:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_getc>
 112:	f7 01       	movw	r30, r14
 114:	e0 0f       	add	r30, r16
 116:	f1 1f       	adc	r31, r17
 118:	80 83       	st	Z, r24
				 if (buf[i] == '\n')
 11a:	8a 30       	cpi	r24, 0x0A	; 10
 11c:	61 f0       	breq	.+24     	; 0x136 <main+0x78>
				 break;
				 if (buf[i] == '\0')
 11e:	88 23       	and	r24, r24
 120:	51 f0       	breq	.+20     	; 0x136 <main+0x78>
				 break;
				 if (buf[i] == '\r')
 122:	8d 30       	cpi	r24, 0x0D	; 13
 124:	41 f0       	breq	.+16     	; 0x136 <main+0x78>
				 break;
				 i++;
 126:	0f 5f       	subi	r16, 0xFF	; 255
 128:	1f 4f       	sbci	r17, 0xFF	; 255
				 if (i>19)
 12a:	04 31       	cpi	r16, 0x14	; 20
 12c:	11 05       	cpc	r17, r1
 12e:	7c f3       	brlt	.-34     	; 0x10e <main+0x50>
				 i = 0;
 130:	00 e0       	ldi	r16, 0x00	; 0
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	ec cf       	rjmp	.-40     	; 0x10e <main+0x50>
			 }
		 }
	char* karakter_kontrol = strchr(buf,'1');
 136:	61 e3       	ldi	r22, 0x31	; 49
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	8c 2d       	mov	r24, r12
 13c:	9d 2d       	mov	r25, r13
 13e:	0e 94 8b 01 	call	0x316	; 0x316 <strchr>
	if (karakter_kontrol != 0)
 142:	89 2b       	or	r24, r25
 144:	21 f0       	breq	.+8      	; 0x14e <main+0x90>
	{
		nextion_komut("t0.txt=\"1. Dugmeye Basildi\"");
 146:	87 e0       	ldi	r24, 0x07	; 7
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <nextion_komut>
	}
	
	
	karakter_kontrol = 0;
	karakter_kontrol = strchr(buf,'2');
 14e:	62 e3       	ldi	r22, 0x32	; 50
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	8c 2d       	mov	r24, r12
 154:	9d 2d       	mov	r25, r13
 156:	0e 94 8b 01 	call	0x316	; 0x316 <strchr>
	if (karakter_kontrol != 0)
 15a:	89 2b       	or	r24, r25
 15c:	21 f0       	breq	.+8      	; 0x166 <main+0xa8>
	{
		nextion_komut("t0.txt=\"2. Dugmeye Basildi\"");
 15e:	83 e2       	ldi	r24, 0x23	; 35
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <nextion_komut>
	}
	
	
	karakter_kontrol = 0;
	karakter_kontrol = strchr(buf,'3');
 166:	63 e3       	ldi	r22, 0x33	; 51
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	8c 2d       	mov	r24, r12
 16c:	9d 2d       	mov	r25, r13
 16e:	0e 94 8b 01 	call	0x316	; 0x316 <strchr>
	if (karakter_kontrol != 0)
 172:	89 2b       	or	r24, r25
 174:	21 f0       	breq	.+8      	; 0x17e <main+0xc0>
	{
		nextion_komut("t0.txt=\"3. Dugmeye Basildi\"");
 176:	8f e3       	ldi	r24, 0x3F	; 63
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 53 00 	call	0xa6	; 0xa6 <nextion_komut>
	}
	
	
	karakter_kontrol = 0;
	karakter_kontrol = strchr(buf,'4');
 17e:	64 e3       	ldi	r22, 0x34	; 52
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	8c 2d       	mov	r24, r12
 184:	9d 2d       	mov	r25, r13
 186:	0e 94 8b 01 	call	0x316	; 0x316 <strchr>
	if (karakter_kontrol != 0)
 18a:	89 2b       	or	r24, r25
 18c:	09 f4       	brne	.+2      	; 0x190 <main+0xd2>
 18e:	b8 cf       	rjmp	.-144    	; 0x100 <main+0x42>
	{
		nextion_komut("t0.txt=\"4. Dugmeye Basildi\"");
 190:	8b e5       	ldi	r24, 0x5B	; 91
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <nextion_komut>
	}	 
	 
  }	
 198:	b3 cf       	rjmp	.-154    	; 0x100 <main+0x42>

0000019a <__vector_18>:
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);

}/* uart_puts_p */
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
 1ae:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1b2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1b6:	8c 71       	andi	r24, 0x1C	; 28
 1b8:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <UART_RxHead>
 1bc:	ef 5f       	subi	r30, 0xFF	; 255
 1be:	ef 71       	andi	r30, 0x1F	; 31
 1c0:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <UART_RxTail>
 1c4:	e9 17       	cp	r30, r25
 1c6:	39 f0       	breq	.+14     	; 0x1d6 <__vector_18+0x3c>
 1c8:	e0 93 7a 01 	sts	0x017A, r30	; 0x80017a <UART_RxHead>
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	e3 58       	subi	r30, 0x83	; 131
 1d0:	fe 4f       	sbci	r31, 0xFE	; 254
 1d2:	20 83       	st	Z, r18
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <__vector_18+0x3e>
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <__data_end>
 1dc:	89 2b       	or	r24, r25
 1de:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <__data_end>
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_19>:
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
 208:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <UART_TxHead>
 20c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <UART_TxTail>
 210:	98 17       	cp	r25, r24
 212:	69 f0       	breq	.+26     	; 0x22e <__vector_19+0x38>
 214:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <UART_TxTail>
 218:	ef 5f       	subi	r30, 0xFF	; 255
 21a:	ef 71       	andi	r30, 0x1F	; 31
 21c:	e0 93 7b 01 	sts	0x017B, r30	; 0x80017b <UART_TxTail>
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	e3 56       	subi	r30, 0x63	; 99
 224:	fe 4f       	sbci	r31, 0xFE	; 254
 226:	80 81       	ld	r24, Z
 228:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 22c:	05 c0       	rjmp	.+10     	; 0x238 <__vector_19+0x42>
 22e:	e1 ec       	ldi	r30, 0xC1	; 193
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8f 7d       	andi	r24, 0xDF	; 223
 236:	80 83       	st	Z, r24
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <uart_init>:
 24a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <UART_TxHead>
 24e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <UART_TxTail>
 252:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <UART_RxHead>
 256:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <UART_RxTail>
 25a:	99 23       	and	r25, r25
 25c:	1c f4       	brge	.+6      	; 0x264 <uart_init+0x1a>
 25e:	22 e0       	ldi	r18, 0x02	; 2
 260:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 264:	90 78       	andi	r25, 0x80	; 128
 266:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 26a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 26e:	88 e9       	ldi	r24, 0x98	; 152
 270:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 27a:	08 95       	ret

0000027c <uart_getc>:
 27c:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <UART_RxHead>
 280:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <UART_RxTail>
 284:	98 17       	cp	r25, r24
 286:	a9 f0       	breq	.+42     	; 0x2b2 <uart_getc+0x36>
 288:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <UART_RxTail>
 28c:	9f 5f       	subi	r25, 0xFF	; 255
 28e:	9f 71       	andi	r25, 0x1F	; 31
 290:	e9 2f       	mov	r30, r25
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	e3 58       	subi	r30, 0x83	; 131
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	20 81       	ld	r18, Z
 29a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end>
 29e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <UART_RxTail>
 2a2:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <__data_end>
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	98 2f       	mov	r25, r24
 2aa:	88 27       	eor	r24, r24
 2ac:	82 0f       	add	r24, r18
 2ae:	91 1d       	adc	r25, r1
 2b0:	08 95       	ret
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	08 95       	ret

000002b8 <uart_putc>:
 2b8:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <UART_TxHead>
 2bc:	2f 5f       	subi	r18, 0xFF	; 255
 2be:	2f 71       	andi	r18, 0x1F	; 31
 2c0:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <UART_TxTail>
 2c4:	29 17       	cp	r18, r25
 2c6:	e1 f3       	breq	.-8      	; 0x2c0 <uart_putc+0x8>
 2c8:	e2 2f       	mov	r30, r18
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	e3 56       	subi	r30, 0x63	; 99
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	80 83       	st	Z, r24
 2d2:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <UART_TxHead>
 2d6:	e1 ec       	ldi	r30, 0xC1	; 193
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	80 62       	ori	r24, 0x20	; 32
 2de:	80 83       	st	Z, r24
 2e0:	08 95       	ret

000002e2 <uart_puts>:
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
 2e8:	88 81       	ld	r24, Y
 2ea:	88 23       	and	r24, r24
 2ec:	31 f0       	breq	.+12     	; 0x2fa <uart_puts+0x18>
 2ee:	21 96       	adiw	r28, 0x01	; 1
 2f0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <uart_putc>
 2f4:	89 91       	ld	r24, Y+
 2f6:	81 11       	cpse	r24, r1
 2f8:	fb cf       	rjmp	.-10     	; 0x2f0 <uart_puts+0xe>
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <uart_available>:

int uart_available(void)
{
	return (unsigned int)(UART_RX_BUFFER_SIZE + UART_RxHead - UART_RxTail ) % UART_RX_BUFFER_SIZE;
 300:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <UART_RxHead>
 304:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <UART_RxTail>
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	80 96       	adiw	r24, 0x20	; 32
 30c:	82 1b       	sub	r24, r18
 30e:	91 09       	sbc	r25, r1
}
 310:	8f 71       	andi	r24, 0x1F	; 31
 312:	99 27       	eor	r25, r25
 314:	08 95       	ret

00000316 <strchr>:
 316:	fc 01       	movw	r30, r24
 318:	81 91       	ld	r24, Z+
 31a:	86 17       	cp	r24, r22
 31c:	21 f0       	breq	.+8      	; 0x326 <strchr+0x10>
 31e:	88 23       	and	r24, r24
 320:	d9 f7       	brne	.-10     	; 0x318 <strchr+0x2>
 322:	99 27       	eor	r25, r25
 324:	08 95       	ret
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	cf 01       	movw	r24, r30
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
