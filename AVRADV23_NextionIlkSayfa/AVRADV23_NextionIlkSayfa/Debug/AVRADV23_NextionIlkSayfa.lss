
AVRADV23_NextionIlkSayfa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000020c  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800108  00800108  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab5  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c3  00000000  00000000  00000e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b2  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ca  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036f  00000000  00000000  0000209a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_18>
  4c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 34       	cpi	r26, 0x4D	; 77
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "uart.h"
int main(void)
{
	sei();
  a6:	78 94       	sei
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 c7 00 	call	0x18e	; 0x18e <uart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	81 ee       	ldi	r24, 0xE1	; 225
  b4:	94 e0       	ldi	r25, 0x04	; 4
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x10>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x1a>
  c0:	00 00       	nop
	_delay_ms(100);
	uart_puts("page 0");
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <uart_puts>
	uart_putc(0xFF);
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <uart_putc>
	uart_putc(0xFF);
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <uart_putc>
	uart_putc(0xFF);
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <uart_putc>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x36>

000000de <__vector_18>:
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
  f2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f6:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fa:	8c 71       	andi	r24, 0x1C	; 28
  fc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <UART_RxHead>
 100:	ef 5f       	subi	r30, 0xFF	; 255
 102:	ef 71       	andi	r30, 0x1F	; 31
 104:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <UART_RxTail>
 108:	e9 17       	cp	r30, r25
 10a:	39 f0       	breq	.+14     	; 0x11a <__vector_18+0x3c>
 10c:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <UART_RxHead>
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	e3 5f       	subi	r30, 0xF3	; 243
 114:	fe 4f       	sbci	r31, 0xFE	; 254
 116:	20 83       	st	Z, r18
 118:	01 c0       	rjmp	.+2      	; 0x11c <__vector_18+0x3e>
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_end>
 120:	89 2b       	or	r24, r25
 122:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_19>:
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
 14c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <UART_TxHead>
 150:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <UART_TxTail>
 154:	98 17       	cp	r25, r24
 156:	69 f0       	breq	.+26     	; 0x172 <__vector_19+0x38>
 158:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <UART_TxTail>
 15c:	ef 5f       	subi	r30, 0xFF	; 255
 15e:	ef 71       	andi	r30, 0x1F	; 31
 160:	e0 93 0b 01 	sts	0x010B, r30	; 0x80010b <UART_TxTail>
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e3 5d       	subi	r30, 0xD3	; 211
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	80 81       	ld	r24, Z
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 170:	05 c0       	rjmp	.+10     	; 0x17c <__vector_19+0x42>
 172:	e1 ec       	ldi	r30, 0xC1	; 193
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8f 7d       	andi	r24, 0xDF	; 223
 17a:	80 83       	st	Z, r24
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <uart_init>:
 18e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <UART_TxHead>
 192:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <UART_TxTail>
 196:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <UART_RxHead>
 19a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <UART_RxTail>
 19e:	99 23       	and	r25, r25
 1a0:	1c f4       	brge	.+6      	; 0x1a8 <uart_init+0x1a>
 1a2:	22 e0       	ldi	r18, 0x02	; 2
 1a4:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a8:	90 78       	andi	r25, 0x80	; 128
 1aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1b2:	88 e9       	ldi	r24, 0x98	; 152
 1b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1be:	08 95       	ret

000001c0 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1c0:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <UART_TxHead>
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 1c8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <UART_TxTail>
 1cc:	29 17       	cp	r18, r25
 1ce:	e1 f3       	breq	.-8      	; 0x1c8 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 1d0:	e2 2f       	mov	r30, r18
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e3 5d       	subi	r30, 0xD3	; 211
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 1da:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 1de:	e1 ec       	ldi	r30, 0xC1	; 193
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret

000001ea <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	ec 01       	movw	r28, r24
    while (*s) 
 1f0:	88 81       	ld	r24, Y
 1f2:	88 23       	and	r24, r24
 1f4:	31 f0       	breq	.+12     	; 0x202 <uart_puts+0x18>
 1f6:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 1f8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 1fc:	89 91       	ld	r24, Y+
 1fe:	81 11       	cpse	r24, r1
 200:	fb cf       	rjmp	.-10     	; 0x1f8 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
