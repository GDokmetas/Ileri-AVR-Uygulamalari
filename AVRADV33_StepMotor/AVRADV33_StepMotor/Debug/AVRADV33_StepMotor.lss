
AVRADV33_StepMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae0  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fd  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a5  00000000  00000000  0000151d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  000019c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000427  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002de  00000000  00000000  00001ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000021a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  78:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <set1>:
	}
}

void set1()
{
	IN1 = HIGH;
  80:	8b b1       	in	r24, 0x0b	; 11
  82:	84 60       	ori	r24, 0x04	; 4
  84:	8b b9       	out	0x0b, r24	; 11
	IN2 = LOW;
  86:	8b b1       	in	r24, 0x0b	; 11
  88:	87 7f       	andi	r24, 0xF7	; 247
  8a:	8b b9       	out	0x0b, r24	; 11
	IN3 = LOW;
  8c:	8b b1       	in	r24, 0x0b	; 11
  8e:	8f 7e       	andi	r24, 0xEF	; 239
  90:	8b b9       	out	0x0b, r24	; 11
	IN4 = LOW;
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	8f 7d       	andi	r24, 0xDF	; 223
  96:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	8f e3       	ldi	r24, 0x3F	; 63
  9a:	9f e1       	ldi	r25, 0x1F	; 31
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <set1+0x1c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <set1+0x22>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <set2>:
	_delay_ms(step_delay);
}

void set2()
{
	IN1 = HIGH;
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	8b b9       	out	0x0b, r24	; 11
	IN2 = LOW; 
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	87 7f       	andi	r24, 0xF7	; 247
  b0:	8b b9       	out	0x0b, r24	; 11
	IN3 = LOW;
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	8f 7e       	andi	r24, 0xEF	; 239
  b6:	8b b9       	out	0x0b, r24	; 11
	IN4 = HIGH;
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	8f e3       	ldi	r24, 0x3F	; 63
  c0:	9f e1       	ldi	r25, 0x1F	; 31
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <set2+0x1c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <set2+0x22>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <set3>:
	_delay_ms(step_delay);
}

void set3()
{
	IN1 = LOW;
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	8b b9       	out	0x0b, r24	; 11
	IN2 = LOW;
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	87 7f       	andi	r24, 0xF7	; 247
  d6:	8b b9       	out	0x0b, r24	; 11
	IN3 = LOW;
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	8f 7e       	andi	r24, 0xEF	; 239
  dc:	8b b9       	out	0x0b, r24	; 11
	IN4 = HIGH;
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	80 62       	ori	r24, 0x20	; 32
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	8f e3       	ldi	r24, 0x3F	; 63
  e6:	9f e1       	ldi	r25, 0x1F	; 31
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <set3+0x1c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <set3+0x22>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <set4>:
	_delay_ms(step_delay);
}

void set4()
{
	IN1 = LOW;
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	8b b9       	out	0x0b, r24	; 11
	IN2 = LOW;
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	87 7f       	andi	r24, 0xF7	; 247
  fc:	8b b9       	out	0x0b, r24	; 11
	IN3 = HIGH;
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	80 61       	ori	r24, 0x10	; 16
 102:	8b b9       	out	0x0b, r24	; 11
	IN4 = HIGH;
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	80 62       	ori	r24, 0x20	; 32
 108:	8b b9       	out	0x0b, r24	; 11
 10a:	8f e3       	ldi	r24, 0x3F	; 63
 10c:	9f e1       	ldi	r25, 0x1F	; 31
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <set4+0x1c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <set4+0x22>
 114:	00 00       	nop
 116:	08 95       	ret

00000118 <set5>:
	_delay_ms(step_delay);
}

void set5()
{
	IN1 = LOW;
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	8b b9       	out	0x0b, r24	; 11
	IN2 = LOW;
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	87 7f       	andi	r24, 0xF7	; 247
 122:	8b b9       	out	0x0b, r24	; 11
	IN3 = HIGH;
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
	IN4 = LOW;
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	8f 7d       	andi	r24, 0xDF	; 223
 12e:	8b b9       	out	0x0b, r24	; 11
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	9f e1       	ldi	r25, 0x1F	; 31
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <set5+0x1c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <set5+0x22>
 13a:	00 00       	nop
 13c:	08 95       	ret

0000013e <set6>:
	_delay_ms(step_delay);
}

void set6()
{
	IN1 = LOW;
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	8b 7f       	andi	r24, 0xFB	; 251
 142:	8b b9       	out	0x0b, r24	; 11
	IN2 = HIGH;
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	88 60       	ori	r24, 0x08	; 8
 148:	8b b9       	out	0x0b, r24	; 11
	IN3 = HIGH;
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	8b b9       	out	0x0b, r24	; 11
	IN4 = LOW;
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	8f 7d       	andi	r24, 0xDF	; 223
 154:	8b b9       	out	0x0b, r24	; 11
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9f e1       	ldi	r25, 0x1F	; 31
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <set6+0x1c>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <set6+0x22>
 160:	00 00       	nop
 162:	08 95       	ret

00000164 <set7>:
	_delay_ms(step_delay);
}

void set7()
{
	IN1 = LOW;
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	8b 7f       	andi	r24, 0xFB	; 251
 168:	8b b9       	out	0x0b, r24	; 11
	IN2 = HIGH;
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	8b b9       	out	0x0b, r24	; 11
	IN3 = LOW;
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	8f 7e       	andi	r24, 0xEF	; 239
 174:	8b b9       	out	0x0b, r24	; 11
	IN4 = HIGH;
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	80 62       	ori	r24, 0x20	; 32
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9f e1       	ldi	r25, 0x1F	; 31
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <set7+0x1c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <set7+0x22>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <set8>:
	_delay_ms(step_delay);
}

void set8()
{
	IN1 = HIGH;
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	8b b9       	out	0x0b, r24	; 11
	IN2 = HIGH;
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	88 60       	ori	r24, 0x08	; 8
 194:	8b b9       	out	0x0b, r24	; 11
	IN3 = LOW;
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	8f 7e       	andi	r24, 0xEF	; 239
 19a:	8b b9       	out	0x0b, r24	; 11
	IN4 = LOW;
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	8f 7d       	andi	r24, 0xDF	; 223
 1a0:	8b b9       	out	0x0b, r24	; 11
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	9f e1       	ldi	r25, 0x1F	; 31
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <set8+0x1c>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <set8+0x22>
 1ac:	00 00       	nop
 1ae:	08 95       	ret

000001b0 <step_ileri>:
	
    }
}

void step_ileri(unsigned int adim)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ec 01       	movw	r28, r24
	while (adim > 0)
 1b6:	11 c0       	rjmp	.+34     	; 0x1da <step_ileri+0x2a>
	{
		set1();
 1b8:	0e 94 40 00 	call	0x80	; 0x80 <set1>
		set2();
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <set2>
		set3();
 1c0:	0e 94 66 00 	call	0xcc	; 0xcc <set3>
		set4();
 1c4:	0e 94 79 00 	call	0xf2	; 0xf2 <set4>
		set5();
 1c8:	0e 94 8c 00 	call	0x118	; 0x118 <set5>
		set6();
 1cc:	0e 94 9f 00 	call	0x13e	; 0x13e <set6>
		set7();
 1d0:	0e 94 b2 00 	call	0x164	; 0x164 <set7>
		set8();
 1d4:	0e 94 c5 00 	call	0x18a	; 0x18a <set8>
	adim--;
 1d8:	21 97       	sbiw	r28, 0x01	; 1
    }
}

void step_ileri(unsigned int adim)
{
	while (adim > 0)
 1da:	20 97       	sbiw	r28, 0x00	; 0
 1dc:	69 f7       	brne	.-38     	; 0x1b8 <step_ileri+0x8>
		set7();
		set8();
	adim--;
    }
	
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <main>:
void set7();
void set8();

int main(void)
{
    D2_dir = OUTPUT;
 1e4:	8a b1       	in	r24, 0x0a	; 10
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	8a b9       	out	0x0a, r24	; 10
	D3_dir = OUTPUT;
 1ea:	8a b1       	in	r24, 0x0a	; 10
 1ec:	88 60       	ori	r24, 0x08	; 8
 1ee:	8a b9       	out	0x0a, r24	; 10
	D4_dir = OUTPUT;
 1f0:	8a b1       	in	r24, 0x0a	; 10
 1f2:	80 61       	ori	r24, 0x10	; 16
 1f4:	8a b9       	out	0x0a, r24	; 10
	D5_dir = OUTPUT;
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	8a b9       	out	0x0a, r24	; 10
	step_ileri(50);
 1fc:	82 e3       	ldi	r24, 0x32	; 50
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <step_ileri>
 204:	ff cf       	rjmp	.-2      	; 0x204 <main+0x20>

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
