
AVRADV21_MAX7219ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000344  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ed4  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000995  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a0  00000000  00000000  00001d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000021c  00000000  00000000  0000251c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000516  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c6  00000000  00000000  00002c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003314  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 82 00 	call	0x104	; 0x104 <main>
  78:	0c 94 a0 01 	jmp	0x340	; 0x340 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adc_init>:
	ADMUX &= 0xF0;
	ADMUX |= channel;
	ADCSRA |=(1<<ADSC);
	while(ADCSRA & (1<<ADSC));
	return ADCW;
}
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	87 60       	ori	r24, 0x07	; 7
  88:	80 83       	st	Z, r24
  8a:	ac e7       	ldi	r26, 0x7C	; 124
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	8c 91       	ld	r24, X
  90:	80 64       	ori	r24, 0x40	; 64
  92:	8c 93       	st	X, r24
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
  a0:	08 95       	ret

000000a2 <adc_read_smooth>:

uint16_t adc_read_smooth(uint8_t channel)
{
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	18 2f       	mov	r17, r24
  aa:	24 e6       	ldi	r18, 0x64	; 100
  ac:	30 e0       	ldi	r19, 0x00	; 0
	uint32_t adtotal = 0;
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	ba 01       	movw	r22, r20
	for (int i=0; i<100; i++)
	{
		ADMUX &= 0xF0;
  b4:	ac e7       	ldi	r26, 0x7C	; 124
  b6:	b0 e0       	ldi	r27, 0x00	; 0
		ADMUX |= channel;
		ADCSRA |=(1<<ADSC);
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
		while(ADCSRA & (1<<ADSC));
		adtotal += ADCW;	
  bc:	c8 e7       	ldi	r28, 0x78	; 120
  be:	d0 e0       	ldi	r29, 0x00	; 0
uint16_t adc_read_smooth(uint8_t channel)
{
	uint32_t adtotal = 0;
	for (int i=0; i<100; i++)
	{
		ADMUX &= 0xF0;
  c0:	9c 91       	ld	r25, X
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	9c 93       	st	X, r25
		ADMUX |= channel;
  c6:	9c 91       	ld	r25, X
  c8:	91 2b       	or	r25, r17
  ca:	9c 93       	st	X, r25
		ADCSRA |=(1<<ADSC);
  cc:	90 81       	ld	r25, Z
  ce:	90 64       	ori	r25, 0x40	; 64
  d0:	90 83       	st	Z, r25
		while(ADCSRA & (1<<ADSC));
  d2:	90 81       	ld	r25, Z
  d4:	96 fd       	sbrc	r25, 6
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <adc_read_smooth+0x30>
		adtotal += ADCW;	
  d8:	88 81       	ld	r24, Y
  da:	99 81       	ldd	r25, Y+1	; 0x01
  dc:	48 0f       	add	r20, r24
  de:	59 1f       	adc	r21, r25
  e0:	61 1d       	adc	r22, r1
  e2:	71 1d       	adc	r23, r1
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	31 09       	sbc	r19, r1
}

uint16_t adc_read_smooth(uint8_t channel)
{
	uint32_t adtotal = 0;
	for (int i=0; i<100; i++)
  e8:	59 f7       	brne	.-42     	; 0xc0 <adc_read_smooth+0x1e>
		ADMUX |= channel;
		ADCSRA |=(1<<ADSC);
		while(ADCSRA & (1<<ADSC));
		adtotal += ADCW;	
	}
	return adtotal / 100;
  ea:	cb 01       	movw	r24, r22
  ec:	ba 01       	movw	r22, r20
  ee:	24 e6       	ldi	r18, 0x64	; 100
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
}
  fa:	c9 01       	movw	r24, r18
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	08 95       	ret

00000104 <main>:
#include "adc.h"
#include <stdint.h>
#include <util/delay.h>
int main(void)
{
    adc_init();
 104:	0e 94 40 00 	call	0x80	; 0x80 <adc_init>
	max_init();
 108:	0e 94 ad 00 	call	0x15a	; 0x15a <max_init>
    while (1) 
    {
		max_show32bit((uint32_t)adc_read_smooth(0));
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 51 00 	call	0xa2	; 0xa2 <adc_read_smooth>
 112:	bc 01       	movw	r22, r24
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 c3 00 	call	0x186	; 0x186 <max_show32bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	81 ee       	ldi	r24, 0xE1	; 225
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x1e>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x28>
 12c:	00 00       	nop
 12e:	ee cf       	rjmp	.-36     	; 0x10c <main+0x8>

00000130 <max_send_byte>:
	} while (--i);
}

void max_digit(uint8_t digit, uint8_t value)
{
	max_send_byte(digit, value);
 130:	cf 93       	push	r28
 132:	c6 2f       	mov	r28, r22
 134:	2a 98       	cbi	0x05, 2	; 5
 136:	0e 94 78 01 	call	0x2f0	; 0x2f0 <spi_transceive>
 13a:	8c 2f       	mov	r24, r28
 13c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <spi_transceive>
 140:	2a 9a       	sbi	0x05, 2	; 5
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <max_clear_display>:
 146:	cf 93       	push	r28
 148:	c8 e0       	ldi	r28, 0x08	; 8
 14a:	6f e0       	ldi	r22, 0x0F	; 15
 14c:	8c 2f       	mov	r24, r28
 14e:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 152:	c1 50       	subi	r28, 0x01	; 1
 154:	d1 f7       	brne	.-12     	; 0x14a <max_clear_display+0x4>
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <max_init>:
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <spi_init>
 160:	6f ef       	ldi	r22, 0xFF	; 255
 162:	89 e0       	ldi	r24, 0x09	; 9
 164:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 168:	67 e0       	ldi	r22, 0x07	; 7
 16a:	8b e0       	ldi	r24, 0x0B	; 11
 16c:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 180:	0e 94 a3 00 	call	0x146	; 0x146 <max_clear_display>
 184:	08 95       	ret

00000186 <max_show32bit>:
}

void max_show32bit(uint32_t number)
{
 186:	4f 92       	push	r4
 188:	5f 92       	push	r5
 18a:	6f 92       	push	r6
 18c:	7f 92       	push	r7
 18e:	8f 92       	push	r8
 190:	9f 92       	push	r9
 192:	af 92       	push	r10
 194:	bf 92       	push	r11
 196:	cf 92       	push	r12
 198:	df 92       	push	r13
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	4b 01       	movw	r8, r22
 1a0:	5c 01       	movw	r10, r24
	max_clear_display();
 1a2:	0e 94 a3 00 	call	0x146	; 0x146 <max_clear_display>
	} while (--i);
}

void max_digit(uint8_t digit, uint8_t value)
{
	max_send_byte(digit, value);
 1a6:	0f 2e       	mov	r0, r31
 1a8:	fa e0       	ldi	r31, 0x0A	; 10
 1aa:	cf 2e       	mov	r12, r31
 1ac:	d1 2c       	mov	r13, r1
 1ae:	e1 2c       	mov	r14, r1
 1b0:	f1 2c       	mov	r15, r1
 1b2:	f0 2d       	mov	r31, r0
 1b4:	c5 01       	movw	r24, r10
 1b6:	b4 01       	movw	r22, r8
 1b8:	a7 01       	movw	r20, r14
 1ba:	96 01       	movw	r18, r12
 1bc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 1c0:	29 01       	movw	r4, r18
 1c2:	3a 01       	movw	r6, r20
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 1ca:	c3 01       	movw	r24, r6
 1cc:	b2 01       	movw	r22, r4
 1ce:	a7 01       	movw	r20, r14
 1d0:	96 01       	movw	r18, r12
 1d2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 1dc:	c5 01       	movw	r24, r10
 1de:	b4 01       	movw	r22, r8
 1e0:	24 e6       	ldi	r18, 0x64	; 100
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 1ec:	ca 01       	movw	r24, r20
 1ee:	b9 01       	movw	r22, r18
 1f0:	a7 01       	movw	r20, r14
 1f2:	96 01       	movw	r18, r12
 1f4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 1fe:	c5 01       	movw	r24, r10
 200:	b4 01       	movw	r22, r8
 202:	28 ee       	ldi	r18, 0xE8	; 232
 204:	33 e0       	ldi	r19, 0x03	; 3
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 20e:	ca 01       	movw	r24, r20
 210:	b9 01       	movw	r22, r18
 212:	a7 01       	movw	r20, r14
 214:	96 01       	movw	r18, r12
 216:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 220:	c5 01       	movw	r24, r10
 222:	b4 01       	movw	r22, r8
 224:	20 e1       	ldi	r18, 0x10	; 16
 226:	37 e2       	ldi	r19, 0x27	; 39
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 230:	ca 01       	movw	r24, r20
 232:	b9 01       	movw	r22, r18
 234:	a7 01       	movw	r20, r14
 236:	96 01       	movw	r18, r12
 238:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 23c:	85 e0       	ldi	r24, 0x05	; 5
 23e:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 242:	c5 01       	movw	r24, r10
 244:	b4 01       	movw	r22, r8
 246:	20 ea       	ldi	r18, 0xA0	; 160
 248:	36 e8       	ldi	r19, 0x86	; 134
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 252:	ca 01       	movw	r24, r20
 254:	b9 01       	movw	r22, r18
 256:	a7 01       	movw	r20, r14
 258:	96 01       	movw	r18, r12
 25a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 264:	c5 01       	movw	r24, r10
 266:	b4 01       	movw	r22, r8
 268:	20 e4       	ldi	r18, 0x40	; 64
 26a:	32 e4       	ldi	r19, 0x42	; 66
 26c:	4f e0       	ldi	r20, 0x0F	; 15
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 274:	ca 01       	movw	r24, r20
 276:	b9 01       	movw	r22, r18
 278:	a7 01       	movw	r20, r14
 27a:	96 01       	movw	r18, r12
 27c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 280:	87 e0       	ldi	r24, 0x07	; 7
 282:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
 286:	c5 01       	movw	r24, r10
 288:	b4 01       	movw	r22, r8
 28a:	20 e8       	ldi	r18, 0x80	; 128
 28c:	36 e9       	ldi	r19, 0x96	; 150
 28e:	48 e9       	ldi	r20, 0x98	; 152
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 296:	ca 01       	movw	r24, r20
 298:	b9 01       	movw	r22, r18
 29a:	a7 01       	movw	r20, r14
 29c:	96 01       	movw	r18, r12
 29e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodsi4>
 2a2:	88 e0       	ldi	r24, 0x08	; 8
 2a4:	0e 94 98 00 	call	0x130	; 0x130 <max_send_byte>
	max_digit(4, (number / 1000) % 10);
	max_digit(5, (number / 10000) % 10);
	max_digit(6, (number / 100000) % 10);
	max_digit(7, (number / 1000000) % 10);
	max_digit(8, (number / 10000000) % 10);
}
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	df 90       	pop	r13
 2ae:	cf 90       	pop	r12
 2b0:	bf 90       	pop	r11
 2b2:	af 90       	pop	r10
 2b4:	9f 90       	pop	r9
 2b6:	8f 90       	pop	r8
 2b8:	7f 90       	pop	r7
 2ba:	6f 90       	pop	r6
 2bc:	5f 90       	pop	r5
 2be:	4f 90       	pop	r4
 2c0:	08 95       	ret

000002c2 <spi_init>:

void spi_init(uint8_t mode)
{
	if (SPI_DATA_ORDER == MSB_FIRST)
	{
		SPCR &= ~(1<<DORD);
 2c2:	9c b5       	in	r25, 0x2c	; 44
 2c4:	9f 7d       	andi	r25, 0xDF	; 223
 2c6:	9c bd       	out	0x2c, r25	; 44
	}
	else
	{
		SPCR |= (1<<DORD);
	}
	if(mode == SLAVE)
 2c8:	81 11       	cpse	r24, r1
 2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <spi_init+0x12>
	{
			// MISO OUTPUT, OTHERS INPUT
			DDRB |= (1<<DDD4);
 2cc:	24 9a       	sbi	0x04, 4	; 4
			/* Enable SPI */
			SPCR = (1<<SPE);
 2ce:	80 e4       	ldi	r24, 0x40	; 64
 2d0:	8c bd       	out	0x2c, r24	; 44
 2d2:	08 95       	ret
	}
	else
	{
			// MOSI , SCK OUTPUT
			DDRB |= (1<<DDB3)|(1<<DDB5);
 2d4:	84 b1       	in	r24, 0x04	; 4
 2d6:	88 62       	ori	r24, 0x28	; 40
 2d8:	84 b9       	out	0x04, r24	; 4
			DDRB |= (1<<DDB2); //SS OUTPUT
 2da:	22 9a       	sbi	0x04, 2	; 4
			/*SPI Enable, Master Mod */
			SPCR |= ((1<<SPE)|(1<<MSTR));
 2dc:	8c b5       	in	r24, 0x2c	; 44
 2de:	80 65       	ori	r24, 0x50	; 80
 2e0:	8c bd       	out	0x2c, r24	; 44
			SPCR |= (SPI_CLOCK_RATE); 
 2e2:	8c b5       	in	r24, 0x2c	; 44
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (SPI_SPEED);
 2e8:	8d b5       	in	r24, 0x2d	; 45
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	8d bd       	out	0x2d, r24	; 45
 2ee:	08 95       	ret

000002f0 <spi_transceive>:
}

uint8_t spi_transceive(uint8_t data)
{
	/* Send data */
	SPDR = data;
 2f0:	8e bd       	out	0x2e, r24	; 46
	/* wait for end of transmission */
	while(!(SPSR & (1<<SPIF)))
 2f2:	0d b4       	in	r0, 0x2d	; 45
 2f4:	07 fe       	sbrs	r0, 7
 2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <spi_transceive+0x2>
	;
	return SPDR;
 2f8:	8e b5       	in	r24, 0x2e	; 46
}
 2fa:	08 95       	ret

000002fc <__udivmodsi4>:
 2fc:	a1 e2       	ldi	r26, 0x21	; 33
 2fe:	1a 2e       	mov	r1, r26
 300:	aa 1b       	sub	r26, r26
 302:	bb 1b       	sub	r27, r27
 304:	fd 01       	movw	r30, r26
 306:	0d c0       	rjmp	.+26     	; 0x322 <__udivmodsi4_ep>

00000308 <__udivmodsi4_loop>:
 308:	aa 1f       	adc	r26, r26
 30a:	bb 1f       	adc	r27, r27
 30c:	ee 1f       	adc	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	a2 17       	cp	r26, r18
 312:	b3 07       	cpc	r27, r19
 314:	e4 07       	cpc	r30, r20
 316:	f5 07       	cpc	r31, r21
 318:	20 f0       	brcs	.+8      	; 0x322 <__udivmodsi4_ep>
 31a:	a2 1b       	sub	r26, r18
 31c:	b3 0b       	sbc	r27, r19
 31e:	e4 0b       	sbc	r30, r20
 320:	f5 0b       	sbc	r31, r21

00000322 <__udivmodsi4_ep>:
 322:	66 1f       	adc	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	88 1f       	adc	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	1a 94       	dec	r1
 32c:	69 f7       	brne	.-38     	; 0x308 <__udivmodsi4_loop>
 32e:	60 95       	com	r22
 330:	70 95       	com	r23
 332:	80 95       	com	r24
 334:	90 95       	com	r25
 336:	9b 01       	movw	r18, r22
 338:	ac 01       	movw	r20, r24
 33a:	bd 01       	movw	r22, r26
 33c:	cf 01       	movw	r24, r30
 33e:	08 95       	ret

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
