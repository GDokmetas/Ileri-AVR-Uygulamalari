
AVRADV13_DS1307Write.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a95  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007aa  00000000  00000000  00000d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056f  00000000  00000000  000014fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046f  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000175  00000000  00000000  00001f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define RTC_ADDR (0x68 << 1)
#include <stdint.h>

int main(void)
{
     sei();
  80:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	81 ee       	ldi	r24, 0xE1	; 225
  86:	94 e0       	ldi	r25, 0x04	; 4
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x8>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x12>
  92:	00 00       	nop
     _delay_ms(100);
     i2c_init();
  94:	0e 94 75 00 	call	0xea	; 0xea <i2c_init>
	 uint8_t month = 1;
	 uint8_t monthx10 = 1;
	 uint8_t year = 0;
	 uint8_t yearx10 = 2;
	 
	 i2c_start(RTC_ADDR+I2C_WRITE);
  98:	80 ed       	ldi	r24, 0xD0	; 208
  9a:	0e 94 7b 00 	call	0xf6	; 0xf6 <i2c_start>
	 i2c_write(0x07);
  9e:	87 e0       	ldi	r24, 0x07	; 7
  a0:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
	 i2c_write(0x00);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
	 i2c_stop();
  aa:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_stop>
	 
	 i2c_start(RTC_ADDR+I2C_WRITE);
  ae:	80 ed       	ldi	r24, 0xD0	; 208
  b0:	0e 94 7b 00 	call	0xf6	; 0xf6 <i2c_start>
	 i2c_write(0x00);
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
	 i2c_write(((secx10<<4) | sec));
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
	 i2c_write(((minx10<<4) | min));
  c0:	8d ef       	ldi	r24, 0xFD	; 253
  c2:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
	 i2c_write(((hourx10<<4) | hour));
  c6:	89 e1       	ldi	r24, 0x19	; 25
  c8:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
	 i2c_write(weekDay);
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
	 i2c_write(((datex10<<4) | date));
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
	 i2c_write(((monthx10<<4) | month));
  d8:	81 e1       	ldi	r24, 0x11	; 17
  da:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
	 i2c_write(((yearx10<<4) | year));
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
	 i2c_stop();
  e4:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_stop>
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0x68>

000000ea <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
  ea:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  ee:	88 e4       	ldi	r24, 0x48	; 72
  f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  f4:	08 95       	ret

000000f6 <i2c_start>:
  f6:	94 ea       	ldi	r25, 0xA4	; 164
  f8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  fc:	ec eb       	ldi	r30, 0xBC	; 188
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	90 81       	ld	r25, Z
 102:	99 23       	and	r25, r25
 104:	ec f7       	brge	.-6      	; 0x100 <i2c_start+0xa>
 106:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 10a:	98 7f       	andi	r25, 0xF8	; 248
 10c:	98 30       	cpi	r25, 0x08	; 8
 10e:	11 f0       	breq	.+4      	; 0x114 <i2c_start+0x1e>
 110:	90 31       	cpi	r25, 0x10	; 16
 112:	a1 f4       	brne	.+40     	; 0x13c <i2c_start+0x46>
 114:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <i2c_start+0x2c>
 128:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 12c:	98 7f       	andi	r25, 0xF8	; 248
 12e:	98 31       	cpi	r25, 0x18	; 24
 130:	39 f0       	breq	.+14     	; 0x140 <i2c_start+0x4a>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 34       	cpi	r25, 0x40	; 64
 136:	29 f4       	brne	.+10     	; 0x142 <i2c_start+0x4c>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	08 95       	ret
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret

00000144 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 144:	84 e9       	ldi	r24, 0x94	; 148
 146:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 14a:	ec eb       	ldi	r30, 0xBC	; 188
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	84 fd       	sbrc	r24, 4
 152:	fd cf       	rjmp	.-6      	; 0x14e <i2c_stop+0xa>

}/* i2c_stop */
 154:	08 95       	ret

00000156 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 156:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 23       	and	r24, r24
 168:	ec f7       	brge	.-6      	; 0x164 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 16a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 16e:	98 7f       	andi	r25, 0xF8	; 248
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	98 32       	cpi	r25, 0x28	; 40
 174:	09 f4       	brne	.+2      	; 0x178 <i2c_write+0x22>
 176:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 178:	08 95       	ret

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
