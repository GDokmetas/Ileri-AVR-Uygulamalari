
AVRADV4_ADCPWMRGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c21  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a1d  00000000  00000000  00000f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052b  00000000  00000000  00001986  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000530  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000220  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 92 00 	call	0x124	; 0x124 <main>
  c4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <adc_init>:
   
}

extern void adc_disable_digital(uint8_t pins)
{
   DIDR0 = pins; 
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	80 83       	st	Z, r24
  d6:	ac e7       	ldi	r26, 0x7C	; 124
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	8c 91       	ld	r24, X
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	8c 93       	st	X, r24
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	80 83       	st	Z, r24
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <adc_read>:
  ee:	ec e7       	ldi	r30, 0x7C	; 124
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	90 7f       	andi	r25, 0xF0	; 240
  f6:	90 83       	st	Z, r25
  f8:	90 81       	ld	r25, Z
  fa:	89 2b       	or	r24, r25
  fc:	80 83       	st	Z, r24
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 64       	ori	r24, 0x40	; 64
 106:	80 83       	st	Z, r24
 108:	80 81       	ld	r24, Z
 10a:	86 fd       	sbrc	r24, 6
 10c:	fd cf       	rjmp	.-6      	; 0x108 <adc_read+0x1a>
 10e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 112:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 116:	08 95       	ret

00000118 <adc_left_adjust>:
}

extern void adc_left_adjust()
{
   ADMUX |= (1<<ADLAR);
 118:	ec e7       	ldi	r30, 0x7C	; 124
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 62       	ori	r24, 0x20	; 32
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <main>:
#include <avr/io.h>
#include "adc.h"
#define offset 1000
int main(void)
{
    adc_left_adjust();
 124:	0e 94 8c 00 	call	0x118	; 0x118 <adc_left_adjust>
	adc_init();
 128:	0e 94 66 00 	call	0xcc	; 0xcc <adc_init>
	///////
	 DDRB |= (1<<PORTB1);
 12c:	21 9a       	sbi	0x04, 1	; 4
	 DDRD |= ((1<<PORTD0) | (1<<PORTD1));
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	83 60       	ori	r24, 0x03	; 3
 132:	8a b9       	out	0x0a, r24	; 10
	 ////////
	 TCCR1A|=((1<<COM1A1) );
 134:	e0 e8       	ldi	r30, 0x80	; 128
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	80 83       	st	Z, r24
	 TCCR1B|=(1<<WGM13);
 13e:	e1 e8       	ldi	r30, 0x81	; 129
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 61       	ori	r24, 0x10	; 16
 146:	80 83       	st	Z, r24
	 TCCR1B|=(1<<CS10);
 148:	80 81       	ld	r24, Z
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	80 83       	st	Z, r24
	 ICR1=65535;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	9f ef       	ldi	r25, 0xFF	; 255
 152:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 156:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	 OCR1A=0;
 15a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 15e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	 /////////////
	 TCCR3A|=((1<<COM3A1) );
 162:	e0 e9       	ldi	r30, 0x90	; 144
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	20 81       	ld	r18, Z
 168:	20 68       	ori	r18, 0x80	; 128
 16a:	20 83       	st	Z, r18
	 TCCR3B|=(1<<WGM13);
 16c:	e1 e9       	ldi	r30, 0x91	; 145
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	20 81       	ld	r18, Z
 172:	20 61       	ori	r18, 0x10	; 16
 174:	20 83       	st	Z, r18
	 TCCR3B|=(1<<CS10);
 176:	20 81       	ld	r18, Z
 178:	21 60       	ori	r18, 0x01	; 1
 17a:	20 83       	st	Z, r18
	 ICR3=65535;
 17c:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__DATA_REGION_ORIGIN__+0x37>
 180:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
	 OCR3A=0;
 184:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__DATA_REGION_ORIGIN__+0x39>
 188:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__DATA_REGION_ORIGIN__+0x38>
	 /////////////////
	 TCCR4A|=((1<<COM4A1) );
 18c:	e0 ea       	ldi	r30, 0xA0	; 160
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	20 81       	ld	r18, Z
 192:	20 68       	ori	r18, 0x80	; 128
 194:	20 83       	st	Z, r18
	 TCCR4B|=(1<<WGM13);
 196:	e1 ea       	ldi	r30, 0xA1	; 161
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	20 81       	ld	r18, Z
 19c:	20 61       	ori	r18, 0x10	; 16
 19e:	20 83       	st	Z, r18
	 TCCR4B|=(1<<CS10);
 1a0:	20 81       	ld	r18, Z
 1a2:	21 60       	ori	r18, 0x01	; 1
 1a4:	20 83       	st	Z, r18
	 ICR4=65535;
 1a6:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__DATA_REGION_ORIGIN__+0x47>
 1aa:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__DATA_REGION_ORIGIN__+0x46>
	 OCR4A=0;
 1ae:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__DATA_REGION_ORIGIN__+0x49>
 1b2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__DATA_REGION_ORIGIN__+0x48>
    while (1) 
    {
		OCR1A = adc_read(0) - (offset);
 1b6:	0f 2e       	mov	r0, r31
 1b8:	f8 e8       	ldi	r31, 0x88	; 136
 1ba:	ef 2e       	mov	r14, r31
 1bc:	f1 2c       	mov	r15, r1
 1be:	f0 2d       	mov	r31, r0
		OCR3A = adc_read(2) - (offset);
 1c0:	08 e9       	ldi	r16, 0x98	; 152
 1c2:	10 e0       	ldi	r17, 0x00	; 0
		OCR4A = adc_read(1) - (offset);
 1c4:	c8 ea       	ldi	r28, 0xA8	; 168
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
	 TCCR4B|=(1<<CS10);
	 ICR4=65535;
	 OCR4A=0;
    while (1) 
    {
		OCR1A = adc_read(0) - (offset);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 77 00 	call	0xee	; 0xee <adc_read>
 1ce:	88 5e       	subi	r24, 0xE8	; 232
 1d0:	93 40       	sbci	r25, 0x03	; 3
 1d2:	f7 01       	movw	r30, r14
 1d4:	91 83       	std	Z+1, r25	; 0x01
 1d6:	80 83       	st	Z, r24
		OCR3A = adc_read(2) - (offset);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 77 00 	call	0xee	; 0xee <adc_read>
 1de:	88 5e       	subi	r24, 0xE8	; 232
 1e0:	93 40       	sbci	r25, 0x03	; 3
 1e2:	f8 01       	movw	r30, r16
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	80 83       	st	Z, r24
		OCR4A = adc_read(1) - (offset);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 77 00 	call	0xee	; 0xee <adc_read>
 1ee:	88 5e       	subi	r24, 0xE8	; 232
 1f0:	93 40       	sbci	r25, 0x03	; 3
 1f2:	99 83       	std	Y+1, r25	; 0x01
 1f4:	88 83       	st	Y, r24
 1f6:	e8 cf       	rjmp	.-48     	; 0x1c8 <main+0xa4>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
