
AVRADV3_SLEEP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c3c  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9e  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000551  00000000  00000000  00001a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050b  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007b  00000000  00000000  0000252b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000025a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_1>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  ac:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  b0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  b4:	be 00       	.word	0x00be	; ????
  b6:	c0 00       	.word	0x00c0	; ????
  b8:	c2 00       	.word	0x00c2	; ????
  ba:	c4 00       	.word	0x00c4	; ????
  bc:	c7 00       	.word	0x00c7	; ????
  be:	ca 00       	.word	0x00ca	; ????
  c0:	cd 00       	.word	0x00cd	; ????

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a2 30       	cpi	r26, 0x02	; 2
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 75 00 	call	0xea	; 0xea <main>
  e2:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <main>:
#include <avr/interrupt.h>
int renk = 0; 

int main(void)
{
	EIMSK |= (1<<INT0);
  ea:	e8 9a       	sbi	0x1d, 0	; 29
	PORTD |= (1<<PORTD2);
  ec:	5a 9a       	sbi	0x0b, 2	; 11
	sei();
  ee:	78 94       	sei
    led_init();
  f0:	0e 94 af 00 	call	0x15e	; 0x15e <led_init>
	led_yak(KIRMIZI);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 b3 00 	call	0x166	; 0x166 <led_yak>
	sleep(IDLE);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <sleep>
	led_yak(YESIL);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 b3 00 	call	0x166	; 0x166 <led_yak>
    while (1) 
    {
	    renk++;
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 110:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		led_yak(renk);
 11e:	0e 94 b3 00 	call	0x166	; 0x166 <led_yak>
		if (renk > 6)
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 126:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12a:	07 97       	sbiw	r24, 0x07	; 7
 12c:	24 f0       	brlt	.+8      	; 0x136 <main+0x4c>
		renk = 0;
 12e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 132:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	83 ec       	ldi	r24, 0xC3	; 195
 13a:	99 e0       	ldi	r25, 0x09	; 9
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x52>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x5c>
 146:	00 00       	nop
 148:	e1 cf       	rjmp	.-62     	; 0x10c <main+0x22>

0000014a <__vector_1>:
		_delay_ms(200);	
    }
}

ISR (INT0_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
	   
}
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <led_init>:
 */ 
#include "rgbled.h"

extern void led_init()
{
	RGBDATADIRECTION |= ((1<<KIRMIZIPIN) | (1<<YESILPIN) | (1<<MAVIPIN));
 15e:	8d b1       	in	r24, 0x0d	; 13
 160:	87 60       	ori	r24, 0x07	; 7
 162:	8d b9       	out	0x0d, r24	; 13
 164:	08 95       	ret

00000166 <led_yak>:
}

extern void led_yak(int renk)
{
	RGBPORT &= ~((1<<KIRMIZIPIN) | (1<<YESILPIN) | (1<<MAVIPIN));
 166:	2e b1       	in	r18, 0x0e	; 14
 168:	28 7f       	andi	r18, 0xF8	; 248
 16a:	2e b9       	out	0x0e, r18	; 14
	switch (renk)
 16c:	87 30       	cpi	r24, 0x07	; 7
 16e:	91 05       	cpc	r25, r1
 170:	b8 f4       	brcc	.+46     	; 0x1a0 <led_yak+0x3a>
 172:	fc 01       	movw	r30, r24
 174:	e6 5a       	subi	r30, 0xA6	; 166
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__tablejump2__>
	{
		case KIRMIZI:
		RGBPORT |= (1<<KIRMIZIPIN);
 17c:	70 9a       	sbi	0x0e, 0	; 14
		break;
 17e:	08 95       	ret
		case YESIL:
		RGBPORT |= (1<<YESILPIN);
 180:	71 9a       	sbi	0x0e, 1	; 14
		break;
 182:	08 95       	ret
		case MAVI: 
		RGBPORT |= (1<<MAVIPIN);
 184:	72 9a       	sbi	0x0e, 2	; 14
		break;
 186:	08 95       	ret
		case CAMGOBEGI: 
		RGBPORT |= (1<<MAVIPIN);
 188:	72 9a       	sbi	0x0e, 2	; 14
		RGBPORT |= (1<<YESILPIN);
 18a:	71 9a       	sbi	0x0e, 1	; 14
		break;
 18c:	08 95       	ret
		case SARI:
		RGBPORT |= (1<<KIRMIZIPIN);
 18e:	70 9a       	sbi	0x0e, 0	; 14
		RGBPORT |= (1<<YESILPIN);
 190:	71 9a       	sbi	0x0e, 1	; 14
		break;
 192:	08 95       	ret
		case MOR: 
		RGBPORT |= (1<<KIRMIZIPIN);
 194:	70 9a       	sbi	0x0e, 0	; 14
		RGBPORT |= (1<<MAVIPIN);
 196:	72 9a       	sbi	0x0e, 2	; 14
		break;
 198:	08 95       	ret
		case BEYAZ: 
		RGBPORT |= (1<<KIRMIZIPIN);
 19a:	70 9a       	sbi	0x0e, 0	; 14
		RGBPORT |= (1<<MAVIPIN);
 19c:	72 9a       	sbi	0x0e, 2	; 14
		RGBPORT |= (1<<YESILPIN);
 19e:	71 9a       	sbi	0x0e, 1	; 14
 1a0:	08 95       	ret

000001a2 <sleep>:
 */ 
#include "sleep.h"
#include <avr/io.h>
void sleep(int mode)
{
	SMCR = mode;
 1a2:	83 bf       	out	0x33, r24	; 51
	SMCR |= (1<<SE);
 1a4:	83 b7       	in	r24, 0x33	; 51
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	83 bf       	out	0x33, r24	; 51
	asm("SLEEP");
 1aa:	88 95       	sleep
 1ac:	08 95       	ret

000001ae <__tablejump2__>:
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	05 90       	lpm	r0, Z+
 1b4:	f4 91       	lpm	r31, Z
 1b6:	e0 2d       	mov	r30, r0
 1b8:	09 94       	ijmp

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
