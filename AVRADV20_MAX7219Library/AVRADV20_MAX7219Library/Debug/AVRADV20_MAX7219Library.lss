
AVRADV20_MAX7219Library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bfa  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  00001002  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000478  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  00001c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000494  00000000  00000000  000021e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include "max7219.h"

int main(void)
{
    max_init();
  80:	0e 94 60 00 	call	0xc0	; 0xc0 <max_init>
	max_clear_display();
  84:	0e 94 56 00 	call	0xac	; 0xac <max_clear_display>
	max_show32bit(12345678);
  88:	6e e4       	ldi	r22, 0x4E	; 78
  8a:	71 e6       	ldi	r23, 0x61	; 97
  8c:	8c eb       	ldi	r24, 0xBC	; 188
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 76 00 	call	0xec	; 0xec <max_show32bit>
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0x14>

00000096 <max_send_byte>:
	} while (--i);
}

void max_digit(uint8_t digit, uint8_t value)
{
	max_send_byte(digit, value);
  96:	cf 93       	push	r28
  98:	c6 2f       	mov	r28, r22
  9a:	2a 98       	cbi	0x05, 2	; 5
  9c:	0e 94 27 01 	call	0x24e	; 0x24e <spi_transceive>
  a0:	8c 2f       	mov	r24, r28
  a2:	0e 94 27 01 	call	0x24e	; 0x24e <spi_transceive>
  a6:	2a 9a       	sbi	0x05, 2	; 5
  a8:	cf 91       	pop	r28
  aa:	08 95       	ret

000000ac <max_clear_display>:
  ac:	cf 93       	push	r28
  ae:	c8 e0       	ldi	r28, 0x08	; 8
  b0:	6f e0       	ldi	r22, 0x0F	; 15
  b2:	8c 2f       	mov	r24, r28
  b4:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
  b8:	c1 50       	subi	r28, 0x01	; 1
  ba:	d1 f7       	brne	.-12     	; 0xb0 <max_clear_display+0x4>
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <max_init>:
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 10 01 	call	0x220	; 0x220 <spi_init>
  c6:	6f ef       	ldi	r22, 0xFF	; 255
  c8:	89 e0       	ldi	r24, 0x09	; 9
  ca:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
  ce:	67 e0       	ldi	r22, 0x07	; 7
  d0:	8b e0       	ldi	r24, 0x0B	; 11
  d2:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	8a e0       	ldi	r24, 0x0A	; 10
  da:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
  e6:	0e 94 56 00 	call	0xac	; 0xac <max_clear_display>
  ea:	08 95       	ret

000000ec <max_show32bit>:
}

void max_show32bit(uint32_t number)
{
  ec:	4f 92       	push	r4
  ee:	5f 92       	push	r5
  f0:	6f 92       	push	r6
  f2:	7f 92       	push	r7
  f4:	8f 92       	push	r8
  f6:	9f 92       	push	r9
  f8:	af 92       	push	r10
  fa:	bf 92       	push	r11
  fc:	cf 92       	push	r12
  fe:	df 92       	push	r13
 100:	ef 92       	push	r14
 102:	ff 92       	push	r15
 104:	4b 01       	movw	r8, r22
 106:	5c 01       	movw	r10, r24
	} while (--i);
}

void max_digit(uint8_t digit, uint8_t value)
{
	max_send_byte(digit, value);
 108:	0f 2e       	mov	r0, r31
 10a:	fa e0       	ldi	r31, 0x0A	; 10
 10c:	cf 2e       	mov	r12, r31
 10e:	d1 2c       	mov	r13, r1
 110:	e1 2c       	mov	r14, r1
 112:	f1 2c       	mov	r15, r1
 114:	f0 2d       	mov	r31, r0
 116:	a7 01       	movw	r20, r14
 118:	96 01       	movw	r18, r12
 11a:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 11e:	29 01       	movw	r4, r18
 120:	3a 01       	movw	r6, r20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
 128:	c3 01       	movw	r24, r6
 12a:	b2 01       	movw	r22, r4
 12c:	a7 01       	movw	r20, r14
 12e:	96 01       	movw	r18, r12
 130:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
 13a:	c5 01       	movw	r24, r10
 13c:	b4 01       	movw	r22, r8
 13e:	24 e6       	ldi	r18, 0x64	; 100
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 14a:	ca 01       	movw	r24, r20
 14c:	b9 01       	movw	r22, r18
 14e:	a7 01       	movw	r20, r14
 150:	96 01       	movw	r18, r12
 152:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
 15c:	c5 01       	movw	r24, r10
 15e:	b4 01       	movw	r22, r8
 160:	28 ee       	ldi	r18, 0xE8	; 232
 162:	33 e0       	ldi	r19, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 16c:	ca 01       	movw	r24, r20
 16e:	b9 01       	movw	r22, r18
 170:	a7 01       	movw	r20, r14
 172:	96 01       	movw	r18, r12
 174:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 178:	84 e0       	ldi	r24, 0x04	; 4
 17a:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
 17e:	c5 01       	movw	r24, r10
 180:	b4 01       	movw	r22, r8
 182:	20 e1       	ldi	r18, 0x10	; 16
 184:	37 e2       	ldi	r19, 0x27	; 39
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 18e:	ca 01       	movw	r24, r20
 190:	b9 01       	movw	r22, r18
 192:	a7 01       	movw	r20, r14
 194:	96 01       	movw	r18, r12
 196:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
 1a0:	c5 01       	movw	r24, r10
 1a2:	b4 01       	movw	r22, r8
 1a4:	20 ea       	ldi	r18, 0xA0	; 160
 1a6:	36 e8       	ldi	r19, 0x86	; 134
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 1b0:	ca 01       	movw	r24, r20
 1b2:	b9 01       	movw	r22, r18
 1b4:	a7 01       	movw	r20, r14
 1b6:	96 01       	movw	r18, r12
 1b8:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
 1c2:	c5 01       	movw	r24, r10
 1c4:	b4 01       	movw	r22, r8
 1c6:	20 e4       	ldi	r18, 0x40	; 64
 1c8:	32 e4       	ldi	r19, 0x42	; 66
 1ca:	4f e0       	ldi	r20, 0x0F	; 15
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 1d2:	ca 01       	movw	r24, r20
 1d4:	b9 01       	movw	r22, r18
 1d6:	a7 01       	movw	r20, r14
 1d8:	96 01       	movw	r18, r12
 1da:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 1de:	87 e0       	ldi	r24, 0x07	; 7
 1e0:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
 1e4:	c5 01       	movw	r24, r10
 1e6:	b4 01       	movw	r22, r8
 1e8:	20 e8       	ldi	r18, 0x80	; 128
 1ea:	36 e9       	ldi	r19, 0x96	; 150
 1ec:	48 e9       	ldi	r20, 0x98	; 152
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 1f4:	ca 01       	movw	r24, r20
 1f6:	b9 01       	movw	r22, r18
 1f8:	a7 01       	movw	r20, r14
 1fa:	96 01       	movw	r18, r12
 1fc:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 200:	88 e0       	ldi	r24, 0x08	; 8
 202:	0e 94 4b 00 	call	0x96	; 0x96 <max_send_byte>
	max_digit(4, (number / 1000) % 10);
	max_digit(5, (number / 10000) % 10);
	max_digit(6, (number / 100000) % 10);
	max_digit(7, (number / 1000000) % 10);
	max_digit(8, (number / 10000000) % 10);
}
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	df 90       	pop	r13
 20c:	cf 90       	pop	r12
 20e:	bf 90       	pop	r11
 210:	af 90       	pop	r10
 212:	9f 90       	pop	r9
 214:	8f 90       	pop	r8
 216:	7f 90       	pop	r7
 218:	6f 90       	pop	r6
 21a:	5f 90       	pop	r5
 21c:	4f 90       	pop	r4
 21e:	08 95       	ret

00000220 <spi_init>:

void spi_init(uint8_t mode)
{
	if (SPI_DATA_ORDER == MSB_FIRST)
	{
		SPCR &= ~(1<<DORD);
 220:	9c b5       	in	r25, 0x2c	; 44
 222:	9f 7d       	andi	r25, 0xDF	; 223
 224:	9c bd       	out	0x2c, r25	; 44
	}
	else
	{
		SPCR |= (1<<DORD);
	}
	if(mode == SLAVE)
 226:	81 11       	cpse	r24, r1
 228:	04 c0       	rjmp	.+8      	; 0x232 <spi_init+0x12>
	{
			// MISO OUTPUT, OTHERS INPUT
			DDRB |= (1<<DDD4);
 22a:	24 9a       	sbi	0x04, 4	; 4
			/* Enable SPI */
			SPCR = (1<<SPE);
 22c:	80 e4       	ldi	r24, 0x40	; 64
 22e:	8c bd       	out	0x2c, r24	; 44
 230:	08 95       	ret
	}
	else
	{
			// MOSI , SCK OUTPUT
			DDRB |= (1<<DDB3)|(1<<DDB5);
 232:	84 b1       	in	r24, 0x04	; 4
 234:	88 62       	ori	r24, 0x28	; 40
 236:	84 b9       	out	0x04, r24	; 4
			DDRB |= (1<<DDB2); //SS OUTPUT
 238:	22 9a       	sbi	0x04, 2	; 4
			/*SPI Enable, Master Mod */
			SPCR |= ((1<<SPE)|(1<<MSTR));
 23a:	8c b5       	in	r24, 0x2c	; 44
 23c:	80 65       	ori	r24, 0x50	; 80
 23e:	8c bd       	out	0x2c, r24	; 44
			SPCR |= (SPI_CLOCK_RATE); 
 240:	8c b5       	in	r24, 0x2c	; 44
 242:	81 60       	ori	r24, 0x01	; 1
 244:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (SPI_SPEED);
 246:	8d b5       	in	r24, 0x2d	; 45
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	8d bd       	out	0x2d, r24	; 45
 24c:	08 95       	ret

0000024e <spi_transceive>:
}

uint8_t spi_transceive(uint8_t data)
{
	/* Send data */
	SPDR = data;
 24e:	8e bd       	out	0x2e, r24	; 46
	/* wait for end of transmission */
	while(!(SPSR & (1<<SPIF)))
 250:	0d b4       	in	r0, 0x2d	; 45
 252:	07 fe       	sbrs	r0, 7
 254:	fd cf       	rjmp	.-6      	; 0x250 <spi_transceive+0x2>
	;
	return SPDR;
 256:	8e b5       	in	r24, 0x2e	; 46
}
 258:	08 95       	ret

0000025a <__udivmodsi4>:
 25a:	a1 e2       	ldi	r26, 0x21	; 33
 25c:	1a 2e       	mov	r1, r26
 25e:	aa 1b       	sub	r26, r26
 260:	bb 1b       	sub	r27, r27
 262:	fd 01       	movw	r30, r26
 264:	0d c0       	rjmp	.+26     	; 0x280 <__udivmodsi4_ep>

00000266 <__udivmodsi4_loop>:
 266:	aa 1f       	adc	r26, r26
 268:	bb 1f       	adc	r27, r27
 26a:	ee 1f       	adc	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	a2 17       	cp	r26, r18
 270:	b3 07       	cpc	r27, r19
 272:	e4 07       	cpc	r30, r20
 274:	f5 07       	cpc	r31, r21
 276:	20 f0       	brcs	.+8      	; 0x280 <__udivmodsi4_ep>
 278:	a2 1b       	sub	r26, r18
 27a:	b3 0b       	sbc	r27, r19
 27c:	e4 0b       	sbc	r30, r20
 27e:	f5 0b       	sbc	r31, r21

00000280 <__udivmodsi4_ep>:
 280:	66 1f       	adc	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	88 1f       	adc	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	1a 94       	dec	r1
 28a:	69 f7       	brne	.-38     	; 0x266 <__udivmodsi4_loop>
 28c:	60 95       	com	r22
 28e:	70 95       	com	r23
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	9b 01       	movw	r18, r22
 296:	ac 01       	movw	r20, r24
 298:	bd 01       	movw	r22, r26
 29a:	cf 01       	movw	r24, r30
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
